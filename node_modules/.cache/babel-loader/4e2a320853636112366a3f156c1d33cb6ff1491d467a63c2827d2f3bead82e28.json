{"ast":null,"code":"/*import React, { useEffect, useState } from \"react\";\r\nimport CoinInfo from \"../components/Coin/CoinInfo/info\";\r\nimport LineChart from \"../components/Coin/LineChart/lineChart\";\r\nimport PriceToggle from \"../components/Coin/PriceToggle/priceToggle\";\r\nimport Footer from \"../components/Common/Footer/footer\";\r\nimport Header from \"../components/Common/Header\";\r\nimport Loader from \"../components/Common/Loader/loader\";\r\nimport SelectCoin from \"../components/Compare/SelectCoin/selectCoin\";\r\nimport List from \"../components/Dashboard/List/list\";\r\nimport { coinObject } from \"../functions/coinObject\";\r\nimport { get100Coins } from \"../functions/get100Coins\";\r\nimport { getCoinData } from \"../functions/getCoinData\";\r\nimport { getCoinPrices } from \"../functions/getCoinPrices\";\r\nimport { settingChartData } from \"../functions/settingChartData\";\r\n\r\nfunction ComparePage() {\r\n  const [allCoins, setAllCoins] = useState([]);\r\n  const [coin1, setCoin1] = useState(allCoins[0]?.id ?? \"bitcoin\");\r\n  const [coin2, setCoin2] = useState(allCoins[1]?.id ?? \"ethereum\");\r\n  const [days, setDays] = useState(120);\r\n  const [coin1Data, setCoin1Data] = useState();\r\n  const [coin2Data, setCoin2Data] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [priceType, setPriceType] = useState(\"prices\");\r\n  const [chartData, setChartData] = useState({\r\n    labels: [],\r\n    datasets: [],\r\n  });\r\n\r\n  const handlePriceTypeChange = async (e) => {\r\n    setLoading(true);\r\n    setPriceType(e.target.value);\r\n    const prices1 = await getCoinPrices(coin1, days, e.target.value);\r\n    const prices2 = await getCoinPrices(coin2, days, e.target.value);\r\n    settingChartData(setChartData, prices1, coin1Data, coin2Data, prices2);\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleCoinChange = async (e, isCoin1) => {\r\n    setLoading(true);\r\n    if (isCoin1) {\r\n      setCoin1(e.target.value);\r\n      const data1 = await getCoinData(e.target.value);\r\n      coinObject(setCoin1Data, data1);\r\n      const prices1 = await getCoinPrices(e.target.value, days, priceType);\r\n      const prices2 = await getCoinPrices(coin2, days, priceType);\r\n      settingChartData(setChartData, prices1, data1, coin2Data, prices2);\r\n    } else {\r\n      setCoin2(e.target.value);\r\n      const data2 = await getCoinData(e.target.value);\r\n      coinObject(setCoin2Data, data2);\r\n      const prices1 = await getCoinPrices(coin1, days, priceType);\r\n      const prices2 = await getCoinPrices(e.target.value, days, priceType);\r\n      settingChartData(setChartData, prices1, coin1Data, data2, prices2);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleDaysChange = async (e) => {\r\n    setLoading(true);\r\n    setDays(e.target.value);\r\n    const prices1 = await getCoinPrices(coin1, e.target.value, priceType);\r\n    const prices2 = await getCoinPrices(coin2, e.target.value, priceType);\r\n    settingChartData(setChartData, prices1, coin1Data, coin2Data, prices2);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    setLoading(true);\r\n    const data = await get100Coins();\r\n    if (data) {\r\n      setAllCoins(data);\r\n    }\r\n    const data1 = await getCoinData(coin1);\r\n    const data2 = await getCoinData(coin2);\r\n    coinObject(setCoin1Data, data1);\r\n    coinObject(setCoin2Data, data2);\r\n    const prices1 = await getCoinPrices(coin1, days);\r\n    const prices2 = await getCoinPrices(coin2, days);\r\n    settingChartData(setChartData, prices1, coin1Data, coin2Data, prices2);\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      {loading || !coin1Data?.id || !coin2Data?.id ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <SelectCoin\r\n            allCoins={allCoins}\r\n            coin1={coin1}\r\n            coin2={coin2}\r\n            days={days}\r\n            handleCoinChange={handleCoinChange}\r\n            handleDaysChange={handleDaysChange}\r\n          />\r\n          <div className=\"grey-wrapper\">\r\n            <List coin={coin1Data} delay={0.1} />\r\n          </div>\r\n          <div className=\"grey-wrapper\">\r\n            <List coin={coin2Data} delay={0.2} />\r\n          </div>\r\n          <div className=\"grey-wrapper\">\r\n            <PriceToggle\r\n              handlePriceTypeChange={handlePriceTypeChange}\r\n              priceType={priceType}\r\n            />\r\n            <LineChart\r\n              chartData={chartData}\r\n              multiAxis={true}\r\n              priceType={priceType}\r\n            />\r\n          </div>\r\n          <CoinInfo name={coin1Data.name} desc={coin1Data.desc} />\r\n          <CoinInfo name={coin2Data.name} desc={coin2Data.desc} />\r\n        </>\r\n      )}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ComparePage;*/","map":{"version":3,"names":[],"sources":["C:/Users/Prajwal/Desktop/crypto-dashboard-dec/src/pages/compare.js"],"sourcesContent":["/*import React, { useEffect, useState } from \"react\";\r\nimport CoinInfo from \"../components/Coin/CoinInfo/info\";\r\nimport LineChart from \"../components/Coin/LineChart/lineChart\";\r\nimport PriceToggle from \"../components/Coin/PriceToggle/priceToggle\";\r\nimport Footer from \"../components/Common/Footer/footer\";\r\nimport Header from \"../components/Common/Header\";\r\nimport Loader from \"../components/Common/Loader/loader\";\r\nimport SelectCoin from \"../components/Compare/SelectCoin/selectCoin\";\r\nimport List from \"../components/Dashboard/List/list\";\r\nimport { coinObject } from \"../functions/coinObject\";\r\nimport { get100Coins } from \"../functions/get100Coins\";\r\nimport { getCoinData } from \"../functions/getCoinData\";\r\nimport { getCoinPrices } from \"../functions/getCoinPrices\";\r\nimport { settingChartData } from \"../functions/settingChartData\";\r\n\r\nfunction ComparePage() {\r\n  const [allCoins, setAllCoins] = useState([]);\r\n  const [coin1, setCoin1] = useState(allCoins[0]?.id ?? \"bitcoin\");\r\n  const [coin2, setCoin2] = useState(allCoins[1]?.id ?? \"ethereum\");\r\n  const [days, setDays] = useState(120);\r\n  const [coin1Data, setCoin1Data] = useState();\r\n  const [coin2Data, setCoin2Data] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [priceType, setPriceType] = useState(\"prices\");\r\n  const [chartData, setChartData] = useState({\r\n    labels: [],\r\n    datasets: [],\r\n  });\r\n\r\n  const handlePriceTypeChange = async (e) => {\r\n    setLoading(true);\r\n    setPriceType(e.target.value);\r\n    const prices1 = await getCoinPrices(coin1, days, e.target.value);\r\n    const prices2 = await getCoinPrices(coin2, days, e.target.value);\r\n    settingChartData(setChartData, prices1, coin1Data, coin2Data, prices2);\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleCoinChange = async (e, isCoin1) => {\r\n    setLoading(true);\r\n    if (isCoin1) {\r\n      setCoin1(e.target.value);\r\n      const data1 = await getCoinData(e.target.value);\r\n      coinObject(setCoin1Data, data1);\r\n      const prices1 = await getCoinPrices(e.target.value, days, priceType);\r\n      const prices2 = await getCoinPrices(coin2, days, priceType);\r\n      settingChartData(setChartData, prices1, data1, coin2Data, prices2);\r\n    } else {\r\n      setCoin2(e.target.value);\r\n      const data2 = await getCoinData(e.target.value);\r\n      coinObject(setCoin2Data, data2);\r\n      const prices1 = await getCoinPrices(coin1, days, priceType);\r\n      const prices2 = await getCoinPrices(e.target.value, days, priceType);\r\n      settingChartData(setChartData, prices1, coin1Data, data2, prices2);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleDaysChange = async (e) => {\r\n    setLoading(true);\r\n    setDays(e.target.value);\r\n    const prices1 = await getCoinPrices(coin1, e.target.value, priceType);\r\n    const prices2 = await getCoinPrices(coin2, e.target.value, priceType);\r\n    settingChartData(setChartData, prices1, coin1Data, coin2Data, prices2);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    setLoading(true);\r\n    const data = await get100Coins();\r\n    if (data) {\r\n      setAllCoins(data);\r\n    }\r\n    const data1 = await getCoinData(coin1);\r\n    const data2 = await getCoinData(coin2);\r\n    coinObject(setCoin1Data, data1);\r\n    coinObject(setCoin2Data, data2);\r\n    const prices1 = await getCoinPrices(coin1, days);\r\n    const prices2 = await getCoinPrices(coin2, days);\r\n    settingChartData(setChartData, prices1, coin1Data, coin2Data, prices2);\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      {loading || !coin1Data?.id || !coin2Data?.id ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <SelectCoin\r\n            allCoins={allCoins}\r\n            coin1={coin1}\r\n            coin2={coin2}\r\n            days={days}\r\n            handleCoinChange={handleCoinChange}\r\n            handleDaysChange={handleDaysChange}\r\n          />\r\n          <div className=\"grey-wrapper\">\r\n            <List coin={coin1Data} delay={0.1} />\r\n          </div>\r\n          <div className=\"grey-wrapper\">\r\n            <List coin={coin2Data} delay={0.2} />\r\n          </div>\r\n          <div className=\"grey-wrapper\">\r\n            <PriceToggle\r\n              handlePriceTypeChange={handlePriceTypeChange}\r\n              priceType={priceType}\r\n            />\r\n            <LineChart\r\n              chartData={chartData}\r\n              multiAxis={true}\r\n              priceType={priceType}\r\n            />\r\n          </div>\r\n          <CoinInfo name={coin1Data.name} desc={coin1Data.desc} />\r\n          <CoinInfo name={coin2Data.name} desc={coin2Data.desc} />\r\n        </>\r\n      )}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ComparePage;*/\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}