{"ast":null,"code":"import _objectSpread from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { mix } from './mix.mjs';\nimport { rgba, hsla, hex } from 'style-value-types';\nimport { invariant } from 'hey-listen';\nimport { hslaToRgba } from './hsla-to-rgba.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nvar mixLinearColor = function mixLinearColor(from, to, v) {\n  var fromExpo = from * from;\n  return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));\n};\nvar colorTypes = [hex, rgba, hsla];\nvar getColorType = function getColorType(v) {\n  return colorTypes.find(function (type) {\n    return type.test(v);\n  });\n};\nfunction asRGBA(color) {\n  var type = getColorType(color);\n  invariant(Boolean(type), \"'\".concat(color, \"' is not an animatable color. Use the equivalent color code instead.\"));\n  var model = type.parse(color);\n  if (type === hsla) {\n    model = hslaToRgba(model);\n  }\n  return model;\n}\nvar mixColor = function mixColor(from, to) {\n  var fromRGBA = asRGBA(from);\n  var toRGBA = asRGBA(to);\n  var blended = _objectSpread({}, fromRGBA);\n  return function (v) {\n    blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n    blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n    blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n    blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);\n    return rgba.transform(blended);\n  };\n};\nexport { mixColor, mixLinearColor };","map":{"version":3,"names":["mix","rgba","hsla","hex","invariant","hslaToRgba","mixLinearColor","from","to","v","fromExpo","Math","sqrt","max","colorTypes","getColorType","find","type","test","asRGBA","color","Boolean","concat","model","parse","mixColor","fromRGBA","toRGBA","blended","_objectSpread","red","green","blue","alpha","transform"],"sources":["C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/framer-motion/dist/es/utils/mix-color.mjs"],"sourcesContent":["import { mix } from './mix.mjs';\nimport { rgba, hsla, hex } from 'style-value-types';\nimport { invariant } from 'hey-listen';\nimport { hslaToRgba } from './hsla-to-rgba.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    invariant(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    let model = type.parse(color);\n    if (type === hsla) {\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n"],"mappings":";AAAA,SAASA,GAAG,QAAQ,WAAW;AAC/B,SAASC,IAAI,EAAEC,IAAI,EAAEC,GAAG,QAAQ,mBAAmB;AACnD,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,UAAU,QAAQ,oBAAoB;;AAE/C;AACA;AACA;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,IAAI,EAAEC,EAAE,EAAEC,CAAC,EAAK;EACpC,IAAMC,QAAQ,GAAGH,IAAI,GAAGA,IAAI;EAC5B,OAAOI,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEJ,CAAC,IAAID,EAAE,GAAGA,EAAE,GAAGE,QAAQ,CAAC,GAAGA,QAAQ,CAAC,CAAC;AACtE,CAAC;AACD,IAAMI,UAAU,GAAG,CAACX,GAAG,EAAEF,IAAI,EAAEC,IAAI,CAAC;AACpC,IAAMa,YAAY,GAAG,SAAfA,YAAYA,CAAIN,CAAC;EAAA,OAAKK,UAAU,CAACE,IAAI,CAAC,UAACC,IAAI;IAAA,OAAKA,IAAI,CAACC,IAAI,CAACT,CAAC,CAAC;EAAA,EAAC;AAAA;AACnE,SAASU,MAAMA,CAACC,KAAK,EAAE;EACnB,IAAMH,IAAI,GAAGF,YAAY,CAACK,KAAK,CAAC;EAChChB,SAAS,CAACiB,OAAO,CAACJ,IAAI,CAAC,MAAAK,MAAA,CAAMF,KAAK,yEAAsE,CAAC;EACzG,IAAIG,KAAK,GAAGN,IAAI,CAACO,KAAK,CAACJ,KAAK,CAAC;EAC7B,IAAIH,IAAI,KAAKf,IAAI,EAAE;IACfqB,KAAK,GAAGlB,UAAU,CAACkB,KAAK,CAAC;EAC7B;EACA,OAAOA,KAAK;AAChB;AACA,IAAME,QAAQ,GAAG,SAAXA,QAAQA,CAAIlB,IAAI,EAAEC,EAAE,EAAK;EAC3B,IAAMkB,QAAQ,GAAGP,MAAM,CAACZ,IAAI,CAAC;EAC7B,IAAMoB,MAAM,GAAGR,MAAM,CAACX,EAAE,CAAC;EACzB,IAAMoB,OAAO,GAAAC,aAAA,KAAQH,QAAQ,CAAE;EAC/B,OAAO,UAACjB,CAAC,EAAK;IACVmB,OAAO,CAACE,GAAG,GAAGxB,cAAc,CAACoB,QAAQ,CAACI,GAAG,EAAEH,MAAM,CAACG,GAAG,EAAErB,CAAC,CAAC;IACzDmB,OAAO,CAACG,KAAK,GAAGzB,cAAc,CAACoB,QAAQ,CAACK,KAAK,EAAEJ,MAAM,CAACI,KAAK,EAAEtB,CAAC,CAAC;IAC/DmB,OAAO,CAACI,IAAI,GAAG1B,cAAc,CAACoB,QAAQ,CAACM,IAAI,EAAEL,MAAM,CAACK,IAAI,EAAEvB,CAAC,CAAC;IAC5DmB,OAAO,CAACK,KAAK,GAAGjC,GAAG,CAAC0B,QAAQ,CAACO,KAAK,EAAEN,MAAM,CAACM,KAAK,EAAExB,CAAC,CAAC;IACpD,OAAOR,IAAI,CAACiC,SAAS,CAACN,OAAO,CAAC;EAClC,CAAC;AACL,CAAC;AAED,SAASH,QAAQ,EAAEnB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}