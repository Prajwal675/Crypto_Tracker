{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prajwal\\\\Desktop\\\\crypto-dashboard-dec\\\\src\\\\components\\\\Coin\\\\LineChart\\\\lineChart.js\";\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS } from \"chart.js/auto\"; //Dont get rid of this\nimport { convertNumbers } from \"../../../functions/convertNumbers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LineChart(_ref) {\n  let {\n    chartData,\n    priceType,\n    multiAxis\n  } = _ref;\n  const options = {\n    plugins: {\n      legend: {\n        display: multiAxis ? true : false\n      }\n    },\n    responsive: true,\n    interaction: {\n      mode: \"index\",\n      intersect: false\n    },\n    scales: {\n      y: {\n        type: \"linear\",\n        display: true,\n        position: \"left\",\n        ticks: {\n          callback: function (value) {\n            if (priceType == \"total_volumes\") {\n              return convertNumbers(value);\n            } else if (priceType == \"market_caps\") {\n              return \"$\" + convertNumbers(value);\n            } else {\n              return \"$\" + value.toLocaleString();\n            }\n          }\n        }\n      },\n      y2: multiAxis && {\n        type: \"linear\",\n        display: true,\n        position: \"right\",\n        ticks: {\n          callback: function (value) {\n            if (priceType == \"total_volumes\") {\n              return convertNumbers(value);\n            } else if (priceType == \"market_caps\") {\n              return \"$\" + convertNumbers(value);\n            } else {\n              return \"$\" + value.toLocaleString();\n            }\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: chartData,\n    options: options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 10\n  }, this);\n}\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","convertNumbers","jsxDEV","_jsxDEV","LineChart","_ref","chartData","priceType","multiAxis","options","plugins","legend","display","responsive","interaction","mode","intersect","scales","y","type","position","ticks","callback","value","toLocaleString","y2","data","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Prajwal/Desktop/crypto-dashboard-dec/src/components/Coin/LineChart/lineChart.js"],"sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS } from \"chart.js/auto\"; //Dont get rid of this\r\nimport { convertNumbers } from \"../../../functions/convertNumbers\";\r\n\r\nfunction LineChart({ chartData, priceType, multiAxis }) {\r\n  const options = {\r\n    plugins: {\r\n      legend: {\r\n        display: multiAxis ? true : false,\r\n      },\r\n    },\r\n    responsive: true,\r\n    interaction: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n    },\r\n    scales: {\r\n      y: {\r\n        type: \"linear\",\r\n        display: true,\r\n        position: \"left\",\r\n        ticks: {\r\n          callback: function (value) {\r\n            if (priceType == \"total_volumes\") {\r\n              return convertNumbers(value);\r\n            } else if (priceType == \"market_caps\") {\r\n              return \"$\" + convertNumbers(value);\r\n            } else {\r\n              return \"$\" + value.toLocaleString();\r\n            }\r\n          },\r\n        },\r\n      },\r\n      y2: multiAxis && {\r\n        type: \"linear\",\r\n        display: true,\r\n        position: \"right\",\r\n        ticks: {\r\n          callback: function (value) {\r\n            if (priceType == \"total_volumes\") {\r\n              return convertNumbers(value);\r\n            } else if (priceType == \"market_caps\") {\r\n              return \"$\" + convertNumbers(value);\r\n            } else {\r\n              return \"$\" + value.toLocaleString();\r\n            }\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return <Line data={chartData} options={options} />;\r\n}\r\n\r\nexport default LineChart;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,IAAIC,OAAO,QAAQ,eAAe,CAAC,CAAC;AAClD,SAASC,cAAc,QAAQ,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,SAASC,SAASA,CAAAC,IAAA,EAAsC;EAAA,IAArC;IAAEC,SAAS;IAAEC,SAAS;IAAEC;EAAU,CAAC,GAAAH,IAAA;EACpD,MAAMI,OAAO,GAAG;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE;QACNC,OAAO,EAAEJ,SAAS,GAAG,IAAI,GAAG;MAC9B;IACF,CAAC;IACDK,UAAU,EAAE,IAAI;IAChBC,WAAW,EAAE;MACXC,IAAI,EAAE,OAAO;MACbC,SAAS,EAAE;IACb,CAAC;IACDC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,IAAI,EAAE,QAAQ;QACdP,OAAO,EAAE,IAAI;QACbQ,QAAQ,EAAE,MAAM;QAChBC,KAAK,EAAE;UACLC,QAAQ,EAAE,SAAAA,CAAUC,KAAK,EAAE;YACzB,IAAIhB,SAAS,IAAI,eAAe,EAAE;cAChC,OAAON,cAAc,CAACsB,KAAK,CAAC;YAC9B,CAAC,MAAM,IAAIhB,SAAS,IAAI,aAAa,EAAE;cACrC,OAAO,GAAG,GAAGN,cAAc,CAACsB,KAAK,CAAC;YACpC,CAAC,MAAM;cACL,OAAO,GAAG,GAAGA,KAAK,CAACC,cAAc,CAAC,CAAC;YACrC;UACF;QACF;MACF,CAAC;MACDC,EAAE,EAAEjB,SAAS,IAAI;QACfW,IAAI,EAAE,QAAQ;QACdP,OAAO,EAAE,IAAI;QACbQ,QAAQ,EAAE,OAAO;QACjBC,KAAK,EAAE;UACLC,QAAQ,EAAE,SAAAA,CAAUC,KAAK,EAAE;YACzB,IAAIhB,SAAS,IAAI,eAAe,EAAE;cAChC,OAAON,cAAc,CAACsB,KAAK,CAAC;YAC9B,CAAC,MAAM,IAAIhB,SAAS,IAAI,aAAa,EAAE;cACrC,OAAO,GAAG,GAAGN,cAAc,CAACsB,KAAK,CAAC;YACpC,CAAC,MAAM;cACL,OAAO,GAAG,GAAGA,KAAK,CAACC,cAAc,CAAC,CAAC;YACrC;UACF;QACF;MACF;IACF;EACF,CAAC;EAED,oBAAOrB,OAAA,CAACL,IAAI;IAAC4B,IAAI,EAAEpB,SAAU;IAACG,OAAO,EAAEA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACpD;AAACC,EAAA,GAjDQ3B,SAAS;AAmDlB,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}