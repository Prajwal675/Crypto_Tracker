{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"from\", \"to\", \"restSpeed\", \"restDelta\"];\nimport { findSpring, calcAngularFreq } from './find-spring.mjs';\nvar durationKeys = [\"duration\", \"bounce\"];\nvar physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n  return keys.some(function (key) {\n    return options[key] !== undefined;\n  });\n}\nfunction getSpringOptions(options) {\n  var springOptions = _objectSpread({\n    velocity: 0.0,\n    stiffness: 100,\n    damping: 10,\n    mass: 1.0,\n    isResolvedFromDuration: false\n  }, options);\n  // stiffness/damping/mass overrides duration/bounce\n  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {\n    var derived = findSpring(options);\n    springOptions = _objectSpread(_objectSpread(_objectSpread({}, springOptions), derived), {}, {\n      velocity: 0.0,\n      mass: 1.0\n    });\n    springOptions.isResolvedFromDuration = true;\n  }\n  return springOptions;\n}\n/**\n * This is based on the spring implementation of Wobble https://github.com/skevy/wobble\n */\nfunction spring(_ref) {\n  var _ref$from = _ref.from,\n    from = _ref$from === void 0 ? 0.0 : _ref$from,\n    _ref$to = _ref.to,\n    to = _ref$to === void 0 ? 1.0 : _ref$to,\n    _ref$restSpeed = _ref.restSpeed,\n    restSpeed = _ref$restSpeed === void 0 ? 2 : _ref$restSpeed,\n    _ref$restDelta = _ref.restDelta,\n    restDelta = _ref$restDelta === void 0 ? 0.01 : _ref$restDelta,\n    options = _objectWithoutProperties(_ref, _excluded);\n  /**\n   * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n   * to reduce GC during animation.\n   */\n  var state = {\n    done: false,\n    value: from\n  };\n  var _getSpringOptions = getSpringOptions(options),\n    stiffness = _getSpringOptions.stiffness,\n    damping = _getSpringOptions.damping,\n    mass = _getSpringOptions.mass,\n    velocity = _getSpringOptions.velocity,\n    duration = _getSpringOptions.duration,\n    isResolvedFromDuration = _getSpringOptions.isResolvedFromDuration;\n  var resolveSpring = zero;\n  var resolveVelocity = zero;\n  function createSpring() {\n    var initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n    var initialDelta = to - from;\n    var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    var undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n    /**\n     * If we're working within what looks like a 0-1 range, change the default restDelta\n     * to 0.01\n     */\n    if (restDelta === undefined) {\n      restDelta = Math.min(Math.abs(to - from) / 100, 0.4);\n    }\n    if (dampingRatio < 1) {\n      var angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n      // Underdamped spring\n      resolveSpring = function resolveSpring(t) {\n        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));\n      };\n      resolveVelocity = function resolveVelocity(t) {\n        // TODO Resolve these calculations with the above\n        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        return dampingRatio * undampedAngularFreq * envelope * (Math.sin(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq + initialDelta * Math.cos(angularFreq * t)) - envelope * (Math.cos(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) - angularFreq * initialDelta * Math.sin(angularFreq * t));\n      };\n    } else if (dampingRatio === 1) {\n      // Critically damped spring\n      resolveSpring = function resolveSpring(t) {\n        return to - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);\n      };\n    } else {\n      // Overdamped spring\n      var dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n      resolveSpring = function resolveSpring(t) {\n        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        // When performing sinh or cosh values can hit Infinity so we cap them here\n        var freqForT = Math.min(dampedAngularFreq * t, 300);\n        return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;\n      };\n    }\n  }\n  createSpring();\n  return {\n    next: function next(t) {\n      var current = resolveSpring(t);\n      if (!isResolvedFromDuration) {\n        var currentVelocity = resolveVelocity(t) * 1000;\n        var isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n        var isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;\n        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n      } else {\n        state.done = t >= duration;\n      }\n      state.value = state.done ? to : current;\n      return state;\n    },\n    flipTarget: function flipTarget() {\n      velocity = -velocity;\n      var _ref2 = [to, from];\n      from = _ref2[0];\n      to = _ref2[1];\n      createSpring();\n    }\n  };\n}\nspring.needsInterpolation = function (a, b) {\n  return typeof a === \"string\" || typeof b === \"string\";\n};\nvar zero = function zero(_t) {\n  return 0;\n};\nexport { spring };","map":{"version":3,"names":["findSpring","calcAngularFreq","durationKeys","physicsKeys","isSpringType","options","keys","some","key","undefined","getSpringOptions","springOptions","_objectSpread","velocity","stiffness","damping","mass","isResolvedFromDuration","derived","spring","_ref","_ref$from","from","_ref$to","to","_ref$restSpeed","restSpeed","_ref$restDelta","restDelta","_objectWithoutProperties","_excluded","state","done","value","_getSpringOptions","duration","resolveSpring","zero","resolveVelocity","createSpring","initialVelocity","initialDelta","dampingRatio","Math","sqrt","undampedAngularFreq","min","abs","angularFreq","t","envelope","exp","sin","cos","dampedAngularFreq","freqForT","sinh","cosh","next","current","currentVelocity","isBelowVelocityThreshold","isBelowDisplacementThreshold","flipTarget","_ref2","needsInterpolation","a","b","_t"],"sources":["C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/framer-motion/dist/es/animation/legacy-popmotion/spring.mjs"],"sourcesContent":["import { findSpring, calcAngularFreq } from './find-spring.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            velocity: 0.0,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\n/**\n * This is based on the spring implementation of Wobble https://github.com/skevy/wobble\n */\nfunction spring({ from = 0.0, to = 1.0, restSpeed = 2, restDelta = 0.01, ...options }) {\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: from };\n    let { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);\n    let resolveSpring = zero;\n    let resolveVelocity = zero;\n    function createSpring() {\n        const initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n        const initialDelta = to - from;\n        const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n        const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n        /**\n         * If we're working within what looks like a 0-1 range, change the default restDelta\n         * to 0.01\n         */\n        if (restDelta === undefined) {\n            restDelta = Math.min(Math.abs(to - from) / 100, 0.4);\n        }\n        if (dampingRatio < 1) {\n            const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n            // Underdamped spring\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                return (to -\n                    envelope *\n                        (((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) /\n                            angularFreq) *\n                            Math.sin(angularFreq * t) +\n                            initialDelta * Math.cos(angularFreq * t)));\n            };\n            resolveVelocity = (t) => {\n                // TODO Resolve these calculations with the above\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                return (dampingRatio *\n                    undampedAngularFreq *\n                    envelope *\n                    ((Math.sin(angularFreq * t) *\n                        (initialVelocity +\n                            dampingRatio *\n                                undampedAngularFreq *\n                                initialDelta)) /\n                        angularFreq +\n                        initialDelta * Math.cos(angularFreq * t)) -\n                    envelope *\n                        (Math.cos(angularFreq * t) *\n                            (initialVelocity +\n                                dampingRatio *\n                                    undampedAngularFreq *\n                                    initialDelta) -\n                            angularFreq *\n                                initialDelta *\n                                Math.sin(angularFreq * t)));\n            };\n        }\n        else if (dampingRatio === 1) {\n            // Critically damped spring\n            resolveSpring = (t) => to -\n                Math.exp(-undampedAngularFreq * t) *\n                    (initialDelta +\n                        (initialVelocity + undampedAngularFreq * initialDelta) *\n                            t);\n        }\n        else {\n            // Overdamped spring\n            const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                // When performing sinh or cosh values can hit Infinity so we cap them here\n                const freqForT = Math.min(dampedAngularFreq * t, 300);\n                return (to -\n                    (envelope *\n                        ((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) *\n                            Math.sinh(freqForT) +\n                            dampedAngularFreq *\n                                initialDelta *\n                                Math.cosh(freqForT))) /\n                        dampedAngularFreq);\n            };\n        }\n    }\n    createSpring();\n    return {\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                const currentVelocity = resolveVelocity(t) * 1000;\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? to : current;\n            return state;\n        },\n        flipTarget: () => {\n            velocity = -velocity;\n            [from, to] = [to, from];\n            createSpring();\n        },\n    };\n}\nspring.needsInterpolation = (a, b) => typeof a === \"string\" || typeof b === \"string\";\nconst zero = (_t) => 0;\n\nexport { spring };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}