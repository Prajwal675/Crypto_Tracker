{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"height\", \"width\", \"redraw\", \"datasetIdKey\", \"type\", \"data\", \"options\", \"plugins\", \"fallbackContent\", \"updateMode\"];\nimport React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\nvar defaultDatasetIdKey = \"label\";\nfunction reforwardRef(ref, value) {\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\nfunction setOptions(chart, nextOptions) {\n  var options = chart.options;\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\nfunction setLabels(currentData, nextLabels) {\n  currentData.labels = nextLabels;\n}\nfunction setDatasets(currentData, nextDatasets) {\n  var datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n  var addedDatasets = [];\n  currentData.datasets = nextDatasets.map(function (nextDataset) {\n    // given the new set, find it's current match\n    var currentDataset = currentData.datasets.find(function (dataset) {\n      return dataset[datasetIdKey] === nextDataset[datasetIdKey];\n    });\n    // There is no original to update, so simply add new one\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return _objectSpread({}, nextDataset);\n    }\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\nfunction cloneData(data) {\n  var datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n  var nextData = {\n    labels: [],\n    datasets: []\n  };\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n  return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nfunction getDatasetAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, \"dataset\", {\n    intersect: true\n  }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nfunction getElementAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, \"nearest\", {\n    intersect: true\n  }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nfunction getElementsAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, \"index\", {\n    intersect: true\n  }, false);\n}\nfunction ChartComponent(param, ref) {\n  var _param$height = param.height,\n    height = _param$height === void 0 ? 150 : _param$height,\n    _param$width = param.width,\n    width = _param$width === void 0 ? 300 : _param$width,\n    _param$redraw = param.redraw,\n    redraw = _param$redraw === void 0 ? false : _param$redraw,\n    datasetIdKey = param.datasetIdKey,\n    type = param.type,\n    data = param.data,\n    options = param.options,\n    _param$plugins = param.plugins,\n    plugins = _param$plugins === void 0 ? [] : _param$plugins,\n    fallbackContent = param.fallbackContent,\n    updateMode = param.updateMode,\n    props = _objectWithoutProperties(param, _excluded);\n  var canvasRef = useRef(null);\n  var chartRef = useRef();\n  var renderChart = function renderChart() {\n    if (!canvasRef.current) return;\n    chartRef.current = new Chart$1(canvasRef.current, {\n      type: type,\n      data: cloneData(data, datasetIdKey),\n      options: options && _objectSpread({}, options),\n      plugins: plugins\n    });\n    reforwardRef(ref, chartRef.current);\n  };\n  var destroyChart = function destroyChart() {\n    reforwardRef(ref, null);\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n  useEffect(function () {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n  useEffect(function () {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n  useEffect(function () {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n  useEffect(function () {\n    if (!chartRef.current) return;\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n  useEffect(function () {\n    if (!chartRef.current) return;\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n  useEffect(function () {\n    renderChart();\n    return function () {\n      return destroyChart();\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"canvas\", Object.assign({\n    ref: canvasRef,\n    role: \"img\",\n    height: height,\n    width: width\n  }, props), fallbackContent);\n}\nvar Chart = /*#__PURE__*/forwardRef(ChartComponent);\nfunction createTypedChart(type, registerables) {\n  Chart$1.register(registerables);\n  return /*#__PURE__*/forwardRef(function (props, ref) {\n    return /*#__PURE__*/React.createElement(Chart, Object.assign({}, props, {\n      ref: ref,\n      type: type\n    }));\n  });\n}\nvar Line = /* #__PURE__ */createTypedChart(\"line\", LineController);\nvar Bar = /* #__PURE__ */createTypedChart(\"bar\", BarController);\nvar Radar = /* #__PURE__ */createTypedChart(\"radar\", RadarController);\nvar Doughnut = /* #__PURE__ */createTypedChart(\"doughnut\", DoughnutController);\nvar PolarArea = /* #__PURE__ */createTypedChart(\"polarArea\", PolarAreaController);\nvar Bubble = /* #__PURE__ */createTypedChart(\"bubble\", BubbleController);\nvar Pie = /* #__PURE__ */createTypedChart(\"pie\", PieController);\nvar Scatter = /* #__PURE__ */createTypedChart(\"scatter\", ScatterController);\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };","map":{"version":3,"mappings":"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","names":["defaultDatasetIdKey","reforwardRef","ref","value","current","setOptions","chart","nextOptions","options","Object","assign","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","data","includes","push","cloneData","nextData","getDatasetAtEvent","event","getElementsAtEventForMode","nativeEvent","intersect","getElementAtEvent","getElementsAtEvent","ChartComponent","height","_param$width","param","width","_param$redraw","redraw","type","_param$plugins","plugins","fallbackContent","updateMode","props","canvasRef","useRef","chartRef","renderChart","ChartJS","destroyChart","destroy","useEffect","config","setTimeout","update","React","canvas","role","Chart","forwardRef","createTypedChart","registerables","register","Line","LineController","Bar","BarController","Radar","RadarController","Doughnut","DoughnutController","PolarArea","PolarAreaController","Bubble","BubbleController","Pie","PieController","Scatter","ScatterController"],"sources":["C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\react-chartjs-2\\src\\utils.ts","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\react-chartjs-2\\src\\chart.tsx","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\react-chartjs-2\\src\\typedCharts.tsx"],"sourcesContent":["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, TypedChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...props\n  }: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  type TypedChartJS = ChartJS<TType, TData, TLabel>;\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<TypedChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas ref={canvasRef} role='img' height={height} width={width} {...props}>\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart: TypedChartComponent = forwardRef(\n  ChartComponent\n) as TypedChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T, true>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}