{"ast":null,"code":"import _objectSpread from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _assertThisInitialized from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Prajwal/Desktop/crypto-dashboard-dec/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*!\n * Chart.js v4.1.0\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as _color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as _getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nexport { aL as Ticks, d as defaults } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\nvar Animator = /*#__PURE__*/function () {\n  function Animator() {\n    _classCallCheck(this, Animator);\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _createClass(Animator, [{\n    key: \"_notify\",\n    value: function _notify(chart, anims, date, type) {\n      var callbacks = anims.listeners[type];\n      var numSteps = anims.duration;\n      callbacks.forEach(function (fn) {\n        return fn({\n          chart: chart,\n          initial: anims.initial,\n          numSteps: numSteps,\n          currentStep: Math.min(date - anims.start, numSteps)\n        });\n      });\n    }\n  }, {\n    key: \"_refresh\",\n    value: function _refresh() {\n      var _this = this;\n      if (this._request) {\n        return;\n      }\n      this._running = true;\n      this._request = requestAnimFrame.call(window, function () {\n        _this._update();\n        _this._request = null;\n        if (_this._running) {\n          _this._refresh();\n        }\n      });\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      var _this2 = this;\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n      var remaining = 0;\n      this._charts.forEach(function (anims, chart) {\n        if (!anims.running || !anims.items.length) {\n          return;\n        }\n        var items = anims.items;\n        var i = items.length - 1;\n        var draw = false;\n        var item;\n        for (; i >= 0; --i) {\n          item = items[i];\n          if (item._active) {\n            if (item._total > anims.duration) {\n              anims.duration = item._total;\n            }\n            item.tick(date);\n            draw = true;\n          } else {\n            items[i] = items[items.length - 1];\n            items.pop();\n          }\n        }\n        if (draw) {\n          chart.draw();\n          _this2._notify(chart, anims, date, 'progress');\n        }\n        if (!items.length) {\n          anims.running = false;\n          _this2._notify(chart, anims, date, 'complete');\n          anims.initial = false;\n        }\n        remaining += items.length;\n      });\n      this._lastDate = date;\n      if (remaining === 0) {\n        this._running = false;\n      }\n    }\n  }, {\n    key: \"_getAnims\",\n    value: function _getAnims(chart) {\n      var charts = this._charts;\n      var anims = charts.get(chart);\n      if (!anims) {\n        anims = {\n          running: false,\n          initial: true,\n          items: [],\n          listeners: {\n            complete: [],\n            progress: []\n          }\n        };\n        charts.set(chart, anims);\n      }\n      return anims;\n    }\n  }, {\n    key: \"listen\",\n    value: function listen(chart, event, cb) {\n      this._getAnims(chart).listeners[event].push(cb);\n    }\n  }, {\n    key: \"add\",\n    value: function add(chart, items) {\n      var _this$_getAnims$items;\n      if (!items || !items.length) {\n        return;\n      }\n      (_this$_getAnims$items = this._getAnims(chart).items).push.apply(_this$_getAnims$items, _toConsumableArray(items));\n    }\n  }, {\n    key: \"has\",\n    value: function has(chart) {\n      return this._getAnims(chart).items.length > 0;\n    }\n  }, {\n    key: \"start\",\n    value: function start(chart) {\n      var anims = this._charts.get(chart);\n      if (!anims) {\n        return;\n      }\n      anims.running = true;\n      anims.start = Date.now();\n      anims.duration = anims.items.reduce(function (acc, cur) {\n        return Math.max(acc, cur._duration);\n      }, 0);\n      this._refresh();\n    }\n  }, {\n    key: \"running\",\n    value: function running(chart) {\n      if (!this._running) {\n        return false;\n      }\n      var anims = this._charts.get(chart);\n      if (!anims || !anims.running || !anims.items.length) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(chart) {\n      var anims = this._charts.get(chart);\n      if (!anims || !anims.items.length) {\n        return;\n      }\n      var items = anims.items;\n      var i = items.length - 1;\n      for (; i >= 0; --i) {\n        items[i].cancel();\n      }\n      anims.items = [];\n      this._notify(chart, anims, Date.now(), 'complete');\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(chart) {\n      return this._charts.delete(chart);\n    }\n  }]);\n  return Animator;\n}();\nvar animator = /* #__PURE__ */new Animator();\nvar transparent = 'transparent';\nvar interpolators = {\n  boolean: function boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color: function color(from, to, factor) {\n    var c0 = _color(from || transparent);\n    var c1 = c0.valid && _color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number: function number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nvar Animation = /*#__PURE__*/function () {\n  function Animation(cfg, target, prop, to) {\n    _classCallCheck(this, Animation);\n    var currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    var from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  _createClass(Animation, [{\n    key: \"active\",\n    value: function active() {\n      return this._active;\n    }\n  }, {\n    key: \"update\",\n    value: function update(cfg, to, date) {\n      if (this._active) {\n        this._notify(false);\n        var currentValue = this._target[this._prop];\n        var elapsed = date - this._start;\n        var remain = this._duration - elapsed;\n        this._start = date;\n        this._duration = Math.floor(Math.max(remain, cfg.duration));\n        this._total += elapsed;\n        this._loop = !!cfg.loop;\n        this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n        this._from = resolve([cfg.from, currentValue, to]);\n      }\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this._active) {\n        this.tick(Date.now());\n        this._active = false;\n        this._notify(false);\n      }\n    }\n  }, {\n    key: \"tick\",\n    value: function tick(date) {\n      var elapsed = date - this._start;\n      var duration = this._duration;\n      var prop = this._prop;\n      var from = this._from;\n      var loop = this._loop;\n      var to = this._to;\n      var factor;\n      this._active = from !== to && (loop || elapsed < duration);\n      if (!this._active) {\n        this._target[prop] = to;\n        this._notify(true);\n        return;\n      }\n      if (elapsed < 0) {\n        this._target[prop] = from;\n        return;\n      }\n      factor = elapsed / duration % 2;\n      factor = loop && factor > 1 ? 2 - factor : factor;\n      factor = this._easing(Math.min(1, Math.max(0, factor)));\n      this._target[prop] = this._fn(from, to, factor);\n    }\n  }, {\n    key: \"wait\",\n    value: function wait() {\n      var promises = this._promises || (this._promises = []);\n      return new Promise(function (res, rej) {\n        promises.push({\n          res: res,\n          rej: rej\n        });\n      });\n    }\n  }, {\n    key: \"_notify\",\n    value: function _notify(resolved) {\n      var method = resolved ? 'res' : 'rej';\n      var promises = this._promises || [];\n      for (var i = 0; i < promises.length; i++) {\n        promises[i][method]();\n      }\n    }\n  }]);\n  return Animation;\n}();\nvar Animations = /*#__PURE__*/function () {\n  function Animations(chart, config) {\n    _classCallCheck(this, Animations);\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  _createClass(Animations, [{\n    key: \"configure\",\n    value: function configure(config) {\n      if (!isObject(config)) {\n        return;\n      }\n      var animationOptions = Object.keys(defaults.animation);\n      var animatedProps = this._properties;\n      Object.getOwnPropertyNames(config).forEach(function (key) {\n        var cfg = config[key];\n        if (!isObject(cfg)) {\n          return;\n        }\n        var resolved = {};\n        for (var _i = 0, _animationOptions = animationOptions; _i < _animationOptions.length; _i++) {\n          var option = _animationOptions[_i];\n          resolved[option] = cfg[option];\n        }\n        (isArray(cfg.properties) && cfg.properties || [key]).forEach(function (prop) {\n          if (prop === key || !animatedProps.has(prop)) {\n            animatedProps.set(prop, resolved);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_animateOptions\",\n    value: function _animateOptions(target, values) {\n      var newOptions = values.options;\n      var options = resolveTargetOptions(target, newOptions);\n      if (!options) {\n        return [];\n      }\n      var animations = this._createAnimations(options, newOptions);\n      if (newOptions.$shared) {\n        awaitAll(target.options.$animations, newOptions).then(function () {\n          target.options = newOptions;\n        }, function () {});\n      }\n      return animations;\n    }\n  }, {\n    key: \"_createAnimations\",\n    value: function _createAnimations(target, values) {\n      var animatedProps = this._properties;\n      var animations = [];\n      var running = target.$animations || (target.$animations = {});\n      var props = Object.keys(values);\n      var date = Date.now();\n      var i;\n      for (i = props.length - 1; i >= 0; --i) {\n        var prop = props[i];\n        if (prop.charAt(0) === '$') {\n          continue;\n        }\n        if (prop === 'options') {\n          animations.push.apply(animations, _toConsumableArray(this._animateOptions(target, values)));\n          continue;\n        }\n        var value = values[prop];\n        var animation = running[prop];\n        var cfg = animatedProps.get(prop);\n        if (animation) {\n          if (cfg && animation.active()) {\n            animation.update(cfg, value, date);\n            continue;\n          } else {\n            animation.cancel();\n          }\n        }\n        if (!cfg || !cfg.duration) {\n          target[prop] = value;\n          continue;\n        }\n        running[prop] = animation = new Animation(cfg, target, prop, value);\n        animations.push(animation);\n      }\n      return animations;\n    }\n  }, {\n    key: \"update\",\n    value: function update(target, values) {\n      if (this._properties.size === 0) {\n        Object.assign(target, values);\n        return;\n      }\n      var animations = this._createAnimations(target, values);\n      if (animations.length) {\n        animator.add(this._chart, animations);\n        return true;\n      }\n    }\n  }]);\n  return Animations;\n}();\nfunction awaitAll(animations, properties) {\n  var running = [];\n  var keys = Object.keys(properties);\n  for (var i = 0; i < keys.length; i++) {\n    var anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  var options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  var opts = scale && scale.options || {};\n  var reverse = opts.reverse;\n  var min = opts.min === undefined ? allowedOverflow : 0;\n  var max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  var x = scaleClip(xScale, allowedOverflow);\n  var y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  var t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  var keys = [];\n  var metasets = chart._getSortedDatasetMetas(filterVisible);\n  var i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction _applyStack(stack, value, dsIndex) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var keys = stack.keys;\n  var singleMode = options.mode === 'single';\n  var i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  var keys = Object.keys(data);\n  var adata = new Array(keys.length);\n  var i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  var stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return \"\".concat(indexScale.id, \".\").concat(valueScale.id, \".\").concat(meta.stack || meta.type);\n}\nfunction getUserBounds(scale) {\n  var _scale$getUserBounds = scale.getUserBounds(),\n    min = _scale$getUserBounds.min,\n    max = _scale$getUserBounds.max,\n    minDefined = _scale$getUserBounds.minDefined,\n    maxDefined = _scale$getUserBounds.maxDefined;\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  var subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  var _iterator = _createForOfIteratorHelper(vScale.getMatchingVisibleMetas(type).reverse()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var meta = _step.value;\n      var value = stack[meta.index];\n      if (positive && value > 0 || !positive && value < 0) {\n        return meta.index;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  var chart = controller.chart,\n    meta = controller._cachedMeta;\n  var stacks = chart._stacks || (chart._stacks = {});\n  var iScale = meta.iScale,\n    vScale = meta.vScale,\n    datasetIndex = meta.index;\n  var iAxis = iScale.axis;\n  var vAxis = vScale.axis;\n  var key = getStackKey(iScale, vScale, meta);\n  var ilen = parsed.length;\n  var stack;\n  for (var i = 0; i < ilen; ++i) {\n    var item = parsed[i];\n    var _index = item[iAxis],\n      value = item[vAxis];\n    var itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, _index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    var visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  var scales = chart.scales;\n  return Object.keys(scales).filter(function (key) {\n    return scales[key].axis === axis;\n  }).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index: index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element: element,\n    index: index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  var datasetIndex = meta.controller.index;\n  var axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  var _iterator2 = _createForOfIteratorHelper(items),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var parsed = _step2.value;\n      var stacks = parsed._stacks;\n      if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n        return;\n      }\n      delete stacks[axis][datasetIndex];\n      if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n        delete stacks[axis]._visualValues[datasetIndex];\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\nvar isDirectUpdateMode = function isDirectUpdateMode(mode) {\n  return mode === 'reset' || mode === 'none';\n};\nvar cloneIfNotShared = function cloneIfNotShared(cached, shared) {\n  return shared ? cached : Object.assign({}, cached);\n};\nvar createStack = function createStack(canStack, meta, chart) {\n  return canStack && !meta.hidden && meta._stacked && {\n    keys: getSortedDatasetIndices(chart, true),\n    values: null\n  };\n};\nvar DatasetController = /*#__PURE__*/function () {\n  function DatasetController(chart, datasetIndex) {\n    _classCallCheck(this, DatasetController);\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = (this instanceof DatasetController ? this.constructor : void 0).datasetElementType;\n    this.dataElementType = (this instanceof DatasetController ? this.constructor : void 0).dataElementType;\n    this.initialize();\n  }\n  _createClass(DatasetController, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var meta = this._cachedMeta;\n      this.configure();\n      this.linkScales();\n      meta._stacked = isStacked(meta.vScale, meta);\n      this.addElements();\n      if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n        console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n      }\n    }\n  }, {\n    key: \"updateIndex\",\n    value: function updateIndex(datasetIndex) {\n      if (this.index !== datasetIndex) {\n        clearStacks(this._cachedMeta);\n      }\n      this.index = datasetIndex;\n    }\n  }, {\n    key: \"linkScales\",\n    value: function linkScales() {\n      var chart = this.chart;\n      var meta = this._cachedMeta;\n      var dataset = this.getDataset();\n      var chooseId = function chooseId(axis, x, y, r) {\n        return axis === 'x' ? x : axis === 'r' ? r : y;\n      };\n      var xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n      var yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n      var rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n      var indexAxis = meta.indexAxis;\n      var iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n      var vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n      meta.xScale = this.getScaleForId(xid);\n      meta.yScale = this.getScaleForId(yid);\n      meta.rScale = this.getScaleForId(rid);\n      meta.iScale = this.getScaleForId(iid);\n      meta.vScale = this.getScaleForId(vid);\n    }\n  }, {\n    key: \"getDataset\",\n    value: function getDataset() {\n      return this.chart.data.datasets[this.index];\n    }\n  }, {\n    key: \"getMeta\",\n    value: function getMeta() {\n      return this.chart.getDatasetMeta(this.index);\n    }\n  }, {\n    key: \"getScaleForId\",\n    value: function getScaleForId(scaleID) {\n      return this.chart.scales[scaleID];\n    }\n  }, {\n    key: \"_getOtherScale\",\n    value: function _getOtherScale(scale) {\n      var meta = this._cachedMeta;\n      return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._update('reset');\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      var meta = this._cachedMeta;\n      if (this._data) {\n        unlistenArrayEvents(this._data, this);\n      }\n      if (meta._stacked) {\n        clearStacks(meta);\n      }\n    }\n  }, {\n    key: \"_dataCheck\",\n    value: function _dataCheck() {\n      var dataset = this.getDataset();\n      var data = dataset.data || (dataset.data = []);\n      var _data = this._data;\n      if (isObject(data)) {\n        this._data = convertObjectDataToArray(data);\n      } else if (_data !== data) {\n        if (_data) {\n          unlistenArrayEvents(_data, this);\n          var meta = this._cachedMeta;\n          clearStacks(meta);\n          meta._parsed = [];\n        }\n        if (data && Object.isExtensible(data)) {\n          listenArrayEvents(data, this);\n        }\n        this._syncList = [];\n        this._data = data;\n      }\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      var meta = this._cachedMeta;\n      this._dataCheck();\n      if (this.datasetElementType) {\n        meta.dataset = new this.datasetElementType();\n      }\n    }\n  }, {\n    key: \"buildOrUpdateElements\",\n    value: function buildOrUpdateElements(resetNewElements) {\n      var meta = this._cachedMeta;\n      var dataset = this.getDataset();\n      var stackChanged = false;\n      this._dataCheck();\n      var oldStacked = meta._stacked;\n      meta._stacked = isStacked(meta.vScale, meta);\n      if (meta.stack !== dataset.stack) {\n        stackChanged = true;\n        clearStacks(meta);\n        meta.stack = dataset.stack;\n      }\n      this._resyncElements(resetNewElements);\n      if (stackChanged || oldStacked !== meta._stacked) {\n        updateStacks(this, meta._parsed);\n      }\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var config = this.chart.config;\n      var scopeKeys = config.datasetScopeKeys(this._type);\n      var scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n      this.options = config.createResolver(scopes, this.getContext());\n      this._parsing = this.options.parsing;\n      this._cachedDataOpts = {};\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(start, count) {\n      var meta = this._cachedMeta,\n        data = this._data;\n      var iScale = meta.iScale,\n        _stacked = meta._stacked;\n      var iAxis = iScale.axis;\n      var sorted = start === 0 && count === data.length ? true : meta._sorted;\n      var prev = start > 0 && meta._parsed[start - 1];\n      var i, cur, parsed;\n      if (this._parsing === false) {\n        meta._parsed = data;\n        meta._sorted = true;\n        parsed = data;\n      } else {\n        if (isArray(data[start])) {\n          parsed = this.parseArrayData(meta, data, start, count);\n        } else if (isObject(data[start])) {\n          parsed = this.parseObjectData(meta, data, start, count);\n        } else {\n          parsed = this.parsePrimitiveData(meta, data, start, count);\n        }\n        var isNotInOrderComparedToPrev = function isNotInOrderComparedToPrev() {\n          return cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n        };\n        for (i = 0; i < count; ++i) {\n          meta._parsed[i + start] = cur = parsed[i];\n          if (sorted) {\n            if (isNotInOrderComparedToPrev()) {\n              sorted = false;\n            }\n            prev = cur;\n          }\n        }\n        meta._sorted = sorted;\n      }\n      if (_stacked) {\n        updateStacks(this, parsed);\n      }\n    }\n  }, {\n    key: \"parsePrimitiveData\",\n    value: function parsePrimitiveData(meta, data, start, count) {\n      var iScale = meta.iScale,\n        vScale = meta.vScale;\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      var labels = iScale.getLabels();\n      var singleScale = iScale === vScale;\n      var parsed = new Array(count);\n      var i, ilen, index;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        var _parsed$i;\n        index = i + start;\n        parsed[i] = (_parsed$i = {}, _defineProperty(_parsed$i, iAxis, singleScale || iScale.parse(labels[index], index)), _defineProperty(_parsed$i, vAxis, vScale.parse(data[index], index)), _parsed$i);\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseArrayData\",\n    value: function parseArrayData(meta, data, start, count) {\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var parsed = new Array(count);\n      var i, ilen, index, item;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n          x: xScale.parse(item[0], index),\n          y: yScale.parse(item[1], index)\n        };\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var _this$_parsing = this._parsing,\n        _this$_parsing$xAxisK = _this$_parsing.xAxisKey,\n        xAxisKey = _this$_parsing$xAxisK === void 0 ? 'x' : _this$_parsing$xAxisK,\n        _this$_parsing$yAxisK = _this$_parsing.yAxisKey,\n        yAxisKey = _this$_parsing$yAxisK === void 0 ? 'y' : _this$_parsing$yAxisK;\n      var parsed = new Array(count);\n      var i, ilen, index, item;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n          x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n          y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n        };\n      }\n      return parsed;\n    }\n  }, {\n    key: \"getParsed\",\n    value: function getParsed(index) {\n      return this._cachedMeta._parsed[index];\n    }\n  }, {\n    key: \"getDataElement\",\n    value: function getDataElement(index) {\n      return this._cachedMeta.data[index];\n    }\n  }, {\n    key: \"applyStack\",\n    value: function applyStack(scale, parsed, mode) {\n      var chart = this.chart;\n      var meta = this._cachedMeta;\n      var value = parsed[scale.axis];\n      var stack = {\n        keys: getSortedDatasetIndices(chart, true),\n        values: parsed._stacks[scale.axis]._visualValues\n      };\n      return _applyStack(stack, value, meta.index, {\n        mode: mode\n      });\n    }\n  }, {\n    key: \"updateRangeFromParsed\",\n    value: function updateRangeFromParsed(range, scale, parsed, stack) {\n      var parsedValue = parsed[scale.axis];\n      var value = parsedValue === null ? NaN : parsedValue;\n      var values = stack && parsed._stacks[scale.axis];\n      if (stack && values) {\n        stack.values = values;\n        value = _applyStack(stack, parsedValue, this._cachedMeta.index);\n      }\n      range.min = Math.min(range.min, value);\n      range.max = Math.max(range.max, value);\n    }\n  }, {\n    key: \"getMinMax\",\n    value: function getMinMax(scale, canStack) {\n      var meta = this._cachedMeta;\n      var _parsed = meta._parsed;\n      var sorted = meta._sorted && scale === meta.iScale;\n      var ilen = _parsed.length;\n      var otherScale = this._getOtherScale(scale);\n      var stack = createStack(canStack, meta, this.chart);\n      var range = {\n        min: Number.POSITIVE_INFINITY,\n        max: Number.NEGATIVE_INFINITY\n      };\n      var _getUserBounds = getUserBounds(otherScale),\n        otherMin = _getUserBounds.min,\n        otherMax = _getUserBounds.max;\n      var i, parsed;\n      function _skip() {\n        parsed = _parsed[i];\n        var otherValue = parsed[otherScale.axis];\n        return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n      }\n      for (i = 0; i < ilen; ++i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        if (sorted) {\n          break;\n        }\n      }\n      if (sorted) {\n        for (i = ilen - 1; i >= 0; --i) {\n          if (_skip()) {\n            continue;\n          }\n          this.updateRangeFromParsed(range, scale, parsed, stack);\n          break;\n        }\n      }\n      return range;\n    }\n  }, {\n    key: \"getAllParsedValues\",\n    value: function getAllParsedValues(scale) {\n      var parsed = this._cachedMeta._parsed;\n      var values = [];\n      var i, ilen, value;\n      for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n        value = parsed[i][scale.axis];\n        if (isNumberFinite(value)) {\n          values.push(value);\n        }\n      }\n      return values;\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      return false;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var iScale = meta.iScale;\n      var vScale = meta.vScale;\n      var parsed = this.getParsed(index);\n      return {\n        label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n        value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n      };\n    }\n  }, {\n    key: \"_update\",\n    value: function _update(mode) {\n      var meta = this._cachedMeta;\n      this.update(mode || 'default');\n      meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {}\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var ctx = this._ctx;\n      var chart = this.chart;\n      var meta = this._cachedMeta;\n      var elements = meta.data || [];\n      var area = chart.chartArea;\n      var active = [];\n      var start = this._drawStart || 0;\n      var count = this._drawCount || elements.length - start;\n      var drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n      var i;\n      if (meta.dataset) {\n        meta.dataset.draw(ctx, area, start, count);\n      }\n      for (i = start; i < start + count; ++i) {\n        var element = elements[i];\n        if (element.hidden) {\n          continue;\n        }\n        if (element.active && drawActiveElementsOnTop) {\n          active.push(element);\n        } else {\n          element.draw(ctx, area);\n        }\n      }\n      for (i = 0; i < active.length; ++i) {\n        active[i].draw(ctx, area);\n      }\n    }\n  }, {\n    key: \"getStyle\",\n    value: function getStyle(index, active) {\n      var mode = active ? 'active' : 'default';\n      return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext(index, active, mode) {\n      var dataset = this.getDataset();\n      var context;\n      if (index >= 0 && index < this._cachedMeta.data.length) {\n        var element = this._cachedMeta.data[index];\n        context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n        context.parsed = this.getParsed(index);\n        context.raw = dataset.data[index];\n        context.index = context.dataIndex = index;\n      } else {\n        context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n        context.dataset = dataset;\n        context.index = context.datasetIndex = this.index;\n      }\n      context.active = !!active;\n      context.mode = mode;\n      return context;\n    }\n  }, {\n    key: \"resolveDatasetElementOptions\",\n    value: function resolveDatasetElementOptions(mode) {\n      return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n  }, {\n    key: \"resolveDataElementOptions\",\n    value: function resolveDataElementOptions(index, mode) {\n      return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n  }, {\n    key: \"_resolveElementOptions\",\n    value: function _resolveElementOptions(elementType) {\n      var _this3 = this;\n      var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n      var index = arguments.length > 2 ? arguments[2] : undefined;\n      var active = mode === 'active';\n      var cache = this._cachedDataOpts;\n      var cacheKey = elementType + '-' + mode;\n      var cached = cache[cacheKey];\n      var sharing = this.enableOptionSharing && defined(index);\n      if (cached) {\n        return cloneIfNotShared(cached, sharing);\n      }\n      var config = this.chart.config;\n      var scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n      var prefixes = active ? [\"\".concat(elementType, \"Hover\"), 'hover', elementType, ''] : [elementType, ''];\n      var scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      var names = Object.keys(defaults.elements[elementType]);\n      var context = function context() {\n        return _this3.getContext(index, active, mode);\n      };\n      var values = config.resolveNamedOptions(scopes, names, context, prefixes);\n      if (values.$shared) {\n        values.$shared = sharing;\n        cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n      }\n      return values;\n    }\n  }, {\n    key: \"_resolveAnimations\",\n    value: function _resolveAnimations(index, transition, active) {\n      var chart = this.chart;\n      var cache = this._cachedDataOpts;\n      var cacheKey = \"animation-\".concat(transition);\n      var cached = cache[cacheKey];\n      if (cached) {\n        return cached;\n      }\n      var options;\n      if (chart.options.animation !== false) {\n        var config = this.chart.config;\n        var scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n        var scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        options = config.createResolver(scopes, this.getContext(index, active, transition));\n      }\n      var animations = new Animations(chart, options && options.animations);\n      if (options && options._cacheable) {\n        cache[cacheKey] = Object.freeze(animations);\n      }\n      return animations;\n    }\n  }, {\n    key: \"getSharedOptions\",\n    value: function getSharedOptions(options) {\n      if (!options.$shared) {\n        return;\n      }\n      return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n  }, {\n    key: \"includeOptions\",\n    value: function includeOptions(mode, sharedOptions) {\n      return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n  }, {\n    key: \"_getSharedOptions\",\n    value: function _getSharedOptions(start, mode) {\n      var firstOpts = this.resolveDataElementOptions(start, mode);\n      var previouslySharedOptions = this._sharedOptions;\n      var sharedOptions = this.getSharedOptions(firstOpts);\n      var includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n      this.updateSharedOptions(sharedOptions, mode, firstOpts);\n      return {\n        sharedOptions: sharedOptions,\n        includeOptions: includeOptions\n      };\n    }\n  }, {\n    key: \"updateElement\",\n    value: function updateElement(element, index, properties, mode) {\n      if (isDirectUpdateMode(mode)) {\n        Object.assign(element, properties);\n      } else {\n        this._resolveAnimations(index, mode).update(element, properties);\n      }\n    }\n  }, {\n    key: \"updateSharedOptions\",\n    value: function updateSharedOptions(sharedOptions, mode, newOptions) {\n      if (sharedOptions && !isDirectUpdateMode(mode)) {\n        this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n      }\n    }\n  }, {\n    key: \"_setStyle\",\n    value: function _setStyle(element, index, mode, active) {\n      element.active = active;\n      var options = this.getStyle(index, active);\n      this._resolveAnimations(index, mode, active).update(element, {\n        options: !active && this.getSharedOptions(options) || options\n      });\n    }\n  }, {\n    key: \"removeHoverStyle\",\n    value: function removeHoverStyle(element, datasetIndex, index) {\n      this._setStyle(element, index, 'active', false);\n    }\n  }, {\n    key: \"setHoverStyle\",\n    value: function setHoverStyle(element, datasetIndex, index) {\n      this._setStyle(element, index, 'active', true);\n    }\n  }, {\n    key: \"_removeDatasetHoverStyle\",\n    value: function _removeDatasetHoverStyle() {\n      var element = this._cachedMeta.dataset;\n      if (element) {\n        this._setStyle(element, undefined, 'active', false);\n      }\n    }\n  }, {\n    key: \"_setDatasetHoverStyle\",\n    value: function _setDatasetHoverStyle() {\n      var element = this._cachedMeta.dataset;\n      if (element) {\n        this._setStyle(element, undefined, 'active', true);\n      }\n    }\n  }, {\n    key: \"_resyncElements\",\n    value: function _resyncElements(resetNewElements) {\n      var data = this._data;\n      var elements = this._cachedMeta.data;\n      var _iterator3 = _createForOfIteratorHelper(this._syncList),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 3),\n            method = _step3$value[0],\n            arg1 = _step3$value[1],\n            arg2 = _step3$value[2];\n          this[method](arg1, arg2);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      this._syncList = [];\n      var numMeta = elements.length;\n      var numData = data.length;\n      var count = Math.min(numData, numMeta);\n      if (count) {\n        this.parse(0, count);\n      }\n      if (numData > numMeta) {\n        this._insertElements(numMeta, numData - numMeta, resetNewElements);\n      } else if (numData < numMeta) {\n        this._removeElements(numData, numMeta - numData);\n      }\n    }\n  }, {\n    key: \"_insertElements\",\n    value: function _insertElements(start, count) {\n      var resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var meta = this._cachedMeta;\n      var data = meta.data;\n      var end = start + count;\n      var i;\n      var move = function move(arr) {\n        arr.length += count;\n        for (i = arr.length - 1; i >= end; i--) {\n          arr[i] = arr[i - count];\n        }\n      };\n      move(data);\n      for (i = start; i < end; ++i) {\n        data[i] = new this.dataElementType();\n      }\n      if (this._parsing) {\n        move(meta._parsed);\n      }\n      this.parse(start, count);\n      if (resetNewElements) {\n        this.updateElements(data, start, count, 'reset');\n      }\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(element, start, count, mode) {}\n  }, {\n    key: \"_removeElements\",\n    value: function _removeElements(start, count) {\n      var meta = this._cachedMeta;\n      if (this._parsing) {\n        var removed = meta._parsed.splice(start, count);\n        if (meta._stacked) {\n          clearStacks(meta, removed);\n        }\n      }\n      meta.data.splice(start, count);\n    }\n  }, {\n    key: \"_sync\",\n    value: function _sync(args) {\n      if (this._parsing) {\n        this._syncList.push(args);\n      } else {\n        var _args2 = _slicedToArray(args, 3),\n          method = _args2[0],\n          arg1 = _args2[1],\n          arg2 = _args2[2];\n        this[method](arg1, arg2);\n      }\n      this.chart._dataChanges.push([this.index].concat(_toConsumableArray(args)));\n    }\n  }, {\n    key: \"_onDataPush\",\n    value: function _onDataPush() {\n      var count = arguments.length;\n      this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n    }\n  }, {\n    key: \"_onDataPop\",\n    value: function _onDataPop() {\n      this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n    }\n  }, {\n    key: \"_onDataShift\",\n    value: function _onDataShift() {\n      this._sync(['_removeElements', 0, 1]);\n    }\n  }, {\n    key: \"_onDataSplice\",\n    value: function _onDataSplice(start, count) {\n      if (count) {\n        this._sync(['_removeElements', start, count]);\n      }\n      var newCount = arguments.length - 2;\n      if (newCount) {\n        this._sync(['_insertElements', start, newCount]);\n      }\n    }\n  }, {\n    key: \"_onDataUnshift\",\n    value: function _onDataUnshift() {\n      this._sync(['_insertElements', 0, arguments.length]);\n    }\n  }]);\n  return DatasetController;\n}();\n_defineProperty(DatasetController, \"defaults\", {});\n_defineProperty(DatasetController, \"datasetElementType\", null);\n_defineProperty(DatasetController, \"dataElementType\", null);\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    var visibleMetas = scale.getMatchingVisibleMetas(type);\n    var values = [];\n    for (var i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort(function (a, b) {\n      return a - b;\n    }));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  var scale = meta.iScale;\n  var values = getAllScaleValues(scale, meta.type);\n  var min = scale._length;\n  var i, ilen, curr, prev;\n  var updateMinAndPrev = function updateMinAndPrev() {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  var thickness = options.barThickness;\n  var size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio: ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  var pixels = ruler.pixels;\n  var curr = pixels[index];\n  var prev = index > 0 ? pixels[index - 1] : null;\n  var next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  var percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  var start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  var size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start: start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  var startValue = vScale.parse(entry[0], i);\n  var endValue = vScale.parse(entry[1], i);\n  var min = Math.min(startValue, endValue);\n  var max = Math.max(startValue, endValue);\n  var barStart = min;\n  var barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart: barStart,\n    barEnd: barEnd,\n    start: startValue,\n    end: endValue,\n    min: min,\n    max: max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  var iScale = meta.iScale;\n  var vScale = meta.vScale;\n  var labels = iScale.getLabels();\n  var singleScale = iScale === vScale;\n  var parsed = [];\n  var i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  var reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start: start,\n    end: end,\n    reverse: reverse,\n    top: top,\n    bottom: bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  var edge = options.borderSkipped;\n  var res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  var _borderProps = borderProps(properties),\n    start = _borderProps.start,\n    end = _borderProps.end,\n    reverse = _borderProps.reverse,\n    top = _borderProps.top,\n    bottom = _borderProps.bottom;\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, _ref, ratio) {\n  var inflateAmount = _ref.inflateAmount;\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nvar BarController = /*#__PURE__*/function (_DatasetController) {\n  _inherits(BarController, _DatasetController);\n  var _super = _createSuper(BarController);\n  function BarController() {\n    _classCallCheck(this, BarController);\n    return _super.apply(this, arguments);\n  }\n  _createClass(BarController, [{\n    key: \"parsePrimitiveData\",\n    value: function parsePrimitiveData(meta, data, start, count) {\n      return parseArrayOrPrimitive(meta, data, start, count);\n    }\n  }, {\n    key: \"parseArrayData\",\n    value: function parseArrayData(meta, data, start, count) {\n      return parseArrayOrPrimitive(meta, data, start, count);\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      var iScale = meta.iScale,\n        vScale = meta.vScale;\n      var _this$_parsing2 = this._parsing,\n        _this$_parsing2$xAxis = _this$_parsing2.xAxisKey,\n        xAxisKey = _this$_parsing2$xAxis === void 0 ? 'x' : _this$_parsing2$xAxis,\n        _this$_parsing2$yAxis = _this$_parsing2.yAxisKey,\n        yAxisKey = _this$_parsing2$yAxis === void 0 ? 'y' : _this$_parsing2$yAxis;\n      var iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n      var vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n      var parsed = [];\n      var i, ilen, item, obj;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        obj = data[i];\n        item = {};\n        item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n        parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n      }\n      return parsed;\n    }\n  }, {\n    key: \"updateRangeFromParsed\",\n    value: function updateRangeFromParsed(range, scale, parsed, stack) {\n      _get(_getPrototypeOf(BarController.prototype), \"updateRangeFromParsed\", this).call(this, range, scale, parsed, stack);\n      var custom = parsed._custom;\n      if (custom && scale === this._cachedMeta.vScale) {\n        range.min = Math.min(range.min, custom.min);\n        range.max = Math.max(range.max, custom.max);\n      }\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      return 0;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var iScale = meta.iScale,\n        vScale = meta.vScale;\n      var parsed = this.getParsed(index);\n      var custom = parsed._custom;\n      var value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n      return {\n        label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n        value: value\n      };\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      this.enableOptionSharing = true;\n      _get(_getPrototypeOf(BarController.prototype), \"initialize\", this).call(this);\n      var meta = this._cachedMeta;\n      meta.stack = this.getDataset().stack;\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(bars, start, count, mode) {\n      var reset = mode === 'reset';\n      var index = this.index,\n        vScale = this._cachedMeta.vScale;\n      var base = vScale.getBasePixel();\n      var horizontal = vScale.isHorizontal();\n      var ruler = this._getRuler();\n      var _this$_getSharedOptio = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio.sharedOptions,\n        includeOptions = _this$_getSharedOptio.includeOptions;\n      for (var i = start; i < start + count; i++) {\n        var parsed = this.getParsed(i);\n        var vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n          base: base,\n          head: base\n        } : this._calculateBarValuePixels(i);\n        var ipixels = this._calculateBarIndexPixels(i, ruler);\n        var stack = (parsed._stacks || {})[vScale.axis];\n        var properties = {\n          horizontal: horizontal,\n          base: vpixels.base,\n          enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n          x: horizontal ? vpixels.head : ipixels.center,\n          y: horizontal ? ipixels.center : vpixels.head,\n          height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n          width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n        };\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n        }\n        var options = properties.options || bars[i].options;\n        setBorderSkipped(properties, options, stack, index);\n        setInflateAmount(properties, options, ruler.ratio);\n        this.updateElement(bars[i], i, properties, mode);\n      }\n    }\n  }, {\n    key: \"_getStacks\",\n    value: function _getStacks(last, dataIndex) {\n      var iScale = this._cachedMeta.iScale;\n      var metasets = iScale.getMatchingVisibleMetas(this._type).filter(function (meta) {\n        return meta.controller.options.grouped;\n      });\n      var stacked = iScale.options.stacked;\n      var stacks = [];\n      var skipNull = function skipNull(meta) {\n        var parsed = meta.controller.getParsed(dataIndex);\n        var val = parsed && parsed[meta.vScale.axis];\n        if (isNullOrUndef(val) || isNaN(val)) {\n          return true;\n        }\n      };\n      var _iterator4 = _createForOfIteratorHelper(metasets),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var meta = _step4.value;\n          if (dataIndex !== undefined && skipNull(meta)) {\n            continue;\n          }\n          if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n            stacks.push(meta.stack);\n          }\n          if (meta.index === last) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      if (!stacks.length) {\n        stacks.push(undefined);\n      }\n      return stacks;\n    }\n  }, {\n    key: \"_getStackCount\",\n    value: function _getStackCount(index) {\n      return this._getStacks(undefined, index).length;\n    }\n  }, {\n    key: \"_getStackIndex\",\n    value: function _getStackIndex(datasetIndex, name, dataIndex) {\n      var stacks = this._getStacks(datasetIndex, dataIndex);\n      var index = name !== undefined ? stacks.indexOf(name) : -1;\n      return index === -1 ? stacks.length - 1 : index;\n    }\n  }, {\n    key: \"_getRuler\",\n    value: function _getRuler() {\n      var opts = this.options;\n      var meta = this._cachedMeta;\n      var iScale = meta.iScale;\n      var pixels = [];\n      var i, ilen;\n      for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n        pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n      }\n      var barThickness = opts.barThickness;\n      var min = barThickness || computeMinSampleSize(meta);\n      return {\n        min: min,\n        pixels: pixels,\n        start: iScale._startPixel,\n        end: iScale._endPixel,\n        stackCount: this._getStackCount(),\n        scale: iScale,\n        grouped: opts.grouped,\n        ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n      };\n    }\n  }, {\n    key: \"_calculateBarValuePixels\",\n    value: function _calculateBarValuePixels(index) {\n      var _this$_cachedMeta = this._cachedMeta,\n        vScale = _this$_cachedMeta.vScale,\n        _stacked = _this$_cachedMeta._stacked,\n        datasetIndex = _this$_cachedMeta.index,\n        _this$options = this.options,\n        baseValue = _this$options.base,\n        minBarLength = _this$options.minBarLength;\n      var actualBase = baseValue || 0;\n      var parsed = this.getParsed(index);\n      var custom = parsed._custom;\n      var floating = isFloatBar(custom);\n      var value = parsed[vScale.axis];\n      var start = 0;\n      var length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n      var head, size;\n      if (length !== value) {\n        start = length - value;\n        length = value;\n      }\n      if (floating) {\n        value = custom.barStart;\n        length = custom.barEnd - custom.barStart;\n        if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n          start = 0;\n        }\n        start += value;\n      }\n      var startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n      var base = vScale.getPixelForValue(startValue);\n      if (this.chart.getDataVisibility(index)) {\n        head = vScale.getPixelForValue(start + length);\n      } else {\n        head = base;\n      }\n      size = head - base;\n      if (Math.abs(size) < minBarLength) {\n        size = barSign(size, vScale, actualBase) * minBarLength;\n        if (value === actualBase) {\n          base -= size / 2;\n        }\n        var startPixel = vScale.getPixelForDecimal(0);\n        var endPixel = vScale.getPixelForDecimal(1);\n        var min = Math.min(startPixel, endPixel);\n        var max = Math.max(startPixel, endPixel);\n        base = Math.max(Math.min(base, max), min);\n        head = base + size;\n        if (_stacked && !floating) {\n          parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n        }\n      }\n      if (base === vScale.getPixelForValue(actualBase)) {\n        var halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n        base += halfGrid;\n        size -= halfGrid;\n      }\n      return {\n        size: size,\n        base: base,\n        head: head,\n        center: head + size / 2\n      };\n    }\n  }, {\n    key: \"_calculateBarIndexPixels\",\n    value: function _calculateBarIndexPixels(index, ruler) {\n      var scale = ruler.scale;\n      var options = this.options;\n      var skipNull = options.skipNull;\n      var maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n      var center, size;\n      if (ruler.grouped) {\n        var stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n        var range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n        var stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n        center = range.start + range.chunk * stackIndex + range.chunk / 2;\n        size = Math.min(maxBarThickness, range.chunk * range.ratio);\n      } else {\n        center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n        size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n      }\n      return {\n        base: center - size / 2,\n        head: center + size / 2,\n        center: center,\n        size: size\n      };\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var meta = this._cachedMeta;\n      var vScale = meta.vScale;\n      var rects = meta.data;\n      var ilen = rects.length;\n      var i = 0;\n      for (; i < ilen; ++i) {\n        if (this.getParsed(i)[vScale.axis] !== null) {\n          rects[i].draw(this._ctx);\n        }\n      }\n    }\n  }]);\n  return BarController;\n}(DatasetController);\n_defineProperty(BarController, \"id\", 'bar');\n_defineProperty(BarController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n});\n_defineProperty(BarController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true\n    }\n  }\n});\nvar BubbleController = /*#__PURE__*/function (_DatasetController2) {\n  _inherits(BubbleController, _DatasetController2);\n  var _super2 = _createSuper(BubbleController);\n  function BubbleController() {\n    _classCallCheck(this, BubbleController);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(BubbleController, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.enableOptionSharing = true;\n      _get(_getPrototypeOf(BubbleController.prototype), \"initialize\", this).call(this);\n    }\n  }, {\n    key: \"parsePrimitiveData\",\n    value: function parsePrimitiveData(meta, data, start, count) {\n      var parsed = _get(_getPrototypeOf(BubbleController.prototype), \"parsePrimitiveData\", this).call(this, meta, data, start, count);\n      for (var i = 0; i < parsed.length; i++) {\n        parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseArrayData\",\n    value: function parseArrayData(meta, data, start, count) {\n      var parsed = _get(_getPrototypeOf(BubbleController.prototype), \"parseArrayData\", this).call(this, meta, data, start, count);\n      for (var i = 0; i < parsed.length; i++) {\n        var item = data[start + i];\n        parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      var parsed = _get(_getPrototypeOf(BubbleController.prototype), \"parseObjectData\", this).call(this, meta, data, start, count);\n      for (var i = 0; i < parsed.length; i++) {\n        var item = data[start + i];\n        parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n      }\n      return parsed;\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      var data = this._cachedMeta.data;\n      var max = 0;\n      for (var i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var labels = this.chart.data.labels || [];\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var parsed = this.getParsed(index);\n      var x = xScale.getLabelForValue(parsed.x);\n      var y = yScale.getLabelForValue(parsed.y);\n      var r = parsed._custom;\n      return {\n        label: labels[index] || '',\n        value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var points = this._cachedMeta.data;\n      this.updateElements(points, 0, points.length, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var reset = mode === 'reset';\n      var _this$_cachedMeta2 = this._cachedMeta,\n        iScale = _this$_cachedMeta2.iScale,\n        vScale = _this$_cachedMeta2.vScale;\n      var _this$_getSharedOptio2 = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio2.sharedOptions,\n        includeOptions = _this$_getSharedOptio2.includeOptions;\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      for (var i = start; i < start + count; i++) {\n        var point = points[i];\n        var parsed = !reset && this.getParsed(i);\n        var properties = {};\n        var iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n        var vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel);\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n          if (reset) {\n            properties.options.radius = 0;\n          }\n        }\n        this.updateElement(point, i, properties, mode);\n      }\n    }\n  }, {\n    key: \"resolveDataElementOptions\",\n    value: function resolveDataElementOptions(index, mode) {\n      var parsed = this.getParsed(index);\n      var values = _get(_getPrototypeOf(BubbleController.prototype), \"resolveDataElementOptions\", this).call(this, index, mode);\n      if (values.$shared) {\n        values = Object.assign({}, values, {\n          $shared: false\n        });\n      }\n      var radius = values.radius;\n      if (mode !== 'active') {\n        values.radius = 0;\n      }\n      values.radius += valueOrDefault(parsed && parsed._custom, radius);\n      return values;\n    }\n  }]);\n  return BubbleController;\n}(DatasetController);\n_defineProperty(BubbleController, \"id\", 'bubble');\n_defineProperty(BubbleController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n});\n_defineProperty(BubbleController, \"overrides\", {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  var ratioX = 1;\n  var ratioY = 1;\n  var offsetX = 0;\n  var offsetY = 0;\n  if (circumference < TAU) {\n    var startAngle = rotation;\n    var endAngle = startAngle + circumference;\n    var startX = Math.cos(startAngle);\n    var startY = Math.sin(startAngle);\n    var endX = Math.cos(endAngle);\n    var endY = Math.sin(endAngle);\n    var calcMax = function calcMax(angle, a, b) {\n      return _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    };\n    var calcMin = function calcMin(angle, a, b) {\n      return _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    };\n    var maxX = calcMax(0, startX, endX);\n    var maxY = calcMax(HALF_PI, startY, endY);\n    var minX = calcMin(PI, startX, endX);\n    var minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX: ratioX,\n    ratioY: ratioY,\n    offsetX: offsetX,\n    offsetY: offsetY\n  };\n}\nvar DoughnutController = /*#__PURE__*/function (_DatasetController3) {\n  _inherits(DoughnutController, _DatasetController3);\n  var _super3 = _createSuper(DoughnutController);\n  function DoughnutController(chart, datasetIndex) {\n    var _this4;\n    _classCallCheck(this, DoughnutController);\n    _this4 = _super3.call(this, chart, datasetIndex);\n    _this4.enableOptionSharing = true;\n    _this4.innerRadius = undefined;\n    _this4.outerRadius = undefined;\n    _this4.offsetX = undefined;\n    _this4.offsetY = undefined;\n    return _this4;\n  }\n  _createClass(DoughnutController, [{\n    key: \"linkScales\",\n    value: function linkScales() {}\n  }, {\n    key: \"parse\",\n    value: function parse(start, count) {\n      var data = this.getDataset().data;\n      var meta = this._cachedMeta;\n      if (this._parsing === false) {\n        meta._parsed = data;\n      } else {\n        var getter = function getter(i) {\n          return +data[i];\n        };\n        if (isObject(data[start])) {\n          var _this$_parsing$key = this._parsing.key,\n            key = _this$_parsing$key === void 0 ? 'value' : _this$_parsing$key;\n          getter = function getter(i) {\n            return +resolveObjectKey(data[i], key);\n          };\n        }\n        var i, ilen;\n        for (i = start, ilen = start + count; i < ilen; ++i) {\n          meta._parsed[i] = getter(i);\n        }\n      }\n    }\n  }, {\n    key: \"_getRotation\",\n    value: function _getRotation() {\n      return toRadians(this.options.rotation - 90);\n    }\n  }, {\n    key: \"_getCircumference\",\n    value: function _getCircumference() {\n      return toRadians(this.options.circumference);\n    }\n  }, {\n    key: \"_getRotationExtents\",\n    value: function _getRotationExtents() {\n      var min = TAU;\n      var max = -TAU;\n      for (var i = 0; i < this.chart.data.datasets.length; ++i) {\n        if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n          var controller = this.chart.getDatasetMeta(i).controller;\n          var rotation = controller._getRotation();\n          var circumference = controller._getCircumference();\n          min = Math.min(min, rotation);\n          max = Math.max(max, rotation + circumference);\n        }\n      }\n      return {\n        rotation: min,\n        circumference: max - min\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var chart = this.chart;\n      var chartArea = chart.chartArea;\n      var meta = this._cachedMeta;\n      var arcs = meta.data;\n      var spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n      var maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n      var cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n      var chartWeight = this._getRingWeight(this.index);\n      var _this$_getRotationExt = this._getRotationExtents(),\n        circumference = _this$_getRotationExt.circumference,\n        rotation = _this$_getRotationExt.rotation;\n      var _getRatioAndOffset = getRatioAndOffset(rotation, circumference, cutout),\n        ratioX = _getRatioAndOffset.ratioX,\n        ratioY = _getRatioAndOffset.ratioY,\n        offsetX = _getRatioAndOffset.offsetX,\n        offsetY = _getRatioAndOffset.offsetY;\n      var maxWidth = (chartArea.width - spacing) / ratioX;\n      var maxHeight = (chartArea.height - spacing) / ratioY;\n      var maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n      var outerRadius = toDimension(this.options.radius, maxRadius);\n      var innerRadius = Math.max(outerRadius * cutout, 0);\n      var radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n      this.offsetX = offsetX * outerRadius;\n      this.offsetY = offsetY * outerRadius;\n      meta.total = this.calculateTotal();\n      this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n      this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n      this.updateElements(arcs, 0, arcs.length, mode);\n    }\n  }, {\n    key: \"_circumference\",\n    value: function _circumference(i, reset) {\n      var opts = this.options;\n      var meta = this._cachedMeta;\n      var circumference = this._getCircumference();\n      if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n        return 0;\n      }\n      return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(arcs, start, count, mode) {\n      var reset = mode === 'reset';\n      var chart = this.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var centerX = (chartArea.left + chartArea.right) / 2;\n      var centerY = (chartArea.top + chartArea.bottom) / 2;\n      var animateScale = reset && animationOpts.animateScale;\n      var innerRadius = animateScale ? 0 : this.innerRadius;\n      var outerRadius = animateScale ? 0 : this.outerRadius;\n      var _this$_getSharedOptio3 = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio3.sharedOptions,\n        includeOptions = _this$_getSharedOptio3.includeOptions;\n      var startAngle = this._getRotation();\n      var i;\n      for (i = 0; i < start; ++i) {\n        startAngle += this._circumference(i, reset);\n      }\n      for (i = start; i < start + count; ++i) {\n        var circumference = this._circumference(i, reset);\n        var arc = arcs[i];\n        var properties = {\n          x: centerX + this.offsetX,\n          y: centerY + this.offsetY,\n          startAngle: startAngle,\n          endAngle: startAngle + circumference,\n          circumference: circumference,\n          outerRadius: outerRadius,\n          innerRadius: innerRadius\n        };\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n        }\n        startAngle += circumference;\n        this.updateElement(arc, i, properties, mode);\n      }\n    }\n  }, {\n    key: \"calculateTotal\",\n    value: function calculateTotal() {\n      var meta = this._cachedMeta;\n      var metaData = meta.data;\n      var total = 0;\n      var i;\n      for (i = 0; i < metaData.length; i++) {\n        var value = meta._parsed[i];\n        if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n          total += Math.abs(value);\n        }\n      }\n      return total;\n    }\n  }, {\n    key: \"calculateCircumference\",\n    value: function calculateCircumference(value) {\n      var total = this._cachedMeta.total;\n      if (total > 0 && !isNaN(value)) {\n        return TAU * (Math.abs(value) / total);\n      }\n      return 0;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var chart = this.chart;\n      var labels = chart.data.labels || [];\n      var value = formatNumber(meta._parsed[index], chart.options.locale);\n      return {\n        label: labels[index] || '',\n        value: value\n      };\n    }\n  }, {\n    key: \"getMaxBorderWidth\",\n    value: function getMaxBorderWidth(arcs) {\n      var max = 0;\n      var chart = this.chart;\n      var i, ilen, meta, controller, options;\n      if (!arcs) {\n        for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n          if (chart.isDatasetVisible(i)) {\n            meta = chart.getDatasetMeta(i);\n            arcs = meta.data;\n            controller = meta.controller;\n            break;\n          }\n        }\n      }\n      if (!arcs) {\n        return 0;\n      }\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        options = controller.resolveDataElementOptions(i);\n        if (options.borderAlign !== 'inner') {\n          max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n        }\n      }\n      return max;\n    }\n  }, {\n    key: \"getMaxOffset\",\n    value: function getMaxOffset(arcs) {\n      var max = 0;\n      for (var i = 0, ilen = arcs.length; i < ilen; ++i) {\n        var options = this.resolveDataElementOptions(i);\n        max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n      }\n      return max;\n    }\n  }, {\n    key: \"_getRingWeightOffset\",\n    value: function _getRingWeightOffset(datasetIndex) {\n      var ringWeightOffset = 0;\n      for (var i = 0; i < datasetIndex; ++i) {\n        if (this.chart.isDatasetVisible(i)) {\n          ringWeightOffset += this._getRingWeight(i);\n        }\n      }\n      return ringWeightOffset;\n    }\n  }, {\n    key: \"_getRingWeight\",\n    value: function _getRingWeight(datasetIndex) {\n      return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n  }, {\n    key: \"_getVisibleDatasetWeightTotal\",\n    value: function _getVisibleDatasetWeightTotal() {\n      return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n  }]);\n  return DoughnutController;\n}(DatasetController);\n_defineProperty(DoughnutController, \"id\", 'doughnut');\n_defineProperty(DoughnutController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    }\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r'\n});\n_defineProperty(DoughnutController, \"descriptors\", {\n  _scriptable: function _scriptable(name) {\n    return name !== 'spacing';\n  },\n  _indexable: function _indexable(name) {\n    return name !== 'spacing';\n  }\n});\n_defineProperty(DoughnutController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            var _chart$legend$options2 = chart.legend.options.labels,\n              pointStyle = _chart$legend$options2.pointStyle,\n              color = _chart$legend$options2.color;\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  }\n});\nvar LineController = /*#__PURE__*/function (_DatasetController4) {\n  _inherits(LineController, _DatasetController4);\n  var _super4 = _createSuper(LineController);\n  function LineController() {\n    _classCallCheck(this, LineController);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(LineController, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.enableOptionSharing = true;\n      this.supportsDecimation = true;\n      _get(_getPrototypeOf(LineController.prototype), \"initialize\", this).call(this);\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      var line = meta.dataset,\n        _meta$data = meta.data,\n        points = _meta$data === void 0 ? [] : _meta$data,\n        _dataset = meta._dataset;\n      var animationsDisabled = this.chart._animationsDisabled;\n      var _getStartAndCountOfVi = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled),\n        start = _getStartAndCountOfVi.start,\n        count = _getStartAndCountOfVi.count;\n      this._drawStart = start;\n      this._drawCount = count;\n      if (_scaleRangesChanged(meta)) {\n        start = 0;\n        count = points.length;\n      }\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      var options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options: options\n      }, mode);\n      this.updateElements(points, start, count, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var reset = mode === 'reset';\n      var _this$_cachedMeta3 = this._cachedMeta,\n        iScale = _this$_cachedMeta3.iScale,\n        vScale = _this$_cachedMeta3.vScale,\n        _stacked = _this$_cachedMeta3._stacked,\n        _dataset = _this$_cachedMeta3._dataset;\n      var _this$_getSharedOptio4 = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio4.sharedOptions,\n        includeOptions = _this$_getSharedOptio4.includeOptions;\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      var _this$options2 = this.options,\n        spanGaps = _this$options2.spanGaps,\n        segment = _this$options2.segment;\n      var maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n      var directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n      var end = start + count;\n      var pointsCount = points.length;\n      var prevParsed = start > 0 && this.getParsed(start - 1);\n      for (var i = 0; i < pointsCount; ++i) {\n        var point = points[i];\n        var properties = directUpdate ? point : {};\n        if (i < start || i >= end) {\n          properties.skip = true;\n          continue;\n        }\n        var parsed = this.getParsed(i);\n        var nullData = isNullOrUndef(parsed[vAxis]);\n        var iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n        var vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n        properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n        if (segment) {\n          properties.parsed = parsed;\n          properties.raw = _dataset.data[i];\n        }\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        }\n        if (!directUpdate) {\n          this.updateElement(point, i, properties, mode);\n        }\n        prevParsed = parsed;\n      }\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      var meta = this._cachedMeta;\n      var dataset = meta.dataset;\n      var border = dataset.options && dataset.options.borderWidth || 0;\n      var data = meta.data || [];\n      if (!data.length) {\n        return border;\n      }\n      var firstPoint = data[0].size(this.resolveDataElementOptions(0));\n      var lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n      return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var meta = this._cachedMeta;\n      meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n      _get(_getPrototypeOf(LineController.prototype), \"draw\", this).call(this);\n    }\n  }]);\n  return LineController;\n}(DatasetController);\n_defineProperty(LineController, \"id\", 'line');\n_defineProperty(LineController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false\n});\n_defineProperty(LineController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category'\n    },\n    _value_: {\n      type: 'linear'\n    }\n  }\n});\nvar PolarAreaController = /*#__PURE__*/function (_DatasetController5) {\n  _inherits(PolarAreaController, _DatasetController5);\n  var _super5 = _createSuper(PolarAreaController);\n  function PolarAreaController(chart, datasetIndex) {\n    var _this5;\n    _classCallCheck(this, PolarAreaController);\n    _this5 = _super5.call(this, chart, datasetIndex);\n    _this5.innerRadius = undefined;\n    _this5.outerRadius = undefined;\n    return _this5;\n  }\n  _createClass(PolarAreaController, [{\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var chart = this.chart;\n      var labels = chart.data.labels || [];\n      var value = formatNumber(meta._parsed[index].r, chart.options.locale);\n      return {\n        label: labels[index] || '',\n        value: value\n      };\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var arcs = this._cachedMeta.data;\n      this._updateRadius();\n      this.updateElements(arcs, 0, arcs.length, mode);\n    }\n  }, {\n    key: \"getMinMax\",\n    value: function getMinMax() {\n      var _this6 = this;\n      var meta = this._cachedMeta;\n      var range = {\n        min: Number.POSITIVE_INFINITY,\n        max: Number.NEGATIVE_INFINITY\n      };\n      meta.data.forEach(function (element, index) {\n        var parsed = _this6.getParsed(index).r;\n        if (!isNaN(parsed) && _this6.chart.getDataVisibility(index)) {\n          if (parsed < range.min) {\n            range.min = parsed;\n          }\n          if (parsed > range.max) {\n            range.max = parsed;\n          }\n        }\n      });\n      return range;\n    }\n  }, {\n    key: \"_updateRadius\",\n    value: function _updateRadius() {\n      var chart = this.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n      var outerRadius = Math.max(minSize / 2, 0);\n      var innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n      var radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n      this.outerRadius = outerRadius - radiusLength * this.index;\n      this.innerRadius = this.outerRadius - radiusLength;\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(arcs, start, count, mode) {\n      var reset = mode === 'reset';\n      var chart = this.chart;\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var scale = this._cachedMeta.rScale;\n      var centerX = scale.xCenter;\n      var centerY = scale.yCenter;\n      var datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n      var angle = datasetStartAngle;\n      var i;\n      var defaultAngle = 360 / this.countVisibleElements();\n      for (i = 0; i < start; ++i) {\n        angle += this._computeAngle(i, mode, defaultAngle);\n      }\n      for (i = start; i < start + count; i++) {\n        var arc = arcs[i];\n        var startAngle = angle;\n        var endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n        var outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n        angle = endAngle;\n        if (reset) {\n          if (animationOpts.animateScale) {\n            outerRadius = 0;\n          }\n          if (animationOpts.animateRotate) {\n            startAngle = endAngle = datasetStartAngle;\n          }\n        }\n        var properties = {\n          x: centerX,\n          y: centerY,\n          innerRadius: 0,\n          outerRadius: outerRadius,\n          startAngle: startAngle,\n          endAngle: endAngle,\n          options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n        };\n        this.updateElement(arc, i, properties, mode);\n      }\n    }\n  }, {\n    key: \"countVisibleElements\",\n    value: function countVisibleElements() {\n      var _this7 = this;\n      var meta = this._cachedMeta;\n      var count = 0;\n      meta.data.forEach(function (element, index) {\n        if (!isNaN(_this7.getParsed(index).r) && _this7.chart.getDataVisibility(index)) {\n          count++;\n        }\n      });\n      return count;\n    }\n  }, {\n    key: \"_computeAngle\",\n    value: function _computeAngle(index, mode, defaultAngle) {\n      return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n  }]);\n  return PolarAreaController;\n}(DatasetController);\n_defineProperty(PolarAreaController, \"id\", 'polarArea');\n_defineProperty(PolarAreaController, \"defaults\", {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    }\n  },\n  indexAxis: 'r',\n  startAngle: 0\n});\n_defineProperty(PolarAreaController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            var _chart$legend$options3 = chart.legend.options.labels,\n              pointStyle = _chart$legend$options3.pointStyle,\n              color = _chart$legend$options3.color;\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n});\nvar PieController = /*#__PURE__*/function (_DoughnutController) {\n  _inherits(PieController, _DoughnutController);\n  var _super6 = _createSuper(PieController);\n  function PieController() {\n    _classCallCheck(this, PieController);\n    return _super6.apply(this, arguments);\n  }\n  return _createClass(PieController);\n}(DoughnutController);\n_defineProperty(PieController, \"id\", 'pie');\n_defineProperty(PieController, \"defaults\", {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n});\nvar RadarController = /*#__PURE__*/function (_DatasetController6) {\n  _inherits(RadarController, _DatasetController6);\n  var _super7 = _createSuper(RadarController);\n  function RadarController() {\n    _classCallCheck(this, RadarController);\n    return _super7.apply(this, arguments);\n  }\n  _createClass(RadarController, [{\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var vScale = this._cachedMeta.vScale;\n      var parsed = this.getParsed(index);\n      return {\n        label: vScale.getLabels()[index],\n        value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n      };\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      var line = meta.dataset;\n      var points = meta.data || [];\n      var labels = meta.iScale.getLabels();\n      line.points = points;\n      if (mode !== 'resize') {\n        var options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n          options.borderWidth = 0;\n        }\n        var properties = {\n          _loop: true,\n          _fullLoop: labels.length === points.length,\n          options: options\n        };\n        this.updateElement(line, undefined, properties, mode);\n      }\n      this.updateElements(points, 0, points.length, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var scale = this._cachedMeta.rScale;\n      var reset = mode === 'reset';\n      for (var i = start; i < start + count; i++) {\n        var point = points[i];\n        var options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        var pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n        var x = reset ? scale.xCenter : pointPosition.x;\n        var y = reset ? scale.yCenter : pointPosition.y;\n        var properties = {\n          x: x,\n          y: y,\n          angle: pointPosition.angle,\n          skip: isNaN(x) || isNaN(y),\n          options: options\n        };\n        this.updateElement(point, i, properties, mode);\n      }\n    }\n  }]);\n  return RadarController;\n}(DatasetController);\n_defineProperty(RadarController, \"id\", 'radar');\n_defineProperty(RadarController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  }\n});\n_defineProperty(RadarController, \"overrides\", {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear'\n    }\n  }\n});\nvar ScatterController = /*#__PURE__*/function (_DatasetController7) {\n  _inherits(ScatterController, _DatasetController7);\n  var _super8 = _createSuper(ScatterController);\n  function ScatterController() {\n    _classCallCheck(this, ScatterController);\n    return _super8.apply(this, arguments);\n  }\n  _createClass(ScatterController, [{\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var labels = this.chart.data.labels || [];\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var parsed = this.getParsed(index);\n      var x = xScale.getLabelForValue(parsed.x);\n      var y = yScale.getLabelForValue(parsed.y);\n      return {\n        label: labels[index] || '',\n        value: '(' + x + ', ' + y + ')'\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      var _meta$data2 = meta.data,\n        points = _meta$data2 === void 0 ? [] : _meta$data2;\n      var animationsDisabled = this.chart._animationsDisabled;\n      var _getStartAndCountOfVi2 = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled),\n        start = _getStartAndCountOfVi2.start,\n        count = _getStartAndCountOfVi2.count;\n      this._drawStart = start;\n      this._drawCount = count;\n      if (_scaleRangesChanged(meta)) {\n        start = 0;\n        count = points.length;\n      }\n      if (this.options.showLine) {\n        var line = meta.dataset,\n          _dataset = meta._dataset;\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        var options = this.resolveDatasetElementOptions(mode);\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n          animated: !animationsDisabled,\n          options: options\n        }, mode);\n      }\n      this.updateElements(points, start, count, mode);\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      var showLine = this.options.showLine;\n      if (!this.datasetElementType && showLine) {\n        this.datasetElementType = this.chart.registry.getElement('line');\n      }\n      _get(_getPrototypeOf(ScatterController.prototype), \"addElements\", this).call(this);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var reset = mode === 'reset';\n      var _this$_cachedMeta4 = this._cachedMeta,\n        iScale = _this$_cachedMeta4.iScale,\n        vScale = _this$_cachedMeta4.vScale,\n        _stacked = _this$_cachedMeta4._stacked,\n        _dataset = _this$_cachedMeta4._dataset;\n      var firstOpts = this.resolveDataElementOptions(start, mode);\n      var sharedOptions = this.getSharedOptions(firstOpts);\n      var includeOptions = this.includeOptions(mode, sharedOptions);\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      var _this$options3 = this.options,\n        spanGaps = _this$options3.spanGaps,\n        segment = _this$options3.segment;\n      var maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n      var directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n      var prevParsed = start > 0 && this.getParsed(start - 1);\n      for (var i = start; i < start + count; ++i) {\n        var point = points[i];\n        var parsed = this.getParsed(i);\n        var properties = directUpdate ? point : {};\n        var nullData = isNullOrUndef(parsed[vAxis]);\n        var iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n        var vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n        properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n        if (segment) {\n          properties.parsed = parsed;\n          properties.raw = _dataset.data[i];\n        }\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        }\n        if (!directUpdate) {\n          this.updateElement(point, i, properties, mode);\n        }\n        prevParsed = parsed;\n      }\n      this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      var meta = this._cachedMeta;\n      var data = meta.data || [];\n      if (!this.options.showLine) {\n        var max = 0;\n        for (var i = data.length - 1; i >= 0; --i) {\n          max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n      }\n      var dataset = meta.dataset;\n      var border = dataset.options && dataset.options.borderWidth || 0;\n      if (!data.length) {\n        return border;\n      }\n      var firstPoint = data[0].size(this.resolveDataElementOptions(0));\n      var lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n      return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n  }]);\n  return ScatterController;\n}(DatasetController);\n_defineProperty(ScatterController, \"id\", 'scatter');\n_defineProperty(ScatterController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  showLine: false,\n  fill: false\n});\n_defineProperty(ScatterController, \"overrides\", {\n  interaction: {\n    mode: 'point'\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PolarAreaController: PolarAreaController,\n  PieController: PieController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nvar DateAdapterBase = /*#__PURE__*/function () {\n  function DateAdapterBase(options) {\n    _classCallCheck(this, DateAdapterBase);\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  _createClass(DateAdapterBase, [{\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return abstract();\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      return abstract();\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return abstract();\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      return abstract();\n    }\n  }, {\n    key: \"diff\",\n    value: function diff() {\n      return abstract();\n    }\n  }, {\n    key: \"startOf\",\n    value: function startOf() {\n      return abstract();\n    }\n  }, {\n    key: \"endOf\",\n    value: function endOf() {\n      return abstract();\n    }\n  }], [{\n    key: \"override\",\n    value:\n    /**\n    * Override default date adapter methods.\n    * Accepts type parameter to define options type.\n    * @example\n    * Chart._adapters._date.override<{myAdapterOption: string}>({\n    *   init() {\n    *     console.log(this.options.myAdapterOption);\n    *   }\n    * })\n    */\n    function override(members) {\n      Object.assign(DateAdapterBase.prototype, members);\n    }\n  }]);\n  return DateAdapterBase;\n}();\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  var controller = metaset.controller,\n    data = metaset.data,\n    _sorted = metaset._sorted;\n  var iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    var lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      var el = data[0];\n      var range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        var start = lookupMethod(data, axis, value - range);\n        var end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  var metasets = chart.getSortedVisibleDatasetMetas();\n  var value = position[axis];\n  for (var i = 0, ilen = metasets.length; i < ilen; ++i) {\n    var _metasets$i = metasets[i],\n      _index2 = _metasets$i.index,\n      data = _metasets$i.data;\n    var _binarySearch = binarySearch(metasets[i], axis, value, intersect),\n      lo = _binarySearch.lo,\n      hi = _binarySearch.hi;\n    for (var j = lo; j <= hi; ++j) {\n      var element = data[j];\n      if (!element.skip) {\n        handler(element, _index2, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  var useX = axis.indexOf('x') !== -1;\n  var useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  var items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  var evaluationFunc = function evaluationFunc(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  var items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    var _element$getProps = element.getProps(['startAngle', 'endAngle'], useFinalPosition),\n      startAngle = _element$getProps.startAngle,\n      endAngle = _element$getProps.endAngle;\n    var _getAngleFromPoint = getAngleFromPoint(element, {\n        x: position.x,\n        y: position.y\n      }),\n      angle = _getAngleFromPoint.angle;\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  var items = [];\n  var distanceMetric = getDistanceMetricForAxis(axis);\n  var minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    var inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    var center = element.getCenterPoint(useFinalPosition);\n    var pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    var distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  var items = [];\n  var rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  var intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, function (element, datasetIndex, index) {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems: evaluateInteractionItems,\n  modes: {\n    index: function index(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'x';\n      var includeInvisible = options.includeInvisible || false;\n      var items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      var elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(function (meta) {\n        var index = items[0].index;\n        var element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element: element,\n            datasetIndex: meta.index,\n            index: index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset: function dataset(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'xy';\n      var includeInvisible = options.includeInvisible || false;\n      var items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        var datasetIndex = items[0].datasetIndex;\n        var data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (var i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex: datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point: function point(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'xy';\n      var includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest: function nearest(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'xy';\n      var includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x: function x(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y: function y(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nvar STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(function (v) {\n    return v.pos === position;\n  });\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(function (v) {\n    return STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis;\n  });\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort(function (a, b) {\n    var v0 = reverse ? b : a;\n    var v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  var layoutBoxes = [];\n  var i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    var _box = box;\n    pos = _box.position;\n    var _box$options = _box.options;\n    stack = _box$options.stack;\n    var _box$options$stackWei = _box$options.stackWeight;\n    stackWeight = _box$options$stackWei === void 0 ? 1 : _box$options$stackWei;\n    layoutBoxes.push({\n      index: i,\n      box: box,\n      pos: pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight: stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  var stacks = {};\n  var _iterator5 = _createForOfIteratorHelper(layouts),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var wrap = _step5.value;\n      var stack = wrap.stack,\n        pos = wrap.pos,\n        stackWeight = wrap.stackWeight;\n      if (!stack || !STATIC_POSITIONS.includes(pos)) {\n        continue;\n      }\n      var _stack = stacks[stack] || (stacks[stack] = {\n        count: 0,\n        placed: 0,\n        weight: 0,\n        size: 0\n      });\n      _stack.count++;\n      _stack.weight += stackWeight;\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  var stacks = buildStacks(layouts);\n  var vBoxMaxWidth = params.vBoxMaxWidth,\n    hBoxMaxHeight = params.hBoxMaxHeight;\n  var i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    var fullSize = layout.box.fullSize;\n    var stack = stacks[layout.stack];\n    var factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  var layoutBoxes = wrapBoxes(boxes);\n  var fullSize = sortByWeight(layoutBoxes.filter(function (wrap) {\n    return wrap.box.fullSize;\n  }), true);\n  var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  var centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  var centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize: fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  var pos = layout.pos,\n    box = layout.box;\n  var maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    var stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  var newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  var newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  var widthChanged = newWidth !== chartArea.w;\n  var heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  var maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    var change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  var maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    var margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(function (pos) {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  var refitBoxes = [];\n  var i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    var _updateDims = updateDims(chartArea, params, layout, stacks),\n      same = _updateDims.same,\n      other = _updateDims.other;\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  var userPadding = params.padding;\n  var x = chartArea.x,\n    y = chartArea.y;\n  var _iterator6 = _createForOfIteratorHelper(boxes),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var layout = _step6.value;\n      var box = layout.box;\n      var stack = stacks[layout.stack] || {\n        count: 1,\n        placed: 0,\n        weight: 1\n      };\n      var weight = layout.stackWeight / stack.weight || 1;\n      if (layout.horizontal) {\n        var width = chartArea.w * weight;\n        var height = stack.size || box.height;\n        if (defined(stack.start)) {\n          y = stack.start;\n        }\n        if (box.fullSize) {\n          setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n        } else {\n          setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n        }\n        stack.start = y;\n        stack.placed += width;\n        y = box.bottom;\n      } else {\n        var height1 = chartArea.h * weight;\n        var width1 = stack.size || box.width;\n        if (defined(stack.start)) {\n          x = stack.start;\n        }\n        if (box.fullSize) {\n          setBoxDims(box, x, userPadding.top, width1, params.outerHeight - userPadding.bottom - userPadding.top);\n        } else {\n          setBoxDims(box, x, chartArea.top + stack.placed, width1, height1);\n        }\n        stack.start = x;\n        stack.placed += height1;\n        x = box.right;\n      }\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox: function addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw: function draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox: function removeBox(chart, layoutItem) {\n    var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure: function configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update: function update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    var padding = toPadding(chart.options.layout.padding);\n    var availableWidth = Math.max(width - padding.width, 0);\n    var availableHeight = Math.max(height - padding.height, 0);\n    var boxes = buildLayoutBoxes(chart.boxes);\n    var verticalBoxes = boxes.vertical;\n    var horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, function (box) {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    var visibleVerticalBoxCount = verticalBoxes.reduce(function (total, wrap) {\n      return wrap.box.options && wrap.box.options.display === false ? total : total + 1;\n    }, 0) || 1;\n    var params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding: padding,\n      availableWidth: availableWidth,\n      availableHeight: availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    var maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    var chartArea = Object.assign({\n      maxPadding: maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    var stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, function (layout) {\n      var box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nvar BasePlatform = /*#__PURE__*/function () {\n  function BasePlatform() {\n    _classCallCheck(this, BasePlatform);\n  }\n  _createClass(BasePlatform, [{\n    key: \"acquireContext\",\n    value: function acquireContext(canvas, aspectRatio) {}\n  }, {\n    key: \"releaseContext\",\n    value: function releaseContext(context) {\n      return false;\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(chart, type, listener) {}\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(chart, type, listener) {}\n  }, {\n    key: \"getDevicePixelRatio\",\n    value: function getDevicePixelRatio() {\n      return 1;\n    }\n  }, {\n    key: \"getMaximumSize\",\n    value: function getMaximumSize(element, width, height, aspectRatio) {\n      width = Math.max(0, width || element.width);\n      height = height || element.height;\n      return {\n        width: width,\n        height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n      };\n    }\n  }, {\n    key: \"isAttached\",\n    value: function isAttached(canvas) {\n      return true;\n    }\n  }, {\n    key: \"updateConfig\",\n    value: function updateConfig(config) {}\n  }]);\n  return BasePlatform;\n}();\nvar BasicPlatform = /*#__PURE__*/function (_BasePlatform) {\n  _inherits(BasicPlatform, _BasePlatform);\n  var _super9 = _createSuper(BasicPlatform);\n  function BasicPlatform() {\n    _classCallCheck(this, BasicPlatform);\n    return _super9.apply(this, arguments);\n  }\n  _createClass(BasicPlatform, [{\n    key: \"acquireContext\",\n    value: function acquireContext(item) {\n      return item && item.getContext && item.getContext('2d') || null;\n    }\n  }, {\n    key: \"updateConfig\",\n    value: function updateConfig(config) {\n      config.options.animation = false;\n    }\n  }]);\n  return BasicPlatform;\n}(BasePlatform);\nvar EXPANDO_KEY = '$chartjs';\nvar EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nvar isNullOrEmpty = function isNullOrEmpty(value) {\n  return value === null || value === '';\n};\nfunction initCanvas(canvas, aspectRatio) {\n  var style = canvas.style;\n  var renderHeight = canvas.getAttribute('height');\n  var renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    var displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      var displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nvar eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  var type = EVENT_TYPES[event.type] || event.type;\n  var _getRelativePosition = getRelativePosition(event, chart),\n    x = _getRelativePosition.x,\n    y = _getRelativePosition.y;\n  return {\n    type: type,\n    chart: chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  var _iterator7 = _createForOfIteratorHelper(nodeList),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var node = _step7.value;\n      if (node === canvas || node.contains(canvas)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  var canvas = chart.canvas;\n  var observer = new MutationObserver(function (entries) {\n    var trigger = false;\n    var _iterator8 = _createForOfIteratorHelper(entries),\n      _step8;\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var entry = _step8.value;\n        trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n        trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  var canvas = chart.canvas;\n  var observer = new MutationObserver(function (entries) {\n    var trigger = false;\n    var _iterator9 = _createForOfIteratorHelper(entries),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var entry = _step9.value;\n        trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n        trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nvar drpListeningCharts = new Map();\nvar oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  var dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach(function (resize, chart) {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  var canvas = chart.canvas;\n  var container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  var resize = throttled(function (width, height) {\n    var w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  var observer = new ResizeObserver(function (entries) {\n    var entry = entries[0];\n    var width = entry.contentRect.width;\n    var height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  var canvas = chart.canvas;\n  var proxy = throttled(function (event) {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nvar DomPlatform = /*#__PURE__*/function (_BasePlatform2) {\n  _inherits(DomPlatform, _BasePlatform2);\n  var _super10 = _createSuper(DomPlatform);\n  function DomPlatform() {\n    _classCallCheck(this, DomPlatform);\n    return _super10.apply(this, arguments);\n  }\n  _createClass(DomPlatform, [{\n    key: \"acquireContext\",\n    value: function acquireContext(canvas, aspectRatio) {\n      var context = canvas && canvas.getContext && canvas.getContext('2d');\n      if (context && context.canvas === canvas) {\n        initCanvas(canvas, aspectRatio);\n        return context;\n      }\n      return null;\n    }\n  }, {\n    key: \"releaseContext\",\n    value: function releaseContext(context) {\n      var canvas = context.canvas;\n      if (!canvas[EXPANDO_KEY]) {\n        return false;\n      }\n      var initial = canvas[EXPANDO_KEY].initial;\n      ['height', 'width'].forEach(function (prop) {\n        var value = initial[prop];\n        if (isNullOrUndef(value)) {\n          canvas.removeAttribute(prop);\n        } else {\n          canvas.setAttribute(prop, value);\n        }\n      });\n      var style = initial.style || {};\n      Object.keys(style).forEach(function (key) {\n        canvas.style[key] = style[key];\n      });\n      canvas.width = canvas.width;\n      delete canvas[EXPANDO_KEY];\n      return true;\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(chart, type, listener) {\n      this.removeEventListener(chart, type);\n      var proxies = chart.$proxies || (chart.$proxies = {});\n      var handlers = {\n        attach: createAttachObserver,\n        detach: createDetachObserver,\n        resize: createResizeObserver\n      };\n      var handler = handlers[type] || createProxyAndListen;\n      proxies[type] = handler(chart, type, listener);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(chart, type) {\n      var proxies = chart.$proxies || (chart.$proxies = {});\n      var proxy = proxies[type];\n      if (!proxy) {\n        return;\n      }\n      var handlers = {\n        attach: releaseObserver,\n        detach: releaseObserver,\n        resize: releaseObserver\n      };\n      var handler = handlers[type] || removeListener;\n      handler(chart, type, proxy);\n      proxies[type] = undefined;\n    }\n  }, {\n    key: \"getDevicePixelRatio\",\n    value: function getDevicePixelRatio() {\n      return window.devicePixelRatio;\n    }\n  }, {\n    key: \"getMaximumSize\",\n    value: function getMaximumSize(canvas, width, height, aspectRatio) {\n      return _getMaximumSize(canvas, width, height, aspectRatio);\n    }\n  }, {\n    key: \"isAttached\",\n    value: function isAttached(canvas) {\n      var container = _getParentNode(canvas);\n      return !!(container && container.isConnected);\n    }\n  }]);\n  return DomPlatform;\n}(BasePlatform);\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nvar Element = /*#__PURE__*/function () {\n  function Element() {\n    _classCallCheck(this, Element);\n    _defineProperty(this, \"active\", false);\n  }\n  _createClass(Element, [{\n    key: \"tooltipPosition\",\n    value: function tooltipPosition(useFinalPosition) {\n      var _this$getProps = this.getProps(['x', 'y'], useFinalPosition),\n        x = _this$getProps.x,\n        y = _this$getProps.y;\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return isNumber(this.x) && isNumber(this.y);\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps(props, final) {\n      var _this8 = this;\n      var anims = this.$animations;\n      if (!final || !anims) {\n        // let's not create an object, if not needed\n        return this;\n      }\n      var ret = {};\n      props.forEach(function (prop) {\n        ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : _this8[prop];\n      });\n      return ret;\n    }\n  }]);\n  return Element;\n}();\n_defineProperty(Element, \"defaults\", {});\n_defineProperty(Element, \"defaultRoutes\", undefined);\nfunction autoSkip(scale, ticks) {\n  var tickOpts = scale.options.ticks;\n  var determinedMaxTicks = determineMaxTicks(scale);\n  var ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  var numMajorIndices = majorIndices.length;\n  var first = majorIndices[0];\n  var last = majorIndices[numMajorIndices - 1];\n  var newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  var spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    var i, ilen;\n    var avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  var offset = scale.options.offset;\n  var tickLength = scale._tickSize();\n  var maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  var maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  var evenMajorSpacing = getEvenSpacing(majorIndices);\n  var spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  var factors = _factorize(evenMajorSpacing);\n  for (var i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    var factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  var result = [];\n  var i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  var count = 0;\n  var next = majorIndices[0];\n  var i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  var start = valueOrDefault(majorStart, 0);\n  var end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  var count = 0;\n  var length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  var len = arr.length;\n  var i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nvar reverseAlign = function reverseAlign(align) {\n  return align === 'left' ? 'right' : align === 'right' ? 'left' : align;\n};\nvar offsetFromEdge = function offsetFromEdge(scale, edge, offset) {\n  return edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n};\nfunction sample(arr, numItems) {\n  var result = [];\n  var increment = arr.length / numItems;\n  var len = arr.length;\n  var i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  var length = scale.ticks.length;\n  var validIndex = Math.min(index, length - 1);\n  var start = scale._startPixel;\n  var end = scale._endPixel;\n  var epsilon = 1e-6;\n  var lineValue = scale.getPixelForTick(validIndex);\n  var offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, function (cache) {\n    var gc = cache.gc;\n    var gcLen = gc.length / 2;\n    var i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  var font = toFont(options.font, fallback);\n  var padding = toPadding(options.padding);\n  var lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale: scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick: tick,\n    index: index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  var ret = _toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  var top = scale.top,\n    left = scale.left,\n    bottom = scale.bottom,\n    right = scale.right,\n    chart = scale.chart;\n  var chartArea = chart.chartArea,\n    scales = chart.scales;\n  var rotation = 0;\n  var maxWidth, titleX, titleY;\n  var height = bottom - top;\n  var width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      var positionAxisID = Object.keys(position)[0];\n      var value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      var positionAxisID1 = Object.keys(position)[0];\n      var value1 = position[positionAxisID1];\n      titleX = scales[positionAxisID1].getPixelForValue(value1) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {\n    titleX: titleX,\n    titleY: titleY,\n    maxWidth: maxWidth,\n    rotation: rotation\n  };\n}\nvar Scale = /*#__PURE__*/function (_Element) {\n  _inherits(Scale, _Element);\n  var _super11 = _createSuper(Scale);\n  function Scale(cfg) {\n    var _this9;\n    _classCallCheck(this, Scale);\n    _this9 = _super11.call(this);\n    _this9.id = cfg.id;\n    _this9.type = cfg.type;\n    _this9.options = undefined;\n    _this9.ctx = cfg.ctx;\n    _this9.chart = cfg.chart;\n    _this9.top = undefined;\n    _this9.bottom = undefined;\n    _this9.left = undefined;\n    _this9.right = undefined;\n    _this9.width = undefined;\n    _this9.height = undefined;\n    _this9._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    _this9.maxWidth = undefined;\n    _this9.maxHeight = undefined;\n    _this9.paddingTop = undefined;\n    _this9.paddingBottom = undefined;\n    _this9.paddingLeft = undefined;\n    _this9.paddingRight = undefined;\n    _this9.axis = undefined;\n    _this9.labelRotation = undefined;\n    _this9.min = undefined;\n    _this9.max = undefined;\n    _this9._range = undefined;\n    _this9.ticks = [];\n    _this9._gridLineItems = null;\n    _this9._labelItems = null;\n    _this9._labelSizes = null;\n    _this9._length = 0;\n    _this9._maxLength = 0;\n    _this9._longestTextCache = {};\n    _this9._startPixel = undefined;\n    _this9._endPixel = undefined;\n    _this9._reversePixels = false;\n    _this9._userMax = undefined;\n    _this9._userMin = undefined;\n    _this9._suggestedMax = undefined;\n    _this9._suggestedMin = undefined;\n    _this9._ticksLength = 0;\n    _this9._borderValue = 0;\n    _this9._cache = {};\n    _this9._dataLimitsCached = false;\n    _this9.$context = undefined;\n    return _this9;\n  }\n  _createClass(Scale, [{\n    key: \"init\",\n    value: function init(options) {\n      this.options = options.setContext(this.getContext());\n      this.axis = options.axis;\n      this._userMin = this.parse(options.min);\n      this._userMax = this.parse(options.max);\n      this._suggestedMin = this.parse(options.suggestedMin);\n      this._suggestedMax = this.parse(options.suggestedMax);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(raw, index) {\n      return raw;\n    }\n  }, {\n    key: \"getUserBounds\",\n    value: function getUserBounds() {\n      var _userMin = this._userMin,\n        _userMax = this._userMax,\n        _suggestedMin = this._suggestedMin,\n        _suggestedMax = this._suggestedMax;\n      _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n      _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n      _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n      _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n      return {\n        min: finiteOrDefault(_userMin, _suggestedMin),\n        max: finiteOrDefault(_userMax, _suggestedMax),\n        minDefined: isNumberFinite(_userMin),\n        maxDefined: isNumberFinite(_userMax)\n      };\n    }\n  }, {\n    key: \"getMinMax\",\n    value: function getMinMax(canStack) {\n      var _this$getUserBounds = this.getUserBounds(),\n        min = _this$getUserBounds.min,\n        max = _this$getUserBounds.max,\n        minDefined = _this$getUserBounds.minDefined,\n        maxDefined = _this$getUserBounds.maxDefined;\n      var range;\n      if (minDefined && maxDefined) {\n        return {\n          min: min,\n          max: max\n        };\n      }\n      var metas = this.getMatchingVisibleMetas();\n      for (var i = 0, ilen = metas.length; i < ilen; ++i) {\n        range = metas[i].controller.getMinMax(this, canStack);\n        if (!minDefined) {\n          min = Math.min(min, range.min);\n        }\n        if (!maxDefined) {\n          max = Math.max(max, range.max);\n        }\n      }\n      min = maxDefined && min > max ? max : min;\n      max = minDefined && min > max ? min : max;\n      return {\n        min: finiteOrDefault(min, finiteOrDefault(max, min)),\n        max: finiteOrDefault(max, finiteOrDefault(min, max))\n      };\n    }\n  }, {\n    key: \"getPadding\",\n    value: function getPadding() {\n      return {\n        left: this.paddingLeft || 0,\n        top: this.paddingTop || 0,\n        right: this.paddingRight || 0,\n        bottom: this.paddingBottom || 0\n      };\n    }\n  }, {\n    key: \"getTicks\",\n    value: function getTicks() {\n      return this.ticks;\n    }\n  }, {\n    key: \"getLabels\",\n    value: function getLabels() {\n      var data = this.chart.data;\n      return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n  }, {\n    key: \"getLabelItems\",\n    value: function getLabelItems() {\n      var chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;\n      var items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n      return items;\n    }\n  }, {\n    key: \"beforeLayout\",\n    value: function beforeLayout() {\n      this._cache = {};\n      this._dataLimitsCached = false;\n    }\n  }, {\n    key: \"beforeUpdate\",\n    value: function beforeUpdate() {\n      callback(this.options.beforeUpdate, [this]);\n    }\n  }, {\n    key: \"update\",\n    value: function update(maxWidth, maxHeight, margins) {\n      var _this$options4 = this.options,\n        beginAtZero = _this$options4.beginAtZero,\n        grace = _this$options4.grace,\n        tickOpts = _this$options4.ticks;\n      var sampleSize = tickOpts.sampleSize;\n      this.beforeUpdate();\n      this.maxWidth = maxWidth;\n      this.maxHeight = maxHeight;\n      this._margins = margins = Object.assign({\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }, margins);\n      this.ticks = null;\n      this._labelSizes = null;\n      this._gridLineItems = null;\n      this._labelItems = null;\n      this.beforeSetDimensions();\n      this.setDimensions();\n      this.afterSetDimensions();\n      this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n      if (!this._dataLimitsCached) {\n        this.beforeDataLimits();\n        this.determineDataLimits();\n        this.afterDataLimits();\n        this._range = _addGrace(this, grace, beginAtZero);\n        this._dataLimitsCached = true;\n      }\n      this.beforeBuildTicks();\n      this.ticks = this.buildTicks() || [];\n      this.afterBuildTicks();\n      var samplingEnabled = sampleSize < this.ticks.length;\n      this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n      this.configure();\n      this.beforeCalculateLabelRotation();\n      this.calculateLabelRotation();\n      this.afterCalculateLabelRotation();\n      if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n        this.ticks = autoSkip(this, this.ticks);\n        this._labelSizes = null;\n        this.afterAutoSkip();\n      }\n      if (samplingEnabled) {\n        this._convertTicksToLabels(this.ticks);\n      }\n      this.beforeFit();\n      this.fit();\n      this.afterFit();\n      this.afterUpdate();\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var reversePixels = this.options.reverse;\n      var startPixel, endPixel;\n      if (this.isHorizontal()) {\n        startPixel = this.left;\n        endPixel = this.right;\n      } else {\n        startPixel = this.top;\n        endPixel = this.bottom;\n        reversePixels = !reversePixels;\n      }\n      this._startPixel = startPixel;\n      this._endPixel = endPixel;\n      this._reversePixels = reversePixels;\n      this._length = endPixel - startPixel;\n      this._alignToPixels = this.options.alignToPixels;\n    }\n  }, {\n    key: \"afterUpdate\",\n    value: function afterUpdate() {\n      callback(this.options.afterUpdate, [this]);\n    }\n  }, {\n    key: \"beforeSetDimensions\",\n    value: function beforeSetDimensions() {\n      callback(this.options.beforeSetDimensions, [this]);\n    }\n  }, {\n    key: \"setDimensions\",\n    value: function setDimensions() {\n      if (this.isHorizontal()) {\n        this.width = this.maxWidth;\n        this.left = 0;\n        this.right = this.width;\n      } else {\n        this.height = this.maxHeight;\n        this.top = 0;\n        this.bottom = this.height;\n      }\n      this.paddingLeft = 0;\n      this.paddingTop = 0;\n      this.paddingRight = 0;\n      this.paddingBottom = 0;\n    }\n  }, {\n    key: \"afterSetDimensions\",\n    value: function afterSetDimensions() {\n      callback(this.options.afterSetDimensions, [this]);\n    }\n  }, {\n    key: \"_callHooks\",\n    value: function _callHooks(name) {\n      this.chart.notifyPlugins(name, this.getContext());\n      callback(this.options[name], [this]);\n    }\n  }, {\n    key: \"beforeDataLimits\",\n    value: function beforeDataLimits() {\n      this._callHooks('beforeDataLimits');\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {}\n  }, {\n    key: \"afterDataLimits\",\n    value: function afterDataLimits() {\n      this._callHooks('afterDataLimits');\n    }\n  }, {\n    key: \"beforeBuildTicks\",\n    value: function beforeBuildTicks() {\n      this._callHooks('beforeBuildTicks');\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      return [];\n    }\n  }, {\n    key: \"afterBuildTicks\",\n    value: function afterBuildTicks() {\n      this._callHooks('afterBuildTicks');\n    }\n  }, {\n    key: \"beforeTickToLabelConversion\",\n    value: function beforeTickToLabelConversion() {\n      callback(this.options.beforeTickToLabelConversion, [this]);\n    }\n  }, {\n    key: \"generateTickLabels\",\n    value: function generateTickLabels(ticks) {\n      var tickOpts = this.options.ticks;\n      var i, ilen, tick;\n      for (i = 0, ilen = ticks.length; i < ilen; i++) {\n        tick = ticks[i];\n        tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n      }\n    }\n  }, {\n    key: \"afterTickToLabelConversion\",\n    value: function afterTickToLabelConversion() {\n      callback(this.options.afterTickToLabelConversion, [this]);\n    }\n  }, {\n    key: \"beforeCalculateLabelRotation\",\n    value: function beforeCalculateLabelRotation() {\n      callback(this.options.beforeCalculateLabelRotation, [this]);\n    }\n  }, {\n    key: \"calculateLabelRotation\",\n    value: function calculateLabelRotation() {\n      var options = this.options;\n      var tickOpts = options.ticks;\n      var numTicks = this.ticks.length;\n      var minRotation = tickOpts.minRotation || 0;\n      var maxRotation = tickOpts.maxRotation;\n      var labelRotation = minRotation;\n      var tickWidth, maxHeight, maxLabelDiagonal;\n      if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n        this.labelRotation = minRotation;\n        return;\n      }\n      var labelSizes = this._getLabelSizes();\n      var maxLabelWidth = labelSizes.widest.width;\n      var maxLabelHeight = labelSizes.highest.height;\n      var maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n      tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n      if (maxLabelWidth + 6 > tickWidth) {\n        tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n        maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n        maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n        labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n        labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n      }\n      this.labelRotation = labelRotation;\n    }\n  }, {\n    key: \"afterCalculateLabelRotation\",\n    value: function afterCalculateLabelRotation() {\n      callback(this.options.afterCalculateLabelRotation, [this]);\n    }\n  }, {\n    key: \"afterAutoSkip\",\n    value: function afterAutoSkip() {}\n  }, {\n    key: \"beforeFit\",\n    value: function beforeFit() {\n      callback(this.options.beforeFit, [this]);\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var minSize = {\n        width: 0,\n        height: 0\n      };\n      var chart = this.chart,\n        _this$options5 = this.options,\n        tickOpts = _this$options5.ticks,\n        titleOpts = _this$options5.title,\n        gridOpts = _this$options5.grid;\n      var display = this._isVisible();\n      var isHorizontal = this.isHorizontal();\n      if (display) {\n        var titleHeight = getTitleHeight(titleOpts, chart.options.font);\n        if (isHorizontal) {\n          minSize.width = this.maxWidth;\n          minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n        } else {\n          minSize.height = this.maxHeight;\n          minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n        }\n        if (tickOpts.display && this.ticks.length) {\n          var _this$_getLabelSizes = this._getLabelSizes(),\n            first = _this$_getLabelSizes.first,\n            last = _this$_getLabelSizes.last,\n            widest = _this$_getLabelSizes.widest,\n            highest = _this$_getLabelSizes.highest;\n          var tickPadding = tickOpts.padding * 2;\n          var angleRadians = toRadians(this.labelRotation);\n          var cos = Math.cos(angleRadians);\n          var sin = Math.sin(angleRadians);\n          if (isHorizontal) {\n            var labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n            minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n          } else {\n            var labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n            minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n          }\n          this._calculatePadding(first, last, sin, cos);\n        }\n      }\n      this._handleMargins();\n      if (isHorizontal) {\n        this.width = this._length = chart.width - this._margins.left - this._margins.right;\n        this.height = minSize.height;\n      } else {\n        this.width = minSize.width;\n        this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n      }\n    }\n  }, {\n    key: \"_calculatePadding\",\n    value: function _calculatePadding(first, last, sin, cos) {\n      var _this$options6 = this.options,\n        _this$options6$ticks = _this$options6.ticks,\n        align = _this$options6$ticks.align,\n        padding = _this$options6$ticks.padding,\n        position = _this$options6.position;\n      var isRotated = this.labelRotation !== 0;\n      var labelsBelowTicks = position !== 'top' && this.axis === 'x';\n      if (this.isHorizontal()) {\n        var offsetLeft = this.getPixelForTick(0) - this.left;\n        var offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n        var paddingLeft = 0;\n        var paddingRight = 0;\n        if (isRotated) {\n          if (labelsBelowTicks) {\n            paddingLeft = cos * first.width;\n            paddingRight = sin * last.height;\n          } else {\n            paddingLeft = sin * first.height;\n            paddingRight = cos * last.width;\n          }\n        } else if (align === 'start') {\n          paddingRight = last.width;\n        } else if (align === 'end') {\n          paddingLeft = first.width;\n        } else if (align !== 'inner') {\n          paddingLeft = first.width / 2;\n          paddingRight = last.width / 2;\n        }\n        this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n        this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n      } else {\n        var paddingTop = last.height / 2;\n        var paddingBottom = first.height / 2;\n        if (align === 'start') {\n          paddingTop = 0;\n          paddingBottom = first.height;\n        } else if (align === 'end') {\n          paddingTop = last.height;\n          paddingBottom = 0;\n        }\n        this.paddingTop = paddingTop + padding;\n        this.paddingBottom = paddingBottom + padding;\n      }\n    }\n  }, {\n    key: \"_handleMargins\",\n    value: function _handleMargins() {\n      if (this._margins) {\n        this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n        this._margins.top = Math.max(this.paddingTop, this._margins.top);\n        this._margins.right = Math.max(this.paddingRight, this._margins.right);\n        this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n      }\n    }\n  }, {\n    key: \"afterFit\",\n    value: function afterFit() {\n      callback(this.options.afterFit, [this]);\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      var _this$options7 = this.options,\n        axis = _this$options7.axis,\n        position = _this$options7.position;\n      return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n  }, {\n    key: \"isFullSize\",\n    value: function isFullSize() {\n      return this.options.fullSize;\n    }\n  }, {\n    key: \"_convertTicksToLabels\",\n    value: function _convertTicksToLabels(ticks) {\n      this.beforeTickToLabelConversion();\n      this.generateTickLabels(ticks);\n      var i, ilen;\n      for (i = 0, ilen = ticks.length; i < ilen; i++) {\n        if (isNullOrUndef(ticks[i].label)) {\n          ticks.splice(i, 1);\n          ilen--;\n          i--;\n        }\n      }\n      this.afterTickToLabelConversion();\n    }\n  }, {\n    key: \"_getLabelSizes\",\n    value: function _getLabelSizes() {\n      var labelSizes = this._labelSizes;\n      if (!labelSizes) {\n        var sampleSize = this.options.ticks.sampleSize;\n        var ticks = this.ticks;\n        if (sampleSize < ticks.length) {\n          ticks = sample(ticks, sampleSize);\n        }\n        this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n      }\n      return labelSizes;\n    }\n  }, {\n    key: \"_computeLabelSizes\",\n    value: function _computeLabelSizes(ticks, length) {\n      var ctx = this.ctx,\n        caches = this._longestTextCache;\n      var widths = [];\n      var heights = [];\n      var widestLabelSize = 0;\n      var highestLabelSize = 0;\n      var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n      for (i = 0; i < length; ++i) {\n        label = ticks[i].label;\n        tickFont = this._resolveTickFontOptions(i);\n        ctx.font = fontString = tickFont.string;\n        cache = caches[fontString] = caches[fontString] || {\n          data: {},\n          gc: []\n        };\n        lineHeight = tickFont.lineHeight;\n        width = height = 0;\n        if (!isNullOrUndef(label) && !isArray(label)) {\n          width = _measureText(ctx, cache.data, cache.gc, width, label);\n          height = lineHeight;\n        } else if (isArray(label)) {\n          for (j = 0, jlen = label.length; j < jlen; ++j) {\n            nestedLabel = label[j];\n            if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n              width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n              height += lineHeight;\n            }\n          }\n        }\n        widths.push(width);\n        heights.push(height);\n        widestLabelSize = Math.max(width, widestLabelSize);\n        highestLabelSize = Math.max(height, highestLabelSize);\n      }\n      garbageCollect(caches, length);\n      var widest = widths.indexOf(widestLabelSize);\n      var highest = heights.indexOf(highestLabelSize);\n      var valueAt = function valueAt(idx) {\n        return {\n          width: widths[idx] || 0,\n          height: heights[idx] || 0\n        };\n      };\n      return {\n        first: valueAt(0),\n        last: valueAt(length - 1),\n        widest: valueAt(widest),\n        highest: valueAt(highest),\n        widths: widths,\n        heights: heights\n      };\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return value;\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value, index) {\n      return NaN;\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {}\n  }, {\n    key: \"getPixelForTick\",\n    value: function getPixelForTick(index) {\n      var ticks = this.ticks;\n      if (index < 0 || index > ticks.length - 1) {\n        return null;\n      }\n      return this.getPixelForValue(ticks[index].value);\n    }\n  }, {\n    key: \"getPixelForDecimal\",\n    value: function getPixelForDecimal(decimal) {\n      if (this._reversePixels) {\n        decimal = 1 - decimal;\n      }\n      var pixel = this._startPixel + decimal * this._length;\n      return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n  }, {\n    key: \"getDecimalForPixel\",\n    value: function getDecimalForPixel(pixel) {\n      var decimal = (pixel - this._startPixel) / this._length;\n      return this._reversePixels ? 1 - decimal : decimal;\n    }\n  }, {\n    key: \"getBasePixel\",\n    value: function getBasePixel() {\n      return this.getPixelForValue(this.getBaseValue());\n    }\n  }, {\n    key: \"getBaseValue\",\n    value: function getBaseValue() {\n      var min = this.min,\n        max = this.max;\n      return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext(index) {\n      var ticks = this.ticks || [];\n      if (index >= 0 && index < ticks.length) {\n        var tick = ticks[index];\n        return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n      }\n      return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n  }, {\n    key: \"_tickSize\",\n    value: function _tickSize() {\n      var optionTicks = this.options.ticks;\n      var rot = toRadians(this.labelRotation);\n      var cos = Math.abs(Math.cos(rot));\n      var sin = Math.abs(Math.sin(rot));\n      var labelSizes = this._getLabelSizes();\n      var padding = optionTicks.autoSkipPadding || 0;\n      var w = labelSizes ? labelSizes.widest.width + padding : 0;\n      var h = labelSizes ? labelSizes.highest.height + padding : 0;\n      return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n  }, {\n    key: \"_isVisible\",\n    value: function _isVisible() {\n      var display = this.options.display;\n      if (display !== 'auto') {\n        return !!display;\n      }\n      return this.getMatchingVisibleMetas().length > 0;\n    }\n  }, {\n    key: \"_computeGridLineItems\",\n    value: function _computeGridLineItems(chartArea) {\n      var axis = this.axis;\n      var chart = this.chart;\n      var options = this.options;\n      var grid = options.grid,\n        position = options.position,\n        border = options.border;\n      var offset = grid.offset;\n      var isHorizontal = this.isHorizontal();\n      var ticks = this.ticks;\n      var ticksLength = ticks.length + (offset ? 1 : 0);\n      var tl = getTickMarkLength(grid);\n      var items = [];\n      var borderOpts = border.setContext(this.getContext());\n      var axisWidth = borderOpts.display ? borderOpts.width : 0;\n      var axisHalfWidth = axisWidth / 2;\n      var alignBorderValue = function alignBorderValue(pixel) {\n        return _alignPixel(chart, pixel, axisWidth);\n      };\n      var borderValue, i, lineValue, alignedLineValue;\n      var tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n      if (position === 'top') {\n        borderValue = alignBorderValue(this.bottom);\n        ty1 = this.bottom - tl;\n        ty2 = borderValue - axisHalfWidth;\n        y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n        y2 = chartArea.bottom;\n      } else if (position === 'bottom') {\n        borderValue = alignBorderValue(this.top);\n        y1 = chartArea.top;\n        y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n        ty1 = borderValue + axisHalfWidth;\n        ty2 = this.top + tl;\n      } else if (position === 'left') {\n        borderValue = alignBorderValue(this.right);\n        tx1 = this.right - tl;\n        tx2 = borderValue - axisHalfWidth;\n        x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n        x2 = chartArea.right;\n      } else if (position === 'right') {\n        borderValue = alignBorderValue(this.left);\n        x1 = chartArea.left;\n        x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n        tx1 = borderValue + axisHalfWidth;\n        tx2 = this.left + tl;\n      } else if (axis === 'x') {\n        if (position === 'center') {\n          borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n        } else if (isObject(position)) {\n          var positionAxisID = Object.keys(position)[0];\n          var value = position[positionAxisID];\n          borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n        }\n        y1 = chartArea.top;\n        y2 = chartArea.bottom;\n        ty1 = borderValue + axisHalfWidth;\n        ty2 = ty1 + tl;\n      } else if (axis === 'y') {\n        if (position === 'center') {\n          borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n        } else if (isObject(position)) {\n          var positionAxisID1 = Object.keys(position)[0];\n          var value1 = position[positionAxisID1];\n          borderValue = alignBorderValue(this.chart.scales[positionAxisID1].getPixelForValue(value1));\n        }\n        tx1 = borderValue - axisHalfWidth;\n        tx2 = tx1 - tl;\n        x1 = chartArea.left;\n        x2 = chartArea.right;\n      }\n      var limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n      var step = Math.max(1, Math.ceil(ticksLength / limit));\n      for (i = 0; i < ticksLength; i += step) {\n        var context = this.getContext(i);\n        var optsAtIndex = grid.setContext(context);\n        var optsAtIndexBorder = border.setContext(context);\n        var lineWidth = optsAtIndex.lineWidth;\n        var lineColor = optsAtIndex.color;\n        var borderDash = optsAtIndexBorder.dash || [];\n        var borderDashOffset = optsAtIndexBorder.dashOffset;\n        var tickWidth = optsAtIndex.tickWidth;\n        var tickColor = optsAtIndex.tickColor;\n        var tickBorderDash = optsAtIndex.tickBorderDash || [];\n        var tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n        lineValue = getPixelForGridLine(this, i, offset);\n        if (lineValue === undefined) {\n          continue;\n        }\n        alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n        if (isHorizontal) {\n          tx1 = tx2 = x1 = x2 = alignedLineValue;\n        } else {\n          ty1 = ty2 = y1 = y2 = alignedLineValue;\n        }\n        items.push({\n          tx1: tx1,\n          ty1: ty1,\n          tx2: tx2,\n          ty2: ty2,\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          width: lineWidth,\n          color: lineColor,\n          borderDash: borderDash,\n          borderDashOffset: borderDashOffset,\n          tickWidth: tickWidth,\n          tickColor: tickColor,\n          tickBorderDash: tickBorderDash,\n          tickBorderDashOffset: tickBorderDashOffset\n        });\n      }\n      this._ticksLength = ticksLength;\n      this._borderValue = borderValue;\n      return items;\n    }\n  }, {\n    key: \"_computeLabelItems\",\n    value: function _computeLabelItems(chartArea) {\n      var axis = this.axis;\n      var options = this.options;\n      var position = options.position,\n        optionTicks = options.ticks;\n      var isHorizontal = this.isHorizontal();\n      var ticks = this.ticks;\n      var align = optionTicks.align,\n        crossAlign = optionTicks.crossAlign,\n        padding = optionTicks.padding,\n        mirror = optionTicks.mirror;\n      var tl = getTickMarkLength(options.grid);\n      var tickAndPadding = tl + padding;\n      var hTickAndPadding = mirror ? -padding : tickAndPadding;\n      var rotation = -toRadians(this.labelRotation);\n      var items = [];\n      var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n      var textBaseline = 'middle';\n      if (position === 'top') {\n        y = this.bottom - hTickAndPadding;\n        textAlign = this._getXAxisLabelAlignment();\n      } else if (position === 'bottom') {\n        y = this.top + hTickAndPadding;\n        textAlign = this._getXAxisLabelAlignment();\n      } else if (position === 'left') {\n        var ret = this._getYAxisLabelAlignment(tl);\n        textAlign = ret.textAlign;\n        x = ret.x;\n      } else if (position === 'right') {\n        var ret1 = this._getYAxisLabelAlignment(tl);\n        textAlign = ret1.textAlign;\n        x = ret1.x;\n      } else if (axis === 'x') {\n        if (position === 'center') {\n          y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n        } else if (isObject(position)) {\n          var positionAxisID = Object.keys(position)[0];\n          var value = position[positionAxisID];\n          y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n        }\n        textAlign = this._getXAxisLabelAlignment();\n      } else if (axis === 'y') {\n        if (position === 'center') {\n          x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n        } else if (isObject(position)) {\n          var positionAxisID1 = Object.keys(position)[0];\n          var value1 = position[positionAxisID1];\n          x = this.chart.scales[positionAxisID1].getPixelForValue(value1);\n        }\n        textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n      }\n      if (axis === 'y') {\n        if (align === 'start') {\n          textBaseline = 'top';\n        } else if (align === 'end') {\n          textBaseline = 'bottom';\n        }\n      }\n      var labelSizes = this._getLabelSizes();\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        tick = ticks[i];\n        label = tick.label;\n        var optsAtIndex = optionTicks.setContext(this.getContext(i));\n        pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n        font = this._resolveTickFontOptions(i);\n        lineHeight = font.lineHeight;\n        lineCount = isArray(label) ? label.length : 1;\n        var halfCount = lineCount / 2;\n        var color = optsAtIndex.color;\n        var strokeColor = optsAtIndex.textStrokeColor;\n        var strokeWidth = optsAtIndex.textStrokeWidth;\n        var tickTextAlign = textAlign;\n        if (isHorizontal) {\n          x = pixel;\n          if (textAlign === 'inner') {\n            if (i === ilen - 1) {\n              tickTextAlign = !this.options.reverse ? 'right' : 'left';\n            } else if (i === 0) {\n              tickTextAlign = !this.options.reverse ? 'left' : 'right';\n            } else {\n              tickTextAlign = 'center';\n            }\n          }\n          if (position === 'top') {\n            if (crossAlign === 'near' || rotation !== 0) {\n              textOffset = -lineCount * lineHeight + lineHeight / 2;\n            } else if (crossAlign === 'center') {\n              textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n            } else {\n              textOffset = -labelSizes.highest.height + lineHeight / 2;\n            }\n          } else {\n            if (crossAlign === 'near' || rotation !== 0) {\n              textOffset = lineHeight / 2;\n            } else if (crossAlign === 'center') {\n              textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n            } else {\n              textOffset = labelSizes.highest.height - lineCount * lineHeight;\n            }\n          }\n          if (mirror) {\n            textOffset *= -1;\n          }\n          if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n            x += lineHeight / 2 * Math.sin(rotation);\n          }\n        } else {\n          y = pixel;\n          textOffset = (1 - lineCount) * lineHeight / 2;\n        }\n        var backdrop = void 0;\n        if (optsAtIndex.showLabelBackdrop) {\n          var labelPadding = toPadding(optsAtIndex.backdropPadding);\n          var height = labelSizes.heights[i];\n          var width = labelSizes.widths[i];\n          var top = textOffset - labelPadding.top;\n          var left = 0 - labelPadding.left;\n          switch (textBaseline) {\n            case 'middle':\n              top -= height / 2;\n              break;\n            case 'bottom':\n              top -= height;\n              break;\n          }\n          switch (textAlign) {\n            case 'center':\n              left -= width / 2;\n              break;\n            case 'right':\n              left -= width;\n              break;\n          }\n          backdrop = {\n            left: left,\n            top: top,\n            width: width + labelPadding.width,\n            height: height + labelPadding.height,\n            color: optsAtIndex.backdropColor\n          };\n        }\n        items.push({\n          label: label,\n          font: font,\n          textOffset: textOffset,\n          options: {\n            rotation: rotation,\n            color: color,\n            strokeColor: strokeColor,\n            strokeWidth: strokeWidth,\n            textAlign: tickTextAlign,\n            textBaseline: textBaseline,\n            translation: [x, y],\n            backdrop: backdrop\n          }\n        });\n      }\n      return items;\n    }\n  }, {\n    key: \"_getXAxisLabelAlignment\",\n    value: function _getXAxisLabelAlignment() {\n      var _this$options8 = this.options,\n        position = _this$options8.position,\n        ticks = _this$options8.ticks;\n      var rotation = -toRadians(this.labelRotation);\n      if (rotation) {\n        return position === 'top' ? 'left' : 'right';\n      }\n      var align = 'center';\n      if (ticks.align === 'start') {\n        align = 'left';\n      } else if (ticks.align === 'end') {\n        align = 'right';\n      } else if (ticks.align === 'inner') {\n        align = 'inner';\n      }\n      return align;\n    }\n  }, {\n    key: \"_getYAxisLabelAlignment\",\n    value: function _getYAxisLabelAlignment(tl) {\n      var _this$options9 = this.options,\n        position = _this$options9.position,\n        _this$options9$ticks = _this$options9.ticks,\n        crossAlign = _this$options9$ticks.crossAlign,\n        mirror = _this$options9$ticks.mirror,\n        padding = _this$options9$ticks.padding;\n      var labelSizes = this._getLabelSizes();\n      var tickAndPadding = tl + padding;\n      var widest = labelSizes.widest.width;\n      var textAlign;\n      var x;\n      if (position === 'left') {\n        if (mirror) {\n          x = this.right + padding;\n          if (crossAlign === 'near') {\n            textAlign = 'left';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x += widest / 2;\n          } else {\n            textAlign = 'right';\n            x += widest;\n          }\n        } else {\n          x = this.right - tickAndPadding;\n          if (crossAlign === 'near') {\n            textAlign = 'right';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x -= widest / 2;\n          } else {\n            textAlign = 'left';\n            x = this.left;\n          }\n        }\n      } else if (position === 'right') {\n        if (mirror) {\n          x = this.left + padding;\n          if (crossAlign === 'near') {\n            textAlign = 'right';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x -= widest / 2;\n          } else {\n            textAlign = 'left';\n            x -= widest;\n          }\n        } else {\n          x = this.left + tickAndPadding;\n          if (crossAlign === 'near') {\n            textAlign = 'left';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x += widest / 2;\n          } else {\n            textAlign = 'right';\n            x = this.right;\n          }\n        }\n      } else {\n        textAlign = 'right';\n      }\n      return {\n        textAlign: textAlign,\n        x: x\n      };\n    }\n  }, {\n    key: \"_computeLabelArea\",\n    value: function _computeLabelArea() {\n      if (this.options.ticks.mirror) {\n        return;\n      }\n      var chart = this.chart;\n      var position = this.options.position;\n      if (position === 'left' || position === 'right') {\n        return {\n          top: 0,\n          left: this.left,\n          bottom: chart.height,\n          right: this.right\n        };\n      }\n      if (position === 'top' || position === 'bottom') {\n        return {\n          top: this.top,\n          left: 0,\n          bottom: this.bottom,\n          right: chart.width\n        };\n      }\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground() {\n      var ctx = this.ctx,\n        backgroundColor = this.options.backgroundColor,\n        left = this.left,\n        top = this.top,\n        width = this.width,\n        height = this.height;\n      if (backgroundColor) {\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(left, top, width, height);\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"getLineWidthForValue\",\n    value: function getLineWidthForValue(value) {\n      var grid = this.options.grid;\n      if (!this._isVisible() || !grid.display) {\n        return 0;\n      }\n      var ticks = this.ticks;\n      var index = ticks.findIndex(function (t) {\n        return t.value === value;\n      });\n      if (index >= 0) {\n        var opts = grid.setContext(this.getContext(index));\n        return opts.lineWidth;\n      }\n      return 0;\n    }\n  }, {\n    key: \"drawGrid\",\n    value: function drawGrid(chartArea) {\n      var grid = this.options.grid;\n      var ctx = this.ctx;\n      var items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n      var i, ilen;\n      var drawLine = function drawLine(p1, p2, style) {\n        if (!style.width || !style.color) {\n          return;\n        }\n        ctx.save();\n        ctx.lineWidth = style.width;\n        ctx.strokeStyle = style.color;\n        ctx.setLineDash(style.borderDash || []);\n        ctx.lineDashOffset = style.borderDashOffset;\n        ctx.beginPath();\n        ctx.moveTo(p1.x, p1.y);\n        ctx.lineTo(p2.x, p2.y);\n        ctx.stroke();\n        ctx.restore();\n      };\n      if (grid.display) {\n        for (i = 0, ilen = items.length; i < ilen; ++i) {\n          var item = items[i];\n          if (grid.drawOnChartArea) {\n            drawLine({\n              x: item.x1,\n              y: item.y1\n            }, {\n              x: item.x2,\n              y: item.y2\n            }, item);\n          }\n          if (grid.drawTicks) {\n            drawLine({\n              x: item.tx1,\n              y: item.ty1\n            }, {\n              x: item.tx2,\n              y: item.ty2\n            }, {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"drawBorder\",\n    value: function drawBorder() {\n      var chart = this.chart,\n        ctx = this.ctx,\n        _this$options10 = this.options,\n        border = _this$options10.border,\n        grid = _this$options10.grid;\n      var borderOpts = border.setContext(this.getContext());\n      var axisWidth = border.display ? borderOpts.width : 0;\n      if (!axisWidth) {\n        return;\n      }\n      var lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n      var borderValue = this._borderValue;\n      var x1, x2, y1, y2;\n      if (this.isHorizontal()) {\n        x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n        x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n        y1 = y2 = borderValue;\n      } else {\n        y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n        y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n        x1 = x2 = borderValue;\n      }\n      ctx.save();\n      ctx.lineWidth = borderOpts.width;\n      ctx.strokeStyle = borderOpts.color;\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n      ctx.restore();\n    }\n  }, {\n    key: \"drawLabels\",\n    value: function drawLabels(chartArea) {\n      var optionTicks = this.options.ticks;\n      if (!optionTicks.display) {\n        return;\n      }\n      var ctx = this.ctx;\n      var area = this._computeLabelArea();\n      if (area) {\n        clipArea(ctx, area);\n      }\n      var items = this.getLabelItems(chartArea);\n      var _iterator10 = _createForOfIteratorHelper(items),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var item = _step10.value;\n          var renderTextOptions = item.options;\n          var tickFont = item.font;\n          var label = item.label;\n          var y = item.textOffset;\n          renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      if (area) {\n        unclipArea(ctx);\n      }\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle() {\n      var ctx = this.ctx,\n        _this$options11 = this.options,\n        position = _this$options11.position,\n        title = _this$options11.title,\n        reverse = _this$options11.reverse;\n      if (!title.display) {\n        return;\n      }\n      var font = toFont(title.font);\n      var padding = toPadding(title.padding);\n      var align = title.align;\n      var offset = font.lineHeight / 2;\n      if (position === 'bottom' || position === 'center' || isObject(position)) {\n        offset += padding.bottom;\n        if (isArray(title.text)) {\n          offset += font.lineHeight * (title.text.length - 1);\n        }\n      } else {\n        offset += padding.top;\n      }\n      var _titleArgs = titleArgs(this, offset, position, align),\n        titleX = _titleArgs.titleX,\n        titleY = _titleArgs.titleY,\n        maxWidth = _titleArgs.maxWidth,\n        rotation = _titleArgs.rotation;\n      renderText(ctx, title.text, 0, 0, font, {\n        color: title.color,\n        maxWidth: maxWidth,\n        rotation: rotation,\n        textAlign: titleAlign(align, position, reverse),\n        textBaseline: 'middle',\n        translation: [titleX, titleY]\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(chartArea) {\n      if (!this._isVisible()) {\n        return;\n      }\n      this.drawBackground();\n      this.drawGrid(chartArea);\n      this.drawBorder();\n      this.drawTitle();\n      this.drawLabels(chartArea);\n    }\n  }, {\n    key: \"_layers\",\n    value: function _layers() {\n      var _this10 = this;\n      var opts = this.options;\n      var tz = opts.ticks && opts.ticks.z || 0;\n      var gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n      var bz = valueOrDefault(opts.border && opts.border.z, 0);\n      if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n        return [{\n          z: tz,\n          draw: function draw(chartArea) {\n            _this10.draw(chartArea);\n          }\n        }];\n      }\n      return [{\n        z: gz,\n        draw: function draw(chartArea) {\n          _this10.drawBackground();\n          _this10.drawGrid(chartArea);\n          _this10.drawTitle();\n        }\n      }, {\n        z: bz,\n        draw: function draw() {\n          _this10.drawBorder();\n        }\n      }, {\n        z: tz,\n        draw: function draw(chartArea) {\n          _this10.drawLabels(chartArea);\n        }\n      }];\n    }\n  }, {\n    key: \"getMatchingVisibleMetas\",\n    value: function getMatchingVisibleMetas(type) {\n      var metas = this.chart.getSortedVisibleDatasetMetas();\n      var axisID = this.axis + 'AxisID';\n      var result = [];\n      var i, ilen;\n      for (i = 0, ilen = metas.length; i < ilen; ++i) {\n        var meta = metas[i];\n        if (meta[axisID] === this.id && (!type || meta.type === type)) {\n          result.push(meta);\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"_resolveTickFontOptions\",\n    value: function _resolveTickFontOptions(index) {\n      var opts = this.options.ticks.setContext(this.getContext(index));\n      return toFont(opts.font);\n    }\n  }, {\n    key: \"_maxDigits\",\n    value: function _maxDigits() {\n      var fontSize = this._resolveTickFontOptions(0).lineHeight;\n      return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n  }]);\n  return Scale;\n}(Element);\nvar TypedRegistry = /*#__PURE__*/function () {\n  function TypedRegistry(type, scope, override) {\n    _classCallCheck(this, TypedRegistry);\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  _createClass(TypedRegistry, [{\n    key: \"isForType\",\n    value: function isForType(type) {\n      return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n  }, {\n    key: \"register\",\n    value: function register(item) {\n      var proto = Object.getPrototypeOf(item);\n      var parentScope;\n      if (isIChartComponent(proto)) {\n        parentScope = this.register(proto);\n      }\n      var items = this.items;\n      var id = item.id;\n      var scope = this.scope + '.' + id;\n      if (!id) {\n        throw new Error('class does not have id: ' + item);\n      }\n      if (id in items) {\n        return scope;\n      }\n      items[id] = item;\n      registerDefaults(item, scope, parentScope);\n      if (this.override) {\n        defaults.override(item.id, item.overrides);\n      }\n      return scope;\n    }\n  }, {\n    key: \"get\",\n    value: function get(id) {\n      return this.items[id];\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister(item) {\n      var items = this.items;\n      var id = item.id;\n      var scope = this.scope;\n      if (id in items) {\n        delete items[id];\n      }\n      if (scope && id in defaults[scope]) {\n        delete defaults[scope][id];\n        if (this.override) {\n          delete overrides[id];\n        }\n      }\n    }\n  }]);\n  return TypedRegistry;\n}();\nfunction registerDefaults(item, scope, parentScope) {\n  var itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(function (property) {\n    var propertyParts = property.split('.');\n    var sourceName = propertyParts.pop();\n    var sourceScope = [scope].concat(propertyParts).join('.');\n    var parts = routes[property].split('.');\n    var targetName = parts.pop();\n    var targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nvar Registry = /*#__PURE__*/function () {\n  function Registry() {\n    _classCallCheck(this, Registry);\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  _createClass(Registry, [{\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      this._each('register', args);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      this._each('unregister', args);\n    }\n  }, {\n    key: \"addControllers\",\n    value: function addControllers() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      this._each('register', args, this.controllers);\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      this._each('register', args, this.elements);\n    }\n  }, {\n    key: \"addPlugins\",\n    value: function addPlugins() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      this._each('register', args, this.plugins);\n    }\n  }, {\n    key: \"addScales\",\n    value: function addScales() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      this._each('register', args, this.scales);\n    }\n  }, {\n    key: \"getController\",\n    value: function getController(id) {\n      return this._get(id, this.controllers, 'controller');\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(id) {\n      return this._get(id, this.elements, 'element');\n    }\n  }, {\n    key: \"getPlugin\",\n    value: function getPlugin(id) {\n      return this._get(id, this.plugins, 'plugin');\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale(id) {\n      return this._get(id, this.scales, 'scale');\n    }\n  }, {\n    key: \"removeControllers\",\n    value: function removeControllers() {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      this._each('unregister', args, this.controllers);\n    }\n  }, {\n    key: \"removeElements\",\n    value: function removeElements() {\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n      this._each('unregister', args, this.elements);\n    }\n  }, {\n    key: \"removePlugins\",\n    value: function removePlugins() {\n      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        args[_key9] = arguments[_key9];\n      }\n      this._each('unregister', args, this.plugins);\n    }\n  }, {\n    key: \"removeScales\",\n    value: function removeScales() {\n      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        args[_key10] = arguments[_key10];\n      }\n      this._each('unregister', args, this.scales);\n    }\n  }, {\n    key: \"_each\",\n    value: function _each(method, args, typedRegistry) {\n      var _this11 = this;\n      _toConsumableArray(args).forEach(function (arg) {\n        var reg = typedRegistry || _this11._getRegistryForType(arg);\n        if (typedRegistry || reg.isForType(arg) || reg === _this11.plugins && arg.id) {\n          _this11._exec(method, reg, arg);\n        } else {\n          each(arg, function (item) {\n            var itemReg = typedRegistry || _this11._getRegistryForType(item);\n            _this11._exec(method, itemReg, item);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_exec\",\n    value: function _exec(method, registry, component) {\n      var camelMethod = _capitalize(method);\n      callback(component['before' + camelMethod], [], component);\n      registry[method](component);\n      callback(component['after' + camelMethod], [], component);\n    }\n  }, {\n    key: \"_getRegistryForType\",\n    value: function _getRegistryForType(type) {\n      for (var i = 0; i < this._typedRegistries.length; i++) {\n        var reg = this._typedRegistries[i];\n        if (reg.isForType(type)) {\n          return reg;\n        }\n      }\n      return this.plugins;\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(id, typedRegistry, type) {\n      var item = typedRegistry.get(id);\n      if (item === undefined) {\n        throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n      }\n      return item;\n    }\n  }]);\n  return Registry;\n}();\nvar registry = /* #__PURE__ */new Registry();\nvar PluginService = /*#__PURE__*/function () {\n  function PluginService() {\n    _classCallCheck(this, PluginService);\n    this._init = [];\n  }\n  _createClass(PluginService, [{\n    key: \"notify\",\n    value: function notify(chart, hook, args, filter) {\n      if (hook === 'beforeInit') {\n        this._init = this._createDescriptors(chart, true);\n        this._notify(this._init, chart, 'install');\n      }\n      var descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n      var result = this._notify(descriptors, chart, hook, args);\n      if (hook === 'afterDestroy') {\n        this._notify(descriptors, chart, 'stop');\n        this._notify(this._init, chart, 'uninstall');\n      }\n      return result;\n    }\n  }, {\n    key: \"_notify\",\n    value: function _notify(descriptors, chart, hook, args) {\n      args = args || {};\n      var _iterator11 = _createForOfIteratorHelper(descriptors),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var descriptor = _step11.value;\n          var plugin = descriptor.plugin;\n          var method = plugin[hook];\n          var params = [chart, args, descriptor.options];\n          if (callback(method, params, plugin) === false && args.cancelable) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      return true;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate() {\n      if (!isNullOrUndef(this._cache)) {\n        this._oldCache = this._cache;\n        this._cache = undefined;\n      }\n    }\n  }, {\n    key: \"_descriptors\",\n    value: function _descriptors(chart) {\n      if (this._cache) {\n        return this._cache;\n      }\n      var descriptors = this._cache = this._createDescriptors(chart);\n      this._notifyStateChanges(chart);\n      return descriptors;\n    }\n  }, {\n    key: \"_createDescriptors\",\n    value: function _createDescriptors(chart, all) {\n      var config = chart && chart.config;\n      var options = valueOrDefault(config.options && config.options.plugins, {});\n      var plugins = allPlugins(config);\n      return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n  }, {\n    key: \"_notifyStateChanges\",\n    value: function _notifyStateChanges(chart) {\n      var previousDescriptors = this._oldCache || [];\n      var descriptors = this._cache;\n      var diff = function diff(a, b) {\n        return a.filter(function (x) {\n          return !b.some(function (y) {\n            return x.plugin.id === y.plugin.id;\n          });\n        });\n      };\n      this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n      this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n  }]);\n  return PluginService;\n}();\nfunction allPlugins(config) {\n  var localIds = {};\n  var plugins = [];\n  var keys = Object.keys(registry.plugins.items);\n  for (var i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  var local = config.plugins || [];\n  for (var i1 = 0; i1 < local.length; i1++) {\n    var plugin = local[i1];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins: plugins,\n    localIds: localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, _ref2, options, all) {\n  var plugins = _ref2.plugins,\n    localIds = _ref2.localIds;\n  var result = [];\n  var context = chart.getContext();\n  var _iterator12 = _createForOfIteratorHelper(plugins),\n    _step12;\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var plugin = _step12.value;\n      var id = plugin.id;\n      var opts = getOpts(options[id], all);\n      if (opts === null) {\n        continue;\n      }\n      result.push({\n        plugin: plugin,\n        options: pluginOpts(chart.config, {\n          plugin: plugin,\n          local: localIds[id]\n        }, opts, context)\n      });\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n  return result;\n}\nfunction pluginOpts(config, _ref3, opts, context) {\n  var plugin = _ref3.plugin,\n    local = _ref3.local;\n  var keys = config.pluginScopeKeys(plugin);\n  var scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  var datasetDefaults = defaults.datasets[type] || {};\n  var datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  var axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n  id = scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n  if (id) {\n    return id;\n  }\n  throw new Error(\"Cannot determine type of '\".concat(name, \"' axis. Please provide 'axis' or 'position' option.\"));\n}\nfunction mergeScaleConfig(config, options) {\n  var chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  var configScales = options.scales || {};\n  var chartIndexAxis = getIndexAxis(config.type, options);\n  var scales = Object.create(null);\n  Object.keys(configScales).forEach(function (id) {\n    var scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(\"Invalid scale configuration for scale: \".concat(id));\n    }\n    if (scaleConf._proxy) {\n      return console.warn(\"Ignoring resolver passed as options for scale: \".concat(id));\n    }\n    var axis = determineAxis(id, scaleConf);\n    var defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    var defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis: axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(function (dataset) {\n    var type = dataset.type || config.type;\n    var indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    var datasetDefaults = overrides[type] || {};\n    var defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(function (defaultID) {\n      var axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      var id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis: axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(function (key) {\n    var scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  var options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nvar keyCache = new Map();\nvar keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  var keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nvar addIfFound = function addIfFound(set, obj, key) {\n  var opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nvar Config = /*#__PURE__*/function () {\n  function Config(config) {\n    _classCallCheck(this, Config);\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  _createClass(Config, [{\n    key: \"platform\",\n    get: function get() {\n      return this._config.platform;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._config.type;\n    },\n    set: function set(type) {\n      this._config.type = type;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._config.data;\n    },\n    set: function set(data) {\n      this._config.data = initData(data);\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this._config.options;\n    },\n    set: function set(options) {\n      this._config.options = options;\n    }\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      return this._config.plugins;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var config = this._config;\n      this.clearCache();\n      initOptions(config);\n    }\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this._scopeCache.clear();\n      this._resolverCache.clear();\n    }\n  }, {\n    key: \"datasetScopeKeys\",\n    value: function datasetScopeKeys(datasetType) {\n      return cachedKeys(datasetType, function () {\n        return [[\"datasets.\".concat(datasetType), '']];\n      });\n    }\n  }, {\n    key: \"datasetAnimationScopeKeys\",\n    value: function datasetAnimationScopeKeys(datasetType, transition) {\n      return cachedKeys(\"\".concat(datasetType, \".transition.\").concat(transition), function () {\n        return [[\"datasets.\".concat(datasetType, \".transitions.\").concat(transition), \"transitions.\".concat(transition)], [\"datasets.\".concat(datasetType), '']];\n      });\n    }\n  }, {\n    key: \"datasetElementScopeKeys\",\n    value: function datasetElementScopeKeys(datasetType, elementType) {\n      return cachedKeys(\"\".concat(datasetType, \"-\").concat(elementType), function () {\n        return [[\"datasets.\".concat(datasetType, \".elements.\").concat(elementType), \"datasets.\".concat(datasetType), \"elements.\".concat(elementType), '']];\n      });\n    }\n  }, {\n    key: \"pluginScopeKeys\",\n    value: function pluginScopeKeys(plugin) {\n      var id = plugin.id;\n      var type = this.type;\n      return cachedKeys(\"\".concat(type, \"-plugin-\").concat(id), function () {\n        return [[\"plugins.\".concat(id)].concat(_toConsumableArray(plugin.additionalOptionScopes || []))];\n      });\n    }\n  }, {\n    key: \"_cachedScopes\",\n    value: function _cachedScopes(mainScope, resetCache) {\n      var _scopeCache = this._scopeCache;\n      var cache = _scopeCache.get(mainScope);\n      if (!cache || resetCache) {\n        cache = new Map();\n        _scopeCache.set(mainScope, cache);\n      }\n      return cache;\n    }\n  }, {\n    key: \"getOptionScopes\",\n    value: function getOptionScopes(mainScope, keyLists, resetCache) {\n      var options = this.options,\n        type = this.type;\n      var cache = this._cachedScopes(mainScope, resetCache);\n      var cached = cache.get(keyLists);\n      if (cached) {\n        return cached;\n      }\n      var scopes = new Set();\n      keyLists.forEach(function (keys) {\n        if (mainScope) {\n          scopes.add(mainScope);\n          keys.forEach(function (key) {\n            return addIfFound(scopes, mainScope, key);\n          });\n        }\n        keys.forEach(function (key) {\n          return addIfFound(scopes, options, key);\n        });\n        keys.forEach(function (key) {\n          return addIfFound(scopes, overrides[type] || {}, key);\n        });\n        keys.forEach(function (key) {\n          return addIfFound(scopes, defaults, key);\n        });\n        keys.forEach(function (key) {\n          return addIfFound(scopes, descriptors, key);\n        });\n      });\n      var array = Array.from(scopes);\n      if (array.length === 0) {\n        array.push(Object.create(null));\n      }\n      if (keysCached.has(keyLists)) {\n        cache.set(keyLists, array);\n      }\n      return array;\n    }\n  }, {\n    key: \"chartOptionScopes\",\n    value: function chartOptionScopes() {\n      var options = this.options,\n        type = this.type;\n      return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n        type: type\n      }, defaults, descriptors];\n    }\n  }, {\n    key: \"resolveNamedOptions\",\n    value: function resolveNamedOptions(scopes, names, context) {\n      var prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n      var result = {\n        $shared: true\n      };\n      var _getResolver = getResolver(this._resolverCache, scopes, prefixes),\n        resolver = _getResolver.resolver,\n        subPrefixes = _getResolver.subPrefixes;\n      var options = resolver;\n      if (needContext(resolver, names)) {\n        result.$shared = false;\n        context = isFunction(context) ? context() : context;\n        var subResolver = this.createResolver(scopes, context, subPrefixes);\n        options = _attachContext(resolver, context, subResolver);\n      }\n      var _iterator13 = _createForOfIteratorHelper(names),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var prop = _step13.value;\n          result[prop] = options[prop];\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n      return result;\n    }\n  }, {\n    key: \"createResolver\",\n    value: function createResolver(scopes, context) {\n      var prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n      var descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n      var _getResolver2 = getResolver(this._resolverCache, scopes, prefixes),\n        resolver = _getResolver2.resolver;\n      return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n  }]);\n  return Config;\n}();\nfunction getResolver(resolverCache, scopes, prefixes) {\n  var cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  var cacheKey = prefixes.join();\n  var cached = cache.get(cacheKey);\n  if (!cached) {\n    var resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver: resolver,\n      subPrefixes: prefixes.filter(function (p) {\n        return !p.toLowerCase().includes('hover');\n      })\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nvar hasFunction = function hasFunction(value) {\n  return isObject(value) && Object.getOwnPropertyNames(value).reduce(function (acc, key) {\n    return acc || isFunction(value[key]);\n  }, false);\n};\nfunction needContext(proxy, names) {\n  var _descriptors2 = _descriptors(proxy),\n    isScriptable = _descriptors2.isScriptable,\n    isIndexable = _descriptors2.isIndexable;\n  var _iterator14 = _createForOfIteratorHelper(names),\n    _step14;\n  try {\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      var prop = _step14.value;\n      var scriptable = isScriptable(prop);\n      var indexable = isIndexable(prop);\n      var value = (indexable || scriptable) && proxy[prop];\n      if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n  return false;\n}\nvar version = \"4.1.0\";\nvar KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  var chart = context.chart;\n  var animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  var chart = context.chart;\n  var animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nvar instances = {};\nvar getChart = function getChart(key) {\n  var canvas = getCanvas(key);\n  return Object.values(instances).filter(function (c) {\n    return c.canvas === canvas;\n  }).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  var keys = Object.keys(obj);\n  for (var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++) {\n    var key = _keys[_i2];\n    var intKey = +key;\n    if (intKey >= start) {\n      var value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nfunction getDatasetArea(meta) {\n  var xScale = meta.xScale,\n    yScale = meta.yScale;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\nvar Chart = /*#__PURE__*/function () {\n  function Chart(item, userConfig) {\n    var _this12 = this;\n    _classCallCheck(this, Chart);\n    var config = this.config = new Config(userConfig);\n    var initialCanvas = getCanvas(item);\n    var existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    var options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    var context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    var canvas = context && context.canvas;\n    var height = canvas && canvas.height;\n    var width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(function (mode) {\n      return _this12.update(mode);\n    }, options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  _createClass(Chart, [{\n    key: \"aspectRatio\",\n    get: function get() {\n      var _this$options12 = this.options,\n        aspectRatio = _this$options12.aspectRatio,\n        maintainAspectRatio = _this$options12.maintainAspectRatio,\n        width = this.width,\n        height = this.height,\n        _aspectRatio = this._aspectRatio;\n      if (!isNullOrUndef(aspectRatio)) {\n        return aspectRatio;\n      }\n      if (maintainAspectRatio && _aspectRatio) {\n        return _aspectRatio;\n      }\n      return height ? width / height : null;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this.config.data;\n    },\n    set: function set(data) {\n      this.config.data = data;\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this._options;\n    },\n    set: function set(options) {\n      this.config.options = options;\n    }\n  }, {\n    key: \"registry\",\n    get: function get() {\n      return registry;\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      this.notifyPlugins('beforeInit');\n      if (this.options.responsive) {\n        this.resize();\n      } else {\n        retinaScale(this, this.options.devicePixelRatio);\n      }\n      this.bindEvents();\n      this.notifyPlugins('afterInit');\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      clearCanvas(this.canvas, this.ctx);\n      return this;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      animator.stop(this);\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      if (!animator.running(this)) {\n        this._resize(width, height);\n      } else {\n        this._resizeBeforeDraw = {\n          width: width,\n          height: height\n        };\n      }\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(width, height) {\n      var options = this.options;\n      var canvas = this.canvas;\n      var aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n      var newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n      var newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n      var mode = this.width ? 'resize' : 'attach';\n      this.width = newSize.width;\n      this.height = newSize.height;\n      this._aspectRatio = this.aspectRatio;\n      if (!retinaScale(this, newRatio, true)) {\n        return;\n      }\n      this.notifyPlugins('resize', {\n        size: newSize\n      });\n      callback(options.onResize, [this, newSize], this);\n      if (this.attached) {\n        if (this._doResize(mode)) {\n          this.render();\n        }\n      }\n    }\n  }, {\n    key: \"ensureScalesHaveIDs\",\n    value: function ensureScalesHaveIDs() {\n      var options = this.options;\n      var scalesOptions = options.scales || {};\n      each(scalesOptions, function (axisOptions, axisID) {\n        axisOptions.id = axisID;\n      });\n    }\n  }, {\n    key: \"buildOrUpdateScales\",\n    value: function buildOrUpdateScales() {\n      var _this13 = this;\n      var options = this.options;\n      var scaleOpts = options.scales;\n      var scales = this.scales;\n      var updated = Object.keys(scales).reduce(function (obj, id) {\n        obj[id] = false;\n        return obj;\n      }, {});\n      var items = [];\n      if (scaleOpts) {\n        items = items.concat(Object.keys(scaleOpts).map(function (id) {\n          var scaleOptions = scaleOpts[id];\n          var axis = determineAxis(id, scaleOptions);\n          var isRadial = axis === 'r';\n          var isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        }));\n      }\n      each(items, function (item) {\n        var scaleOptions = item.options;\n        var id = scaleOptions.id;\n        var axis = determineAxis(id, scaleOptions);\n        var scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n        if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n          scaleOptions.position = item.dposition;\n        }\n        updated[id] = true;\n        var scale = null;\n        if (id in scales && scales[id].type === scaleType) {\n          scale = scales[id];\n        } else {\n          var scaleClass = registry.getScale(scaleType);\n          scale = new scaleClass({\n            id: id,\n            type: scaleType,\n            ctx: _this13.ctx,\n            chart: _this13\n          });\n          scales[scale.id] = scale;\n        }\n        scale.init(scaleOptions, options);\n      });\n      each(updated, function (hasUpdated, id) {\n        if (!hasUpdated) {\n          delete scales[id];\n        }\n      });\n      each(scales, function (scale) {\n        layouts.configure(_this13, scale, scale.options);\n        layouts.addBox(_this13, scale);\n      });\n    }\n  }, {\n    key: \"_updateMetasets\",\n    value: function _updateMetasets() {\n      var metasets = this._metasets;\n      var numData = this.data.datasets.length;\n      var numMeta = metasets.length;\n      metasets.sort(function (a, b) {\n        return a.index - b.index;\n      });\n      if (numMeta > numData) {\n        for (var i = numData; i < numMeta; ++i) {\n          this._destroyDatasetMeta(i);\n        }\n        metasets.splice(numData, numMeta - numData);\n      }\n      this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n  }, {\n    key: \"_removeUnreferencedMetasets\",\n    value: function _removeUnreferencedMetasets() {\n      var _this14 = this;\n      var metasets = this._metasets,\n        datasets = this.data.datasets;\n      if (metasets.length > datasets.length) {\n        delete this._stacks;\n      }\n      metasets.forEach(function (meta, index) {\n        if (datasets.filter(function (x) {\n          return x === meta._dataset;\n        }).length === 0) {\n          _this14._destroyDatasetMeta(index);\n        }\n      });\n    }\n  }, {\n    key: \"buildOrUpdateControllers\",\n    value: function buildOrUpdateControllers() {\n      var newControllers = [];\n      var datasets = this.data.datasets;\n      var i, ilen;\n      this._removeUnreferencedMetasets();\n      for (i = 0, ilen = datasets.length; i < ilen; i++) {\n        var dataset = datasets[i];\n        var meta = this.getDatasetMeta(i);\n        var type = dataset.type || this.config.type;\n        if (meta.type && meta.type !== type) {\n          this._destroyDatasetMeta(i);\n          meta = this.getDatasetMeta(i);\n        }\n        meta.type = type;\n        meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n        meta.order = dataset.order || 0;\n        meta.index = i;\n        meta.label = '' + dataset.label;\n        meta.visible = this.isDatasetVisible(i);\n        if (meta.controller) {\n          meta.controller.updateIndex(i);\n          meta.controller.linkScales();\n        } else {\n          var ControllerClass = registry.getController(type);\n          var _defaults$datasets$ty = defaults.datasets[type],\n            datasetElementType = _defaults$datasets$ty.datasetElementType,\n            dataElementType = _defaults$datasets$ty.dataElementType;\n          Object.assign(ControllerClass, {\n            dataElementType: registry.getElement(dataElementType),\n            datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n          });\n          meta.controller = new ControllerClass(this, i);\n          newControllers.push(meta.controller);\n        }\n      }\n      this._updateMetasets();\n      return newControllers;\n    }\n  }, {\n    key: \"_resetElements\",\n    value: function _resetElements() {\n      var _this15 = this;\n      each(this.data.datasets, function (dataset, datasetIndex) {\n        _this15.getDatasetMeta(datasetIndex).controller.reset();\n      }, this);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._resetElements();\n      this.notifyPlugins('reset');\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var config = this.config;\n      config.update();\n      var options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n      var animsDisabled = this._animationsDisabled = !options.animation;\n      this._updateScales();\n      this._checkEventBindings();\n      this._updateHiddenIndices();\n      this._plugins.invalidate();\n      if (this.notifyPlugins('beforeUpdate', {\n        mode: mode,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      var newControllers = this.buildOrUpdateControllers();\n      this.notifyPlugins('beforeElementsUpdate');\n      var minPadding = 0;\n      for (var i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n        var _this$getDatasetMeta = this.getDatasetMeta(i),\n          controller = _this$getDatasetMeta.controller;\n        var reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n        controller.buildOrUpdateElements(reset);\n        minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n      }\n      minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n      this._updateLayout(minPadding);\n      if (!animsDisabled) {\n        each(newControllers, function (controller) {\n          controller.reset();\n        });\n      }\n      this._updateDatasets(mode);\n      this.notifyPlugins('afterUpdate', {\n        mode: mode\n      });\n      this._layers.sort(compare2Level('z', '_idx'));\n      var _active = this._active,\n        _lastEvent = this._lastEvent;\n      if (_lastEvent) {\n        this._eventHandler(_lastEvent, true);\n      } else if (_active.length) {\n        this._updateHoverStyles(_active, _active, true);\n      }\n      this.render();\n    }\n  }, {\n    key: \"_updateScales\",\n    value: function _updateScales() {\n      var _this16 = this;\n      each(this.scales, function (scale) {\n        layouts.removeBox(_this16, scale);\n      });\n      this.ensureScalesHaveIDs();\n      this.buildOrUpdateScales();\n    }\n  }, {\n    key: \"_checkEventBindings\",\n    value: function _checkEventBindings() {\n      var options = this.options;\n      var existingEvents = new Set(Object.keys(this._listeners));\n      var newEvents = new Set(options.events);\n      if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n        this.unbindEvents();\n        this.bindEvents();\n      }\n    }\n  }, {\n    key: \"_updateHiddenIndices\",\n    value: function _updateHiddenIndices() {\n      var _hiddenIndices = this._hiddenIndices;\n      var changes = this._getUniformDataChanges() || [];\n      var _iterator15 = _createForOfIteratorHelper(changes),\n        _step15;\n      try {\n        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n          var _step15$value = _step15.value,\n            method = _step15$value.method,\n            start = _step15$value.start,\n            count = _step15$value.count;\n          var move = method === '_removeElements' ? -count : count;\n          moveNumericKeys(_hiddenIndices, start, move);\n        }\n      } catch (err) {\n        _iterator15.e(err);\n      } finally {\n        _iterator15.f();\n      }\n    }\n  }, {\n    key: \"_getUniformDataChanges\",\n    value: function _getUniformDataChanges() {\n      var _dataChanges = this._dataChanges;\n      if (!_dataChanges || !_dataChanges.length) {\n        return;\n      }\n      this._dataChanges = [];\n      var datasetCount = this.data.datasets.length;\n      var makeSet = function makeSet(idx) {\n        return new Set(_dataChanges.filter(function (c) {\n          return c[0] === idx;\n        }).map(function (c, i) {\n          return i + ',' + c.splice(1).join(',');\n        }));\n      };\n      var changeSet = makeSet(0);\n      for (var i = 1; i < datasetCount; i++) {\n        if (!setsEqual(changeSet, makeSet(i))) {\n          return;\n        }\n      }\n      return Array.from(changeSet).map(function (c) {\n        return c.split(',');\n      }).map(function (a) {\n        return {\n          method: a[1],\n          start: +a[2],\n          count: +a[3]\n        };\n      });\n    }\n  }, {\n    key: \"_updateLayout\",\n    value: function _updateLayout(minPadding) {\n      var _this17 = this;\n      if (this.notifyPlugins('beforeLayout', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      layouts.update(this, this.width, this.height, minPadding);\n      var area = this.chartArea;\n      var noArea = area.width <= 0 || area.height <= 0;\n      this._layers = [];\n      each(this.boxes, function (box) {\n        var _this17$_layers;\n        if (noArea && box.position === 'chartArea') {\n          return;\n        }\n        if (box.configure) {\n          box.configure();\n        }\n        (_this17$_layers = _this17._layers).push.apply(_this17$_layers, _toConsumableArray(box._layers()));\n      }, this);\n      this._layers.forEach(function (item, index) {\n        item._idx = index;\n      });\n      this.notifyPlugins('afterLayout');\n    }\n  }, {\n    key: \"_updateDatasets\",\n    value: function _updateDatasets(mode) {\n      if (this.notifyPlugins('beforeDatasetsUpdate', {\n        mode: mode,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n        this.getDatasetMeta(i).controller.configure();\n      }\n      for (var i1 = 0, ilen1 = this.data.datasets.length; i1 < ilen1; ++i1) {\n        this._updateDataset(i1, isFunction(mode) ? mode({\n          datasetIndex: i1\n        }) : mode);\n      }\n      this.notifyPlugins('afterDatasetsUpdate', {\n        mode: mode\n      });\n    }\n  }, {\n    key: \"_updateDataset\",\n    value: function _updateDataset(index, mode) {\n      var meta = this.getDatasetMeta(index);\n      var args = {\n        meta: meta,\n        index: index,\n        mode: mode,\n        cancelable: true\n      };\n      if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n        return;\n      }\n      meta.controller._update(mode);\n      args.cancelable = false;\n      this.notifyPlugins('afterDatasetUpdate', args);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.notifyPlugins('beforeRender', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      if (animator.has(this)) {\n        if (this.attached && !animator.running(this)) {\n          animator.start(this);\n        }\n      } else {\n        this.draw();\n        onAnimationsComplete({\n          chart: this\n        });\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var i;\n      if (this._resizeBeforeDraw) {\n        var _this$_resizeBeforeDr = this._resizeBeforeDraw,\n          width = _this$_resizeBeforeDr.width,\n          height = _this$_resizeBeforeDr.height;\n        this._resize(width, height);\n        this._resizeBeforeDraw = null;\n      }\n      this.clear();\n      if (this.width <= 0 || this.height <= 0) {\n        return;\n      }\n      if (this.notifyPlugins('beforeDraw', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      var layers = this._layers;\n      for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n        layers[i].draw(this.chartArea);\n      }\n      this._drawDatasets();\n      for (; i < layers.length; ++i) {\n        layers[i].draw(this.chartArea);\n      }\n      this.notifyPlugins('afterDraw');\n    }\n  }, {\n    key: \"_getSortedDatasetMetas\",\n    value: function _getSortedDatasetMetas(filterVisible) {\n      var metasets = this._sortedMetasets;\n      var result = [];\n      var i, ilen;\n      for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n        var meta = metasets[i];\n        if (!filterVisible || meta.visible) {\n          result.push(meta);\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"getSortedVisibleDatasetMetas\",\n    value: function getSortedVisibleDatasetMetas() {\n      return this._getSortedDatasetMetas(true);\n    }\n  }, {\n    key: \"_drawDatasets\",\n    value: function _drawDatasets() {\n      if (this.notifyPlugins('beforeDatasetsDraw', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      var metasets = this.getSortedVisibleDatasetMetas();\n      for (var i = metasets.length - 1; i >= 0; --i) {\n        this._drawDataset(metasets[i]);\n      }\n      this.notifyPlugins('afterDatasetsDraw');\n    }\n  }, {\n    key: \"_drawDataset\",\n    value: function _drawDataset(meta) {\n      var ctx = this.ctx;\n      var clip = meta._clip;\n      var useClip = !clip.disabled;\n      var area = getDatasetArea(meta) || this.chartArea;\n      var args = {\n        meta: meta,\n        index: meta.index,\n        cancelable: true\n      };\n      if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n        return;\n      }\n      if (useClip) {\n        clipArea(ctx, {\n          left: clip.left === false ? 0 : area.left - clip.left,\n          right: clip.right === false ? this.width : area.right + clip.right,\n          top: clip.top === false ? 0 : area.top - clip.top,\n          bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n        });\n      }\n      meta.controller.draw();\n      if (useClip) {\n        unclipArea(ctx);\n      }\n      args.cancelable = false;\n      this.notifyPlugins('afterDatasetDraw', args);\n    }\n  }, {\n    key: \"isPointInArea\",\n    value: function isPointInArea(point) {\n      return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n  }, {\n    key: \"getElementsAtEventForMode\",\n    value: function getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n      var method = Interaction.modes[mode];\n      if (typeof method === 'function') {\n        return method(this, e, options, useFinalPosition);\n      }\n      return [];\n    }\n  }, {\n    key: \"getDatasetMeta\",\n    value: function getDatasetMeta(datasetIndex) {\n      var dataset = this.data.datasets[datasetIndex];\n      var metasets = this._metasets;\n      var meta = metasets.filter(function (x) {\n        return x && x._dataset === dataset;\n      }).pop();\n      if (!meta) {\n        meta = {\n          type: null,\n          data: [],\n          dataset: null,\n          controller: null,\n          hidden: null,\n          xAxisID: null,\n          yAxisID: null,\n          order: dataset && dataset.order || 0,\n          index: datasetIndex,\n          _dataset: dataset,\n          _parsed: [],\n          _sorted: false\n        };\n        metasets.push(meta);\n      }\n      return meta;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.$context || (this.$context = createContext(null, {\n        chart: this,\n        type: 'chart'\n      }));\n    }\n  }, {\n    key: \"getVisibleDatasetCount\",\n    value: function getVisibleDatasetCount() {\n      return this.getSortedVisibleDatasetMetas().length;\n    }\n  }, {\n    key: \"isDatasetVisible\",\n    value: function isDatasetVisible(datasetIndex) {\n      var dataset = this.data.datasets[datasetIndex];\n      if (!dataset) {\n        return false;\n      }\n      var meta = this.getDatasetMeta(datasetIndex);\n      return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n  }, {\n    key: \"setDatasetVisibility\",\n    value: function setDatasetVisibility(datasetIndex, visible) {\n      var meta = this.getDatasetMeta(datasetIndex);\n      meta.hidden = !visible;\n    }\n  }, {\n    key: \"toggleDataVisibility\",\n    value: function toggleDataVisibility(index) {\n      this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n  }, {\n    key: \"getDataVisibility\",\n    value: function getDataVisibility(index) {\n      return !this._hiddenIndices[index];\n    }\n  }, {\n    key: \"_updateVisibility\",\n    value: function _updateVisibility(datasetIndex, dataIndex, visible) {\n      var mode = visible ? 'show' : 'hide';\n      var meta = this.getDatasetMeta(datasetIndex);\n      var anims = meta.controller._resolveAnimations(undefined, mode);\n      if (defined(dataIndex)) {\n        meta.data[dataIndex].hidden = !visible;\n        this.update();\n      } else {\n        this.setDatasetVisibility(datasetIndex, visible);\n        anims.update(meta, {\n          visible: visible\n        });\n        this.update(function (ctx) {\n          return ctx.datasetIndex === datasetIndex ? mode : undefined;\n        });\n      }\n    }\n  }, {\n    key: \"hide\",\n    value: function hide(datasetIndex, dataIndex) {\n      this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n  }, {\n    key: \"show\",\n    value: function show(datasetIndex, dataIndex) {\n      this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n  }, {\n    key: \"_destroyDatasetMeta\",\n    value: function _destroyDatasetMeta(datasetIndex) {\n      var meta = this._metasets[datasetIndex];\n      if (meta && meta.controller) {\n        meta.controller._destroy();\n      }\n      delete this._metasets[datasetIndex];\n    }\n  }, {\n    key: \"_stop\",\n    value: function _stop() {\n      var i, ilen;\n      this.stop();\n      animator.remove(this);\n      for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.notifyPlugins('beforeDestroy');\n      var canvas = this.canvas,\n        ctx = this.ctx;\n      this._stop();\n      this.config.clearCache();\n      if (canvas) {\n        this.unbindEvents();\n        clearCanvas(canvas, ctx);\n        this.platform.releaseContext(ctx);\n        this.canvas = null;\n        this.ctx = null;\n      }\n      delete instances[this.id];\n      this.notifyPlugins('afterDestroy');\n    }\n  }, {\n    key: \"toBase64Image\",\n    value: function toBase64Image() {\n      var _this$canvas;\n      return (_this$canvas = this.canvas).toDataURL.apply(_this$canvas, arguments);\n    }\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      this.bindUserEvents();\n      if (this.options.responsive) {\n        this.bindResponsiveEvents();\n      } else {\n        this.attached = true;\n      }\n    }\n  }, {\n    key: \"bindUserEvents\",\n    value: function bindUserEvents() {\n      var _this18 = this;\n      var listeners = this._listeners;\n      var platform = this.platform;\n      var _add = function _add(type, listener) {\n        platform.addEventListener(_this18, type, listener);\n        listeners[type] = listener;\n      };\n      var listener = function listener(e, x, y) {\n        e.offsetX = x;\n        e.offsetY = y;\n        _this18._eventHandler(e);\n      };\n      each(this.options.events, function (type) {\n        return _add(type, listener);\n      });\n    }\n  }, {\n    key: \"bindResponsiveEvents\",\n    value: function bindResponsiveEvents() {\n      var _this19 = this;\n      if (!this._responsiveListeners) {\n        this._responsiveListeners = {};\n      }\n      var listeners = this._responsiveListeners;\n      var platform = this.platform;\n      var _add = function _add(type, listener) {\n        platform.addEventListener(_this19, type, listener);\n        listeners[type] = listener;\n      };\n      var _remove = function _remove(type, listener) {\n        if (listeners[type]) {\n          platform.removeEventListener(_this19, type, listener);\n          delete listeners[type];\n        }\n      };\n      var listener = function listener(width, height) {\n        if (_this19.canvas) {\n          _this19.resize(width, height);\n        }\n      };\n      var detached;\n      var attached = function attached() {\n        _remove('attach', attached);\n        _this19.attached = true;\n        _this19.resize();\n        _add('resize', listener);\n        _add('detach', detached);\n      };\n      detached = function detached() {\n        _this19.attached = false;\n        _remove('resize', listener);\n        _this19._stop();\n        _this19._resize(0, 0);\n        _add('attach', attached);\n      };\n      if (platform.isAttached(this.canvas)) {\n        attached();\n      } else {\n        detached();\n      }\n    }\n  }, {\n    key: \"unbindEvents\",\n    value: function unbindEvents() {\n      var _this20 = this;\n      each(this._listeners, function (listener, type) {\n        _this20.platform.removeEventListener(_this20, type, listener);\n      });\n      this._listeners = {};\n      each(this._responsiveListeners, function (listener, type) {\n        _this20.platform.removeEventListener(_this20, type, listener);\n      });\n      this._responsiveListeners = undefined;\n    }\n  }, {\n    key: \"updateHoverStyle\",\n    value: function updateHoverStyle(items, mode, enabled) {\n      var prefix = enabled ? 'set' : 'remove';\n      var meta, item, i, ilen;\n      if (mode === 'dataset') {\n        meta = this.getDatasetMeta(items[0].datasetIndex);\n        meta.controller['_' + prefix + 'DatasetHoverStyle']();\n      }\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        item = items[i];\n        var controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n        if (controller) {\n          controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n        }\n      }\n    }\n  }, {\n    key: \"getActiveElements\",\n    value: function getActiveElements() {\n      return this._active || [];\n    }\n  }, {\n    key: \"setActiveElements\",\n    value: function setActiveElements(activeElements) {\n      var _this21 = this;\n      var lastActive = this._active || [];\n      var active = activeElements.map(function (_ref4) {\n        var datasetIndex = _ref4.datasetIndex,\n          index = _ref4.index;\n        var meta = _this21.getDatasetMeta(datasetIndex);\n        if (!meta) {\n          throw new Error('No dataset found at index ' + datasetIndex);\n        }\n        return {\n          datasetIndex: datasetIndex,\n          element: meta.data[index],\n          index: index\n        };\n      });\n      var changed = !_elementsEqual(active, lastActive);\n      if (changed) {\n        this._active = active;\n        this._lastEvent = null;\n        this._updateHoverStyles(active, lastActive);\n      }\n    }\n  }, {\n    key: \"notifyPlugins\",\n    value: function notifyPlugins(hook, args, filter) {\n      return this._plugins.notify(this, hook, args, filter);\n    }\n  }, {\n    key: \"isPluginEnabled\",\n    value: function isPluginEnabled(pluginId) {\n      return this._plugins._cache.filter(function (p) {\n        return p.plugin.id === pluginId;\n      }).length === 1;\n    }\n  }, {\n    key: \"_updateHoverStyles\",\n    value: function _updateHoverStyles(active, lastActive, replay) {\n      var hoverOptions = this.options.hover;\n      var diff = function diff(a, b) {\n        return a.filter(function (x) {\n          return !b.some(function (y) {\n            return x.datasetIndex === y.datasetIndex && x.index === y.index;\n          });\n        });\n      };\n      var deactivated = diff(lastActive, active);\n      var activated = replay ? active : diff(active, lastActive);\n      if (deactivated.length) {\n        this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n      }\n      if (activated.length && hoverOptions.mode) {\n        this.updateHoverStyle(activated, hoverOptions.mode, true);\n      }\n    }\n  }, {\n    key: \"_eventHandler\",\n    value: function _eventHandler(e, replay) {\n      var _this22 = this;\n      var args = {\n        event: e,\n        replay: replay,\n        cancelable: true,\n        inChartArea: this.isPointInArea(e)\n      };\n      var eventFilter = function eventFilter(plugin) {\n        return (plugin.options.events || _this22.options.events).includes(e.native.type);\n      };\n      if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n        return;\n      }\n      var changed = this._handleEvent(e, replay, args.inChartArea);\n      args.cancelable = false;\n      this.notifyPlugins('afterEvent', args, eventFilter);\n      if (changed || args.changed) {\n        this.render();\n      }\n      return this;\n    }\n  }, {\n    key: \"_handleEvent\",\n    value: function _handleEvent(e, replay, inChartArea) {\n      var _this$_active = this._active,\n        lastActive = _this$_active === void 0 ? [] : _this$_active,\n        options = this.options;\n      var useFinalPosition = replay;\n      var active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n      var isClick = _isClickEvent(e);\n      var lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n      if (inChartArea) {\n        this._lastEvent = null;\n        callback(options.onHover, [e, active, this], this);\n        if (isClick) {\n          callback(options.onClick, [e, active, this], this);\n        }\n      }\n      var changed = !_elementsEqual(active, lastActive);\n      if (changed || replay) {\n        this._active = active;\n        this._updateHoverStyles(active, lastActive, replay);\n      }\n      this._lastEvent = lastEvent;\n      return changed;\n    }\n  }, {\n    key: \"_getActiveElements\",\n    value: function _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n      if (e.type === 'mouseout') {\n        return [];\n      }\n      if (!inChartArea) {\n        return lastActive;\n      }\n      var hoverOptions = this.options.hover;\n      return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n  }], [{\n    key: \"register\",\n    value: function register() {\n      registry.add.apply(registry, arguments);\n      invalidatePlugins();\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister() {\n      registry.remove.apply(registry, arguments);\n      invalidatePlugins();\n    }\n  }]);\n  return Chart;\n}();\n_defineProperty(Chart, \"defaults\", defaults);\n_defineProperty(Chart, \"instances\", instances);\n_defineProperty(Chart, \"overrides\", overrides);\n_defineProperty(Chart, \"registry\", registry);\n_defineProperty(Chart, \"version\", version);\n_defineProperty(Chart, \"getChart\", getChart);\nfunction invalidatePlugins() {\n  return each(Chart.instances, function (chart) {\n    return chart._plugins.invalidate();\n  });\n}\nfunction clipArc(ctx, element, endAngle) {\n  var startAngle = element.startAngle,\n    pixelMargin = element.pixelMargin,\n    x = element.x,\n    y = element.y,\n    outerRadius = element.outerRadius,\n    innerRadius = element.innerRadius;\n  var angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  var o = toRadiusCorners(arc.options.borderRadius);\n  var halfThickness = (outerRadius - innerRadius) / 2;\n  var innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  var computeOuterLimit = function computeOuterLimit(val) {\n    var outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  var x = element.x,\n    y = element.y,\n    start = element.startAngle,\n    pixelMargin = element.pixelMargin,\n    innerR = element.innerRadius;\n  var outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  var innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  var spacingOffset = 0;\n  var alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    var noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    var noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    var avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    var adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  var beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  var angleOffset = (alpha - beta) / 2;\n  var startAngle = start + angleOffset + spacingOffset;\n  var endAngle = end - angleOffset - spacingOffset;\n  var _parseBorderRadius$ = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle),\n    outerStart = _parseBorderRadius$.outerStart,\n    outerEnd = _parseBorderRadius$.outerEnd,\n    innerStart = _parseBorderRadius$.innerStart,\n    innerEnd = _parseBorderRadius$.innerEnd;\n  var outerStartAdjustedRadius = outerRadius - outerStart;\n  var outerEndAdjustedRadius = outerRadius - outerEnd;\n  var outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  var outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  var innerStartAdjustedRadius = innerRadius + innerStart;\n  var innerEndAdjustedRadius = innerRadius + innerEnd;\n  var innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  var innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    var outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      var pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    // The line from point 3 to point 4\n    var p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      var pCenter1 = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter1.x, pCenter1.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    var innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      var pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter2.x, pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    // The line from point 7 to point 8\n    var p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      var pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter3.x, pCenter3.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    var outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    var outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    var outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    var outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  var fullCircles = element.fullCircles,\n    startAngle = element.startAngle,\n    circumference = element.circumference;\n  var endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (var i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  var fullCircles = element.fullCircles,\n    startAngle = element.startAngle,\n    circumference = element.circumference,\n    options = element.options;\n  var borderWidth = options.borderWidth,\n    borderJoinStyle = options.borderJoinStyle;\n  var inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  var endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (var i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nvar ArcElement = /*#__PURE__*/function (_Element2) {\n  _inherits(ArcElement, _Element2);\n  var _super12 = _createSuper(ArcElement);\n  function ArcElement(cfg) {\n    var _this23;\n    _classCallCheck(this, ArcElement);\n    _this23 = _super12.call(this);\n    _this23.options = undefined;\n    _this23.circumference = undefined;\n    _this23.startAngle = undefined;\n    _this23.endAngle = undefined;\n    _this23.innerRadius = undefined;\n    _this23.outerRadius = undefined;\n    _this23.pixelMargin = 0;\n    _this23.fullCircles = 0;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this23), cfg);\n    }\n    return _this23;\n  }\n  _createClass(ArcElement, [{\n    key: \"inRange\",\n    value: function inRange(chartX, chartY, useFinalPosition) {\n      var point = this.getProps(['x', 'y'], useFinalPosition);\n      var _getAngleFromPoint2 = getAngleFromPoint(point, {\n          x: chartX,\n          y: chartY\n        }),\n        angle = _getAngleFromPoint2.angle,\n        distance = _getAngleFromPoint2.distance;\n      var _this$getProps2 = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition),\n        startAngle = _this$getProps2.startAngle,\n        endAngle = _this$getProps2.endAngle,\n        innerRadius = _this$getProps2.innerRadius,\n        outerRadius = _this$getProps2.outerRadius,\n        circumference = _this$getProps2.circumference;\n      var rAdjust = this.options.spacing / 2;\n      var _circumference = valueOrDefault(circumference, endAngle - startAngle);\n      var betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n      var withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n      return betweenAngles && withinRadius;\n    }\n  }, {\n    key: \"getCenterPoint\",\n    value: function getCenterPoint(useFinalPosition) {\n      var _this$getProps3 = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition),\n        x = _this$getProps3.x,\n        y = _this$getProps3.y,\n        startAngle = _this$getProps3.startAngle,\n        endAngle = _this$getProps3.endAngle,\n        innerRadius = _this$getProps3.innerRadius,\n        outerRadius = _this$getProps3.outerRadius;\n      var _this$options13 = this.options,\n        offset = _this$options13.offset,\n        spacing = _this$options13.spacing;\n      var halfAngle = (startAngle + endAngle) / 2;\n      var halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n      return {\n        x: x + Math.cos(halfAngle) * halfRadius,\n        y: y + Math.sin(halfAngle) * halfRadius\n      };\n    }\n  }, {\n    key: \"tooltipPosition\",\n    value: function tooltipPosition(useFinalPosition) {\n      return this.getCenterPoint(useFinalPosition);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var options = this.options,\n        circumference = this.circumference;\n      var offset = (options.offset || 0) / 4;\n      var spacing = (options.spacing || 0) / 2;\n      var circular = options.circular;\n      this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n      this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n      if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n        return;\n      }\n      ctx.save();\n      var halfAngle = (this.startAngle + this.endAngle) / 2;\n      ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n      var fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n      var radiusOffset = offset * fix;\n      ctx.fillStyle = options.backgroundColor;\n      ctx.strokeStyle = options.borderColor;\n      drawArc(ctx, this, radiusOffset, spacing, circular);\n      drawBorder(ctx, this, radiusOffset, spacing, circular);\n      ctx.restore();\n    }\n  }]);\n  return ArcElement;\n}(Element);\n_defineProperty(ArcElement, \"id\", 'arc');\n_defineProperty(ArcElement, \"defaults\", {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderJoinStyle: undefined,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n  circular: true\n});\n_defineProperty(ArcElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor'\n});\nfunction setStyle(ctx, options) {\n  var style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment) {\n  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var count = points.length;\n  var _params$start = params.start,\n    paramsStart = _params$start === void 0 ? 0 : _params$start,\n    _params$end = params.end,\n    paramsEnd = _params$end === void 0 ? count - 1 : _params$end;\n  var segmentStart = segment.start,\n    segmentEnd = segment.end;\n  var start = Math.max(paramsStart, segmentStart);\n  var end = Math.min(paramsEnd, segmentEnd);\n  var outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count: count,\n    start: start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  var points = line.points,\n    options = line.options;\n  var _pathVars = pathVars(points, segment, params),\n    count = _pathVars.count,\n    start = _pathVars.start,\n    loop = _pathVars.loop,\n    ilen = _pathVars.ilen;\n  var lineMethod = getLineMethod(options);\n  var _ref5 = params || {},\n    _ref5$move = _ref5.move,\n    move = _ref5$move === void 0 ? true : _ref5$move,\n    reverse = _ref5.reverse;\n  var i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  var points = line.points;\n  var _pathVars2 = pathVars(points, segment, params),\n    count = _pathVars2.count,\n    start = _pathVars2.start,\n    ilen = _pathVars2.ilen;\n  var _ref6 = params || {},\n    _ref6$move = _ref6.move,\n    move = _ref6$move === void 0 ? true : _ref6$move,\n    reverse = _ref6.reverse;\n  var avgX = 0;\n  var countX = 0;\n  var i, point, prevX, minY, maxY, lastY;\n  var pointIndex = function pointIndex(index) {\n    return (start + (reverse ? ilen - index : index)) % count;\n  };\n  var drawX = function drawX() {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    var x = point.x;\n    var y = point.y;\n    var truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  var opts = line.options;\n  var borderDash = opts.borderDash && opts.borderDash.length;\n  var useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  var path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  var segments = line.segments,\n    options = line.options;\n  var segmentMethod = _getSegmentMethod(line);\n  var _iterator16 = _createForOfIteratorHelper(segments),\n    _step16;\n  try {\n    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n      var segment = _step16.value;\n      setStyle(ctx, options, segment.style);\n      ctx.beginPath();\n      if (segmentMethod(ctx, line, segment, {\n        start: start,\n        end: start + count - 1\n      })) {\n        ctx.closePath();\n      }\n      ctx.stroke();\n    }\n  } catch (err) {\n    _iterator16.e(err);\n  } finally {\n    _iterator16.f();\n  }\n}\nvar usePath2D = typeof Path2D === 'function';\nfunction _draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nvar LineElement = /*#__PURE__*/function (_Element3) {\n  _inherits(LineElement, _Element3);\n  var _super13 = _createSuper(LineElement);\n  function LineElement(cfg) {\n    var _this24;\n    _classCallCheck(this, LineElement);\n    _this24 = _super13.call(this);\n    _this24.animated = true;\n    _this24.options = undefined;\n    _this24._chart = undefined;\n    _this24._loop = undefined;\n    _this24._fullLoop = undefined;\n    _this24._path = undefined;\n    _this24._points = undefined;\n    _this24._segments = undefined;\n    _this24._decimated = false;\n    _this24._pointsUpdated = false;\n    _this24._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this24), cfg);\n    }\n    return _this24;\n  }\n  _createClass(LineElement, [{\n    key: \"updateControlPoints\",\n    value: function updateControlPoints(chartArea, indexAxis) {\n      var options = this.options;\n      if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n        var loop = options.spanGaps ? this._loop : this._fullLoop;\n        _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n        this._pointsUpdated = true;\n      }\n    }\n  }, {\n    key: \"points\",\n    get: function get() {\n      return this._points;\n    },\n    set: function set(points) {\n      this._points = points;\n      delete this._segments;\n      delete this._path;\n      this._pointsUpdated = false;\n    }\n  }, {\n    key: \"segments\",\n    get: function get() {\n      return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      var segments = this.segments;\n      var points = this.points;\n      return segments.length && points[segments[0].start];\n    }\n  }, {\n    key: \"last\",\n    value: function last() {\n      var segments = this.segments;\n      var points = this.points;\n      var count = segments.length;\n      return count && points[segments[count - 1].end];\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(point, property) {\n      var options = this.options;\n      var value = point[property];\n      var points = this.points;\n      var segments = _boundSegments(this, {\n        property: property,\n        start: value,\n        end: value\n      });\n      if (!segments.length) {\n        return;\n      }\n      var result = [];\n      var _interpolate = _getInterpolationMethod(options);\n      var i, ilen;\n      for (i = 0, ilen = segments.length; i < ilen; ++i) {\n        var _segments$i = segments[i],\n          start = _segments$i.start,\n          end = _segments$i.end;\n        var p1 = points[start];\n        var p2 = points[end];\n        if (p1 === p2) {\n          result.push(p1);\n          continue;\n        }\n        var t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n        var interpolated = _interpolate(p1, p2, t, options.stepped);\n        interpolated[property] = point[property];\n        result.push(interpolated);\n      }\n      return result.length === 1 ? result[0] : result;\n    }\n  }, {\n    key: \"pathSegment\",\n    value: function pathSegment(ctx, segment, params) {\n      var segmentMethod = _getSegmentMethod(this);\n      return segmentMethod(ctx, this, segment, params);\n    }\n  }, {\n    key: \"path\",\n    value: function path(ctx, start, count) {\n      var segments = this.segments;\n      var segmentMethod = _getSegmentMethod(this);\n      var loop = this._loop;\n      start = start || 0;\n      count = count || this.points.length - start;\n      var _iterator17 = _createForOfIteratorHelper(segments),\n        _step17;\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var segment = _step17.value;\n          loop &= segmentMethod(ctx, this, segment, {\n            start: start,\n            end: start + count - 1\n          });\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n      return !!loop;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, chartArea, start, count) {\n      var options = this.options || {};\n      var points = this.points || [];\n      if (points.length && options.borderWidth) {\n        ctx.save();\n        _draw(ctx, this, start, count);\n        ctx.restore();\n      }\n      if (this.animated) {\n        this._pointsUpdated = false;\n        this._path = undefined;\n      }\n    }\n  }]);\n  return LineElement;\n}(Element);\n_defineProperty(LineElement, \"id\", 'line');\n_defineProperty(LineElement, \"defaults\", {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0\n});\n_defineProperty(LineElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\n_defineProperty(LineElement, \"descriptors\", {\n  _scriptable: true,\n  _indexable: function _indexable(name) {\n    return name !== 'borderDash' && name !== 'fill';\n  }\n});\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  var options = el.options;\n  var _el$getProps = el.getProps([axis], useFinalPosition),\n    value = _el$getProps[axis];\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nvar PointElement = /*#__PURE__*/function (_Element4) {\n  _inherits(PointElement, _Element4);\n  var _super14 = _createSuper(PointElement);\n  /**\n  * @type {any}\n  */\n\n  /**\n  * @type {any}\n  */\n\n  function PointElement(cfg) {\n    var _this25;\n    _classCallCheck(this, PointElement);\n    _this25 = _super14.call(this);\n    _this25.options = undefined;\n    _this25.parsed = undefined;\n    _this25.skip = undefined;\n    _this25.stop = undefined;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this25), cfg);\n    }\n    return _this25;\n  }\n  _createClass(PointElement, [{\n    key: \"inRange\",\n    value: function inRange(mouseX, mouseY, useFinalPosition) {\n      var options = this.options;\n      var _this$getProps4 = this.getProps(['x', 'y'], useFinalPosition),\n        x = _this$getProps4.x,\n        y = _this$getProps4.y;\n      return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n  }, {\n    key: \"inXRange\",\n    value: function inXRange(mouseX, useFinalPosition) {\n      return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n  }, {\n    key: \"inYRange\",\n    value: function inYRange(mouseY, useFinalPosition) {\n      return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n  }, {\n    key: \"getCenterPoint\",\n    value: function getCenterPoint(useFinalPosition) {\n      var _this$getProps5 = this.getProps(['x', 'y'], useFinalPosition),\n        x = _this$getProps5.x,\n        y = _this$getProps5.y;\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"size\",\n    value: function size(options) {\n      options = options || this.options || {};\n      var radius = options.radius || 0;\n      radius = Math.max(radius, radius && options.hoverRadius || 0);\n      var borderWidth = radius && options.borderWidth || 0;\n      return (radius + borderWidth) * 2;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, area) {\n      var options = this.options;\n      if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n        return;\n      }\n      ctx.strokeStyle = options.borderColor;\n      ctx.lineWidth = options.borderWidth;\n      ctx.fillStyle = options.backgroundColor;\n      drawPoint(ctx, options, this.x, this.y);\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange() {\n      var options = this.options || {};\n      // @ts-expect-error Fallbacks should never be hit in practice\n      return options.radius + options.hitRadius;\n    }\n  }]);\n  return PointElement;\n}(Element);\n_defineProperty(PointElement, \"id\", 'point');\n_defineProperty(PointElement, \"defaults\", {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n});\n_defineProperty(PointElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nfunction getBarBounds(bar, useFinalPosition) {\n  var _bar$getProps = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition),\n    x = _bar$getProps.x,\n    y = _bar$getProps.y,\n    base = _bar$getProps.base,\n    width = _bar$getProps.width,\n    height = _bar$getProps.height;\n  var left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  var value = bar.options.borderWidth;\n  var skip = bar.borderSkipped;\n  var o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  var _bar$getProps2 = bar.getProps(['enableBorderRadius']),\n    enableBorderRadius = _bar$getProps2.enableBorderRadius;\n  var value = bar.options.borderRadius;\n  var o = toTRBLCorners(value);\n  var maxR = Math.min(maxW, maxH);\n  var skip = bar.borderSkipped;\n  var enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  var bounds = getBarBounds(bar);\n  var width = bounds.right - bounds.left;\n  var height = bounds.bottom - bounds.top;\n  var border = parseBorderWidth(bar, width / 2, height / 2);\n  var radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius: radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction _inRange(bar, x, y, useFinalPosition) {\n  var skipX = x === null;\n  var skipY = y === null;\n  var skipBoth = skipX && skipY;\n  var bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount) {\n  var refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var x = rect.x !== refRect.x ? -amount : 0;\n  var y = rect.y !== refRect.y ? -amount : 0;\n  var w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  var h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nvar BarElement = /*#__PURE__*/function (_Element5) {\n  _inherits(BarElement, _Element5);\n  var _super15 = _createSuper(BarElement);\n  function BarElement(cfg) {\n    var _this26;\n    _classCallCheck(this, BarElement);\n    _this26 = _super15.call(this);\n    _this26.options = undefined;\n    _this26.horizontal = undefined;\n    _this26.base = undefined;\n    _this26.width = undefined;\n    _this26.height = undefined;\n    _this26.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this26), cfg);\n    }\n    return _this26;\n  }\n  _createClass(BarElement, [{\n    key: \"draw\",\n    value: function draw(ctx) {\n      var inflateAmount = this.inflateAmount,\n        _this$options14 = this.options,\n        borderColor = _this$options14.borderColor,\n        backgroundColor = _this$options14.backgroundColor;\n      var _boundingRects = boundingRects(this),\n        inner = _boundingRects.inner,\n        outer = _boundingRects.outer;\n      var addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n      ctx.save();\n      if (outer.w !== inner.w || outer.h !== inner.h) {\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n        ctx.clip();\n        addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n        ctx.fillStyle = borderColor;\n        ctx.fill('evenodd');\n      }\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(inner, inflateAmount));\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }, {\n    key: \"inRange\",\n    value: function inRange(mouseX, mouseY, useFinalPosition) {\n      return _inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n  }, {\n    key: \"inXRange\",\n    value: function inXRange(mouseX, useFinalPosition) {\n      return _inRange(this, mouseX, null, useFinalPosition);\n    }\n  }, {\n    key: \"inYRange\",\n    value: function inYRange(mouseY, useFinalPosition) {\n      return _inRange(this, null, mouseY, useFinalPosition);\n    }\n  }, {\n    key: \"getCenterPoint\",\n    value: function getCenterPoint(useFinalPosition) {\n      var _this$getProps6 = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition),\n        x = _this$getProps6.x,\n        y = _this$getProps6.y,\n        base = _this$getProps6.base,\n        horizontal = _this$getProps6.horizontal;\n      return {\n        x: horizontal ? (x + base) / 2 : x,\n        y: horizontal ? y : (y + base) / 2\n      };\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange(axis) {\n      return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n  }]);\n  return BarElement;\n}(Element);\n_defineProperty(BarElement, \"id\", 'bar');\n_defineProperty(BarElement, \"defaults\", {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n});\n_defineProperty(BarElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  LineElement: LineElement,\n  PointElement: PointElement,\n  BarElement: BarElement\n});\nvar BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nvar BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(function (color) {\n  return color.replace('rgb(', 'rgba(').replace(')', ', 0.5)');\n});\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(function () {\n    return getBorderColor(i++);\n  });\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(function () {\n    return getBackgroundColor(i++);\n  });\n  return i;\n}\nfunction getColorizer(chart) {\n  var i = 0;\n  return function (dataset, datasetIndex) {\n    var controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  var k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout: function beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    var _chart$config = chart.config,\n      elements = _chart$config.options.elements,\n      datasets = _chart$config.data.datasets;\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || elements && containsColorsDefinitions(elements))) {\n      return;\n    }\n    var colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  var samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  var decimated = [];\n  var bucketWidth = (count - 2) / (samples - 2);\n  var sampledIndex = 0;\n  var endIndex = start + count - 1;\n  var a = start;\n  var i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    var avgX = 0;\n    var avgY = 0;\n    var j = void 0;\n    var avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    var avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    var avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    var rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    var rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    var _data$a = data[a],\n      pointAx = _data$a.x,\n      pointAy = _data$a.y;\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  var avgX = 0;\n  var countX = 0;\n  var i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  var decimated = [];\n  var endIndex = start + count - 1;\n  var xMin = data[start].x;\n  var xMax = data[endIndex].x;\n  var dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    var truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      var lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        var intermediateIndex1 = Math.min(minIndex, maxIndex);\n        var intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push(_objectSpread(_objectSpread({}, data[intermediateIndex1]), {}, {\n            x: avgX\n          }));\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push(_objectSpread(_objectSpread({}, data[intermediateIndex2]), {}, {\n            x: avgX\n          }));\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    var data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(function (dataset) {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  var pointCount = points.length;\n  var start = 0;\n  var count;\n  var iScale = meta.iScale;\n  var _iScale$getUserBounds = iScale.getUserBounds(),\n    min = _iScale$getUserBounds.min,\n    max = _iScale$getUserBounds.max,\n    minDefined = _iScale$getUserBounds.minDefined,\n    maxDefined = _iScale$getUserBounds.maxDefined;\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start: start,\n    count: count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: function beforeElementsUpdate(chart, args, options) {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    var availableWidth = chart.width;\n    chart.data.datasets.forEach(function (dataset, datasetIndex) {\n      var _data = dataset._data,\n        indexAxis = dataset.indexAxis;\n      var meta = chart.getDatasetMeta(datasetIndex);\n      var data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      var xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      var _getStartAndCountOfVi3 = getStartAndCountOfVisiblePointsSimplified(meta, data),\n        start = _getStartAndCountOfVi3.start,\n        count = _getStartAndCountOfVi3.count;\n      var threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function get() {\n            return this._decimated;\n          },\n          set: function set(d) {\n            this._data = d;\n          }\n        });\n      }\n      var decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(\"Unsupported decimation algorithm '\".concat(options.algorithm, \"'\"));\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy: function destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  var segments = line.segments;\n  var points = line.points;\n  var tpoints = target.points;\n  var parts = [];\n  var _iterator18 = _createForOfIteratorHelper(segments),\n    _step18;\n  try {\n    for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n      var segment = _step18.value;\n      var start = segment.start,\n        end = segment.end;\n      end = _findSegmentEnd(start, end, points);\n      var bounds = _getBounds(property, points[start], points[end], segment.loop);\n      if (!target.segments) {\n        parts.push({\n          source: segment,\n          target: bounds,\n          start: points[start],\n          end: points[end]\n        });\n        continue;\n      }\n      var targetSegments = _boundSegments(target, bounds);\n      var _iterator19 = _createForOfIteratorHelper(targetSegments),\n        _step19;\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var tgt = _step19.value;\n          var subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n          var fillSources = _boundSegment(segment, points, subBounds);\n          var _iterator20 = _createForOfIteratorHelper(fillSources),\n            _step20;\n          try {\n            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n              var fillSource = _step20.value;\n              parts.push({\n                source: fillSource,\n                target: tgt,\n                start: _defineProperty({}, property, _getEdge(bounds, subBounds, 'start', Math.max)),\n                end: _defineProperty({}, property, _getEdge(bounds, subBounds, 'end', Math.min))\n              });\n            }\n          } catch (err) {\n            _iterator20.e(err);\n          } finally {\n            _iterator20.f();\n          }\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n    }\n  } catch (err) {\n    _iterator18.e(err);\n  } finally {\n    _iterator18.f();\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  var start = first[property];\n  var end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {\n    property: property,\n    start: start,\n    end: end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  var _ref7 = boundary || {},\n    _ref7$x = _ref7.x,\n    x = _ref7$x === void 0 ? null : _ref7$x,\n    _ref7$y = _ref7.y,\n    y = _ref7$y === void 0 ? null : _ref7$y;\n  var linePoints = line.points;\n  var points = [];\n  line.segments.forEach(function (_ref8) {\n    var start = _ref8.start,\n      end = _ref8.end;\n    end = _findSegmentEnd(start, end, linePoints);\n    var first = linePoints[start];\n    var last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y: y\n      });\n      points.push({\n        x: last.x,\n        y: y\n      });\n    } else if (x !== null) {\n      points.push({\n        x: x,\n        y: first.y\n      });\n      points.push({\n        x: x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    var point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  var points = [];\n  var _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points: points,\n    options: {\n      tension: 0\n    },\n    _loop: _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  var source = sources[index];\n  var fill = source.fill;\n  var visited = [index];\n  var target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  var fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  var target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  var pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  var value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  var options = line.options;\n  var fillOption = options.fill;\n  var fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  var scale = source.scale,\n    index = source.index,\n    line = source.line;\n  var points = [];\n  var segments = line.segments;\n  var sourcePoints = line.points;\n  var linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    for (var j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points: points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  var below = [];\n  var metas = scale.getMatchingVisibleMetas('line');\n  for (var i = 0; i < metas.length; i++) {\n    var meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  var postponed = [];\n  for (var j = 0; j < linesBelow.length; j++) {\n    var line = linesBelow[j];\n    var _findPoint = findPoint(line, sourcePoint, 'x'),\n      first = _findPoint.first,\n      last = _findPoint.last,\n      point = _findPoint.point;\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push.apply(points, postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  var point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  var pointValue = point[property];\n  var segments = line.segments;\n  var linePoints = line.points;\n  var first = false;\n  var last = false;\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    var firstValue = linePoints[segment.start][property];\n    var lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first: first,\n    last: last,\n    point: point\n  };\n}\nvar simpleArc = /*#__PURE__*/function () {\n  function simpleArc(opts) {\n    _classCallCheck(this, simpleArc);\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  _createClass(simpleArc, [{\n    key: \"pathSegment\",\n    value: function pathSegment(ctx, bounds, opts) {\n      var x = this.x,\n        y = this.y,\n        radius = this.radius;\n      bounds = bounds || {\n        start: 0,\n        end: TAU\n      };\n      ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n      return !opts.bounds;\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(point) {\n      var x = this.x,\n        y = this.y,\n        radius = this.radius;\n      var angle = point.angle;\n      return {\n        x: x + Math.cos(angle) * radius,\n        y: y + Math.sin(angle) * radius,\n        angle: angle\n      };\n    }\n  }]);\n  return simpleArc;\n}();\nfunction _getTarget(source) {\n  var chart = source.chart,\n    fill = source.fill,\n    line = source.line;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  var boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  var meta = chart.getDatasetMeta(index);\n  var visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  var scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  var _source$scale = source.scale,\n    scale = _source$scale === void 0 ? {} : _source$scale,\n    fill = source.fill;\n  var pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    var horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  var scale = source.scale,\n    fill = source.fill;\n  var options = scale.options;\n  var length = scale.getLabels().length;\n  var start = options.reverse ? scale.max : scale.min;\n  var value = _getTargetValue(fill, scale, start);\n  var target = [];\n  if (options.grid.circular) {\n    var center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (var i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  var target = _getTarget(source);\n  var line = source.line,\n    scale = source.scale,\n    axis = source.axis;\n  var lineOpts = line.options;\n  var fillOption = lineOpts.fill;\n  var color = lineOpts.backgroundColor;\n  var _ref9 = fillOption || {},\n    _ref9$above = _ref9.above,\n    above = _ref9$above === void 0 ? color : _ref9$above,\n    _ref9$below = _ref9.below,\n    below = _ref9$below === void 0 ? color : _ref9$below;\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line: line,\n      target: target,\n      above: above,\n      below: below,\n      area: area,\n      scale: scale,\n      axis: axis\n    });\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  var line = cfg.line,\n    target = cfg.target,\n    above = cfg.above,\n    below = cfg.below,\n    area = cfg.area,\n    scale = cfg.scale;\n  var property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line: line,\n      target: target,\n      color: above,\n      scale: scale,\n      property: property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {\n    line: line,\n    target: target,\n    color: below,\n    scale: scale,\n    property: property\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  var segments = target.segments,\n    points = target.points;\n  var first = true;\n  var lineLoop = false;\n  ctx.beginPath();\n  var _iterator21 = _createForOfIteratorHelper(segments),\n    _step21;\n  try {\n    for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n      var segment = _step21.value;\n      var start = segment.start,\n        end = segment.end;\n      var firstPoint = points[start];\n      var lastPoint = points[_findSegmentEnd(start, end, points)];\n      if (first) {\n        ctx.moveTo(firstPoint.x, firstPoint.y);\n        first = false;\n      } else {\n        ctx.lineTo(firstPoint.x, clipY);\n        ctx.lineTo(firstPoint.x, firstPoint.y);\n      }\n      lineLoop = !!target.pathSegment(ctx, segment, {\n        move: lineLoop\n      });\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        ctx.lineTo(lastPoint.x, clipY);\n      }\n    }\n  } catch (err) {\n    _iterator21.e(err);\n  } finally {\n    _iterator21.f();\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  var line = cfg.line,\n    target = cfg.target,\n    property = cfg.property,\n    color = cfg.color,\n    scale = cfg.scale;\n  var segments = _segments(line, target, property);\n  var _iterator22 = _createForOfIteratorHelper(segments),\n    _step22;\n  try {\n    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n      var _step22$value = _step22.value,\n        src = _step22$value.source,\n        tgt = _step22$value.target,\n        start = _step22$value.start,\n        end = _step22$value.end;\n      var _src$style = src.style;\n      _src$style = _src$style === void 0 ? {} : _src$style;\n      var _src$style$background = _src$style.backgroundColor,\n        backgroundColor = _src$style$background === void 0 ? color : _src$style$background;\n      var notShape = target !== true;\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n      ctx.beginPath();\n      var lineLoop = !!line.pathSegment(ctx, src);\n      var loop = void 0;\n      if (notShape) {\n        if (lineLoop) {\n          ctx.closePath();\n        } else {\n          interpolatedLineTo(ctx, target, end, property);\n        }\n        var targetLoop = !!target.pathSegment(ctx, tgt, {\n          move: lineLoop,\n          reverse: true\n        });\n        loop = lineLoop && targetLoop;\n        if (!loop) {\n          interpolatedLineTo(ctx, target, start, property);\n        }\n      }\n      ctx.closePath();\n      ctx.fill(loop ? 'evenodd' : 'nonzero');\n      ctx.restore();\n    }\n  } catch (err) {\n    _iterator22.e(err);\n  } finally {\n    _iterator22.f();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  var _scale$chart$chartAre = scale.chart.chartArea,\n    top = _scale$chart$chartAre.top,\n    bottom = _scale$chart$chartAre.bottom;\n  var _ref10 = bounds || {},\n    property = _ref10.property,\n    start = _ref10.start,\n    end = _ref10.end;\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  var interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate: function afterDatasetsUpdate(chart, _args, options) {\n    var count = (chart.data.datasets || []).length;\n    var sources = [];\n    var meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart: chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line: line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw: function beforeDraw(chart, _args, options) {\n    var draw = options.drawTime === 'beforeDraw';\n    var metasets = chart.getSortedVisibleDatasetMetas();\n    var area = chart.chartArea;\n    for (var i = metasets.length - 1; i >= 0; --i) {\n      var source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw: function beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    var metasets = chart.getSortedVisibleDatasetMetas();\n    for (var i = metasets.length - 1; i >= 0; --i) {\n      var source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw: function beforeDatasetDraw(chart, args, options) {\n    var source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nvar getBoxSize = function getBoxSize(labelOpts, fontSize) {\n  var _labelOpts$boxHeight = labelOpts.boxHeight,\n    boxHeight = _labelOpts$boxHeight === void 0 ? fontSize : _labelOpts$boxHeight,\n    _labelOpts$boxWidth = labelOpts.boxWidth,\n    boxWidth = _labelOpts$boxWidth === void 0 ? fontSize : _labelOpts$boxWidth;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth: boxWidth,\n    boxHeight: boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nvar itemsEqual = function itemsEqual(a, b) {\n  return a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n};\nvar Legend = /*#__PURE__*/function (_Element6) {\n  _inherits(Legend, _Element6);\n  var _super16 = _createSuper(Legend);\n  function Legend(config) {\n    var _this27;\n    _classCallCheck(this, Legend);\n    _this27 = _super16.call(this);\n    _this27._added = false;\n    _this27.legendHitBoxes = [];\n    _this27._hoveredItem = null;\n    _this27.doughnutMode = false;\n    _this27.chart = config.chart;\n    _this27.options = config.options;\n    _this27.ctx = config.ctx;\n    _this27.legendItems = undefined;\n    _this27.columnSizes = undefined;\n    _this27.lineWidths = undefined;\n    _this27.maxHeight = undefined;\n    _this27.maxWidth = undefined;\n    _this27.top = undefined;\n    _this27.bottom = undefined;\n    _this27.left = undefined;\n    _this27.right = undefined;\n    _this27.height = undefined;\n    _this27.width = undefined;\n    _this27._margins = undefined;\n    _this27.position = undefined;\n    _this27.weight = undefined;\n    _this27.fullSize = undefined;\n    return _this27;\n  }\n  _createClass(Legend, [{\n    key: \"update\",\n    value: function update(maxWidth, maxHeight, margins) {\n      this.maxWidth = maxWidth;\n      this.maxHeight = maxHeight;\n      this._margins = margins;\n      this.setDimensions();\n      this.buildLabels();\n      this.fit();\n    }\n  }, {\n    key: \"setDimensions\",\n    value: function setDimensions() {\n      if (this.isHorizontal()) {\n        this.width = this.maxWidth;\n        this.left = this._margins.left;\n        this.right = this.width;\n      } else {\n        this.height = this.maxHeight;\n        this.top = this._margins.top;\n        this.bottom = this.height;\n      }\n    }\n  }, {\n    key: \"buildLabels\",\n    value: function buildLabels() {\n      var _this28 = this;\n      var labelOpts = this.options.labels || {};\n      var legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n      if (labelOpts.filter) {\n        legendItems = legendItems.filter(function (item) {\n          return labelOpts.filter(item, _this28.chart.data);\n        });\n      }\n      if (labelOpts.sort) {\n        legendItems = legendItems.sort(function (a, b) {\n          return labelOpts.sort(a, b, _this28.chart.data);\n        });\n      }\n      if (this.options.reverse) {\n        legendItems.reverse();\n      }\n      this.legendItems = legendItems;\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var options = this.options,\n        ctx = this.ctx;\n      if (!options.display) {\n        this.width = this.height = 0;\n        return;\n      }\n      var labelOpts = options.labels;\n      var labelFont = toFont(labelOpts.font);\n      var fontSize = labelFont.size;\n      var titleHeight = this._computeTitleHeight();\n      var _getBoxSize = getBoxSize(labelOpts, fontSize),\n        boxWidth = _getBoxSize.boxWidth,\n        itemHeight = _getBoxSize.itemHeight;\n      var width, height;\n      ctx.font = labelFont.string;\n      if (this.isHorizontal()) {\n        width = this.maxWidth;\n        height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n      } else {\n        height = this.maxHeight;\n        width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n      }\n      this.width = Math.min(width, options.maxWidth || this.maxWidth);\n      this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n  }, {\n    key: \"_fitRows\",\n    value: function _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n      var ctx = this.ctx,\n        maxWidth = this.maxWidth,\n        padding = this.options.labels.padding;\n      var hitboxes = this.legendHitBoxes = [];\n      var lineWidths = this.lineWidths = [0];\n      var lineHeight = itemHeight + padding;\n      var totalHeight = titleHeight;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      var row = -1;\n      var top = -lineHeight;\n      this.legendItems.forEach(function (legendItem, i) {\n        var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n        if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n          totalHeight += lineHeight;\n          lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n          top += lineHeight;\n          row++;\n        }\n        hitboxes[i] = {\n          left: 0,\n          top: top,\n          row: row,\n          width: itemWidth,\n          height: itemHeight\n        };\n        lineWidths[lineWidths.length - 1] += itemWidth + padding;\n      });\n      return totalHeight;\n    }\n  }, {\n    key: \"_fitCols\",\n    value: function _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n      var ctx = this.ctx,\n        maxHeight = this.maxHeight,\n        padding = this.options.labels.padding;\n      var hitboxes = this.legendHitBoxes = [];\n      var columnSizes = this.columnSizes = [];\n      var heightLimit = maxHeight - titleHeight;\n      var totalWidth = padding;\n      var currentColWidth = 0;\n      var currentColHeight = 0;\n      var left = 0;\n      var col = 0;\n      this.legendItems.forEach(function (legendItem, i) {\n        var _calculateItemSize = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight),\n          itemWidth = _calculateItemSize.itemWidth,\n          itemHeight = _calculateItemSize.itemHeight;\n        if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n          totalWidth += currentColWidth + padding;\n          columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n          });\n          left += currentColWidth + padding;\n          col++;\n          currentColWidth = currentColHeight = 0;\n        }\n        hitboxes[i] = {\n          left: left,\n          top: currentColHeight,\n          col: col,\n          width: itemWidth,\n          height: itemHeight\n        };\n        currentColWidth = Math.max(currentColWidth, itemWidth);\n        currentColHeight += itemHeight + padding;\n      });\n      totalWidth += currentColWidth;\n      columnSizes.push({\n        width: currentColWidth,\n        height: currentColHeight\n      });\n      return totalWidth;\n    }\n  }, {\n    key: \"adjustHitBoxes\",\n    value: function adjustHitBoxes() {\n      if (!this.options.display) {\n        return;\n      }\n      var titleHeight = this._computeTitleHeight();\n      var hitboxes = this.legendHitBoxes,\n        _this$options15 = this.options,\n        align = _this$options15.align,\n        padding = _this$options15.labels.padding,\n        rtl = _this$options15.rtl;\n      var rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n      if (this.isHorizontal()) {\n        var row = 0;\n        var left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        var _iterator23 = _createForOfIteratorHelper(hitboxes),\n          _step23;\n        try {\n          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n            var hitbox = _step23.value;\n            if (row !== hitbox.row) {\n              row = hitbox.row;\n              left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            }\n            hitbox.top += this.top + titleHeight + padding;\n            hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n            left += hitbox.width + padding;\n          }\n        } catch (err) {\n          _iterator23.e(err);\n        } finally {\n          _iterator23.f();\n        }\n      } else {\n        var col = 0;\n        var top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        var _iterator24 = _createForOfIteratorHelper(hitboxes),\n          _step24;\n        try {\n          for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n            var hitbox1 = _step24.value;\n            if (hitbox1.col !== col) {\n              col = hitbox1.col;\n              top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            }\n            hitbox1.top = top;\n            hitbox1.left += this.left + padding;\n            hitbox1.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox1.left), hitbox1.width);\n            top += hitbox1.height + padding;\n          }\n        } catch (err) {\n          _iterator24.e(err);\n        } finally {\n          _iterator24.f();\n        }\n      }\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      if (this.options.display) {\n        var ctx = this.ctx;\n        clipArea(ctx, this);\n        this._draw();\n        unclipArea(ctx);\n      }\n    }\n  }, {\n    key: \"_draw\",\n    value: function _draw() {\n      var _this29 = this;\n      var opts = this.options,\n        columnSizes = this.columnSizes,\n        lineWidths = this.lineWidths,\n        ctx = this.ctx;\n      var align = opts.align,\n        labelOpts = opts.labels;\n      var defaultColor = defaults.color;\n      var rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n      var labelFont = toFont(labelOpts.font);\n      var padding = labelOpts.padding;\n      var fontSize = labelFont.size;\n      var halfFontSize = fontSize / 2;\n      var cursor;\n      this.drawTitle();\n      ctx.textAlign = rtlHelper.textAlign('left');\n      ctx.textBaseline = 'middle';\n      ctx.lineWidth = 0.5;\n      ctx.font = labelFont.string;\n      var _getBoxSize2 = getBoxSize(labelOpts, fontSize),\n        boxWidth = _getBoxSize2.boxWidth,\n        boxHeight = _getBoxSize2.boxHeight,\n        itemHeight = _getBoxSize2.itemHeight;\n      var drawLegendBox = function drawLegendBox(x, y, legendItem) {\n        if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n          return;\n        }\n        ctx.save();\n        var lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n        ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n        ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n        ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n        ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n        ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n        if (labelOpts.usePointStyle) {\n          var drawOptions = {\n            radius: boxHeight * Math.SQRT2 / 2,\n            pointStyle: legendItem.pointStyle,\n            rotation: legendItem.rotation,\n            borderWidth: lineWidth\n          };\n          var centerX = rtlHelper.xPlus(x, boxWidth / 2);\n          var centerY = y + halfFontSize;\n          drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n        } else {\n          var yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n          var xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n          var borderRadius = toTRBLCorners(legendItem.borderRadius);\n          ctx.beginPath();\n          if (Object.values(borderRadius).some(function (v) {\n            return v !== 0;\n          })) {\n            addRoundedRectPath(ctx, {\n              x: xBoxLeft,\n              y: yBoxTop,\n              w: boxWidth,\n              h: boxHeight,\n              radius: borderRadius\n            });\n          } else {\n            ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n          }\n          ctx.fill();\n          if (lineWidth !== 0) {\n            ctx.stroke();\n          }\n        }\n        ctx.restore();\n      };\n      var fillText = function fillText(x, y, legendItem) {\n        renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n          strikethrough: legendItem.hidden,\n          textAlign: rtlHelper.textAlign(legendItem.textAlign)\n        });\n      };\n      var isHorizontal = this.isHorizontal();\n      var titleHeight = this._computeTitleHeight();\n      if (isHorizontal) {\n        cursor = {\n          x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n          y: this.top + padding + titleHeight,\n          line: 0\n        };\n      } else {\n        cursor = {\n          x: this.left + padding,\n          y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n          line: 0\n        };\n      }\n      overrideTextDirection(this.ctx, opts.textDirection);\n      var lineHeight = itemHeight + padding;\n      this.legendItems.forEach(function (legendItem, i) {\n        ctx.strokeStyle = legendItem.fontColor;\n        ctx.fillStyle = legendItem.fontColor;\n        var textWidth = ctx.measureText(legendItem.text).width;\n        var textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n        var width = boxWidth + halfFontSize + textWidth;\n        var x = cursor.x;\n        var y = cursor.y;\n        rtlHelper.setWidth(_this29.width);\n        if (isHorizontal) {\n          if (i > 0 && x + width + padding > _this29.right) {\n            y = cursor.y += lineHeight;\n            cursor.line++;\n            x = cursor.x = _alignStartEnd(align, _this29.left + padding, _this29.right - lineWidths[cursor.line]);\n          }\n        } else if (i > 0 && y + lineHeight > _this29.bottom) {\n          x = cursor.x = x + columnSizes[cursor.line].width + padding;\n          cursor.line++;\n          y = cursor.y = _alignStartEnd(align, _this29.top + titleHeight + padding, _this29.bottom - columnSizes[cursor.line].height);\n        }\n        var realX = rtlHelper.x(x);\n        drawLegendBox(realX, y, legendItem);\n        x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : _this29.right, opts.rtl);\n        fillText(rtlHelper.x(x), y, legendItem);\n        if (isHorizontal) {\n          cursor.x += width + padding;\n        } else if (typeof legendItem.text !== 'string') {\n          var fontLineHeight = labelFont.lineHeight;\n          cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n        } else {\n          cursor.y += lineHeight;\n        }\n      });\n      restoreTextDirection(this.ctx, opts.textDirection);\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle() {\n      var opts = this.options;\n      var titleOpts = opts.title;\n      var titleFont = toFont(titleOpts.font);\n      var titlePadding = toPadding(titleOpts.padding);\n      if (!titleOpts.display) {\n        return;\n      }\n      var rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n      var ctx = this.ctx;\n      var position = titleOpts.position;\n      var halfFontSize = titleFont.size / 2;\n      var topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n      var y;\n      var left = this.left;\n      var maxWidth = this.width;\n      if (this.isHorizontal()) {\n        maxWidth = Math.max.apply(Math, _toConsumableArray(this.lineWidths));\n        y = this.top + topPaddingPlusHalfFontSize;\n        left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n      } else {\n        var maxHeight = this.columnSizes.reduce(function (acc, size) {\n          return Math.max(acc, size.height);\n        }, 0);\n        y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n      }\n      var x = _alignStartEnd(position, left, left + maxWidth);\n      ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n      ctx.textBaseline = 'middle';\n      ctx.strokeStyle = titleOpts.color;\n      ctx.fillStyle = titleOpts.color;\n      ctx.font = titleFont.string;\n      renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n  }, {\n    key: \"_computeTitleHeight\",\n    value: function _computeTitleHeight() {\n      var titleOpts = this.options.title;\n      var titleFont = toFont(titleOpts.font);\n      var titlePadding = toPadding(titleOpts.padding);\n      return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n  }, {\n    key: \"_getLegendItemAt\",\n    value: function _getLegendItemAt(x, y) {\n      var i, hitBox, lh;\n      if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n        lh = this.legendHitBoxes;\n        for (i = 0; i < lh.length; ++i) {\n          hitBox = lh[i];\n          if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n            return this.legendItems[i];\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(e) {\n      var opts = this.options;\n      if (!isListened(e.type, opts)) {\n        return;\n      }\n      var hoveredItem = this._getLegendItemAt(e.x, e.y);\n      if (e.type === 'mousemove' || e.type === 'mouseout') {\n        var previous = this._hoveredItem;\n        var sameItem = itemsEqual(previous, hoveredItem);\n        if (previous && !sameItem) {\n          callback(opts.onLeave, [e, previous, this], this);\n        }\n        this._hoveredItem = hoveredItem;\n        if (hoveredItem && !sameItem) {\n          callback(opts.onHover, [e, hoveredItem, this], this);\n        }\n      } else if (hoveredItem) {\n        callback(opts.onClick, [e, hoveredItem, this], this);\n      }\n    }\n  }]);\n  return Legend;\n}(Element);\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  var itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  var itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth: itemWidth,\n    itemHeight: itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  var legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce(function (a, b) {\n      return a.length > b.length ? a : b;\n    });\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  var itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  var labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start: function start(chart, _args, options) {\n    var legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options: options,\n      chart: chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop: function stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    var legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate: function afterUpdate(chart) {\n    var legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent: function afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick: function onClick(e, legendItem, legend) {\n      var index = legendItem.datasetIndex;\n      var ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: function color(ctx) {\n        return ctx.chart.options.color;\n      },\n      boxWidth: 40,\n      padding: 10,\n      generateLabels: function generateLabels(chart) {\n        var datasets = chart.data.datasets;\n        var _chart$legend$options = chart.legend.options.labels,\n          usePointStyle = _chart$legend$options.usePointStyle,\n          pointStyle = _chart$legend$options.pointStyle,\n          textAlign = _chart$legend$options.textAlign,\n          color = _chart$legend$options.color,\n          useBorderRadius = _chart$legend$options.useBorderRadius,\n          borderRadius = _chart$legend$options.borderRadius;\n        return chart._getSortedDatasetMetas().map(function (meta) {\n          var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          var borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: function color(ctx) {\n        return ctx.chart.options.color;\n      },\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: function _scriptable(name) {\n      return !name.startsWith('on');\n    },\n    labels: {\n      _scriptable: function _scriptable(name) {\n        return !['generateLabels', 'filter', 'sort'].includes(name);\n      }\n    }\n  }\n};\nvar Title = /*#__PURE__*/function (_Element7) {\n  _inherits(Title, _Element7);\n  var _super17 = _createSuper(Title);\n  function Title(config) {\n    var _this30;\n    _classCallCheck(this, Title);\n    _this30 = _super17.call(this);\n    _this30.chart = config.chart;\n    _this30.options = config.options;\n    _this30.ctx = config.ctx;\n    _this30._padding = undefined;\n    _this30.top = undefined;\n    _this30.bottom = undefined;\n    _this30.left = undefined;\n    _this30.right = undefined;\n    _this30.width = undefined;\n    _this30.height = undefined;\n    _this30.position = undefined;\n    _this30.weight = undefined;\n    _this30.fullSize = undefined;\n    return _this30;\n  }\n  _createClass(Title, [{\n    key: \"update\",\n    value: function update(maxWidth, maxHeight) {\n      var opts = this.options;\n      this.left = 0;\n      this.top = 0;\n      if (!opts.display) {\n        this.width = this.height = this.right = this.bottom = 0;\n        return;\n      }\n      this.width = this.right = maxWidth;\n      this.height = this.bottom = maxHeight;\n      var lineCount = isArray(opts.text) ? opts.text.length : 1;\n      this._padding = toPadding(opts.padding);\n      var textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n      if (this.isHorizontal()) {\n        this.height = textSize;\n      } else {\n        this.width = textSize;\n      }\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      var pos = this.options.position;\n      return pos === 'top' || pos === 'bottom';\n    }\n  }, {\n    key: \"_drawArgs\",\n    value: function _drawArgs(offset) {\n      var top = this.top,\n        left = this.left,\n        bottom = this.bottom,\n        right = this.right,\n        options = this.options;\n      var align = options.align;\n      var rotation = 0;\n      var maxWidth, titleX, titleY;\n      if (this.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        titleY = top + offset;\n        maxWidth = right - left;\n      } else {\n        if (options.position === 'left') {\n          titleX = left + offset;\n          titleY = _alignStartEnd(align, bottom, top);\n          rotation = PI * -0.5;\n        } else {\n          titleX = right - offset;\n          titleY = _alignStartEnd(align, top, bottom);\n          rotation = PI * 0.5;\n        }\n        maxWidth = bottom - top;\n      }\n      return {\n        titleX: titleX,\n        titleY: titleY,\n        maxWidth: maxWidth,\n        rotation: rotation\n      };\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var ctx = this.ctx;\n      var opts = this.options;\n      if (!opts.display) {\n        return;\n      }\n      var fontOpts = toFont(opts.font);\n      var lineHeight = fontOpts.lineHeight;\n      var offset = lineHeight / 2 + this._padding.top;\n      var _this$_drawArgs = this._drawArgs(offset),\n        titleX = _this$_drawArgs.titleX,\n        titleY = _this$_drawArgs.titleY,\n        maxWidth = _this$_drawArgs.maxWidth,\n        rotation = _this$_drawArgs.rotation;\n      renderText(ctx, opts.text, 0, 0, fontOpts, {\n        color: opts.color,\n        maxWidth: maxWidth,\n        rotation: rotation,\n        textAlign: _toLeftRightCenter(opts.align),\n        textBaseline: 'middle',\n        translation: [titleX, titleY]\n      });\n    }\n  }]);\n  return Title;\n}(Element);\nfunction createTitle(chart, titleOpts) {\n  var title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart: chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start: function start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop: function stop(chart) {\n    var titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    var title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nvar map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start: function start(chart, _args, options) {\n    var title = new Title({\n      ctx: chart.ctx,\n      options: options,\n      chart: chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop: function stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    var title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nvar positioners = {\n  average: function average(items) {\n    if (!items.length) {\n      return false;\n    }\n    var i, len;\n    var x = 0;\n    var y = 0;\n    var count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      var el = items[i].element;\n      if (el && el.hasValue()) {\n        var pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest: function nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    var x = eventPosition.x;\n    var y = eventPosition.y;\n    var minDistance = Number.POSITIVE_INFINITY;\n    var i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      var el = items[i].element;\n      if (el && el.hasValue()) {\n        var center = el.getCenterPoint();\n        var d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      var tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x: x,\n      y: y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  var element = item.element,\n    datasetIndex = item.datasetIndex,\n    index = item.index;\n  var controller = chart.getDatasetMeta(datasetIndex).controller;\n  var _controller$getLabelA = controller.getLabelAndValue(index),\n    label = _controller$getLabelA.label,\n    value = _controller$getLabelA.value;\n  return {\n    chart: chart,\n    label: label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex: datasetIndex,\n    element: element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  var ctx = tooltip.chart.ctx;\n  var body = tooltip.body,\n    footer = tooltip.footer,\n    title = tooltip.title;\n  var boxWidth = options.boxWidth,\n    boxHeight = options.boxHeight;\n  var bodyFont = toFont(options.bodyFont);\n  var titleFont = toFont(options.titleFont);\n  var footerFont = toFont(options.footerFont);\n  var titleLineCount = title.length;\n  var footerLineCount = footer.length;\n  var bodyLineItemCount = body.length;\n  var padding = toPadding(options.padding);\n  var height = padding.height;\n  var width = 0;\n  var combinedBodyLength = body.reduce(function (count, bodyItem) {\n    return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n  }, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    var bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  var widthPadding = 0;\n  var maxLineWidth = function maxLineWidth(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, function (bodyItem) {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width: width,\n    height: height\n  };\n}\nfunction determineYAlign(chart, size) {\n  var y = size.y,\n    height = size.height;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  var x = size.x,\n    width = size.width;\n  var caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  var x = size.x,\n    width = size.width;\n  var chartWidth = chart.width,\n    _chart$chartArea = chart.chartArea,\n    left = _chart$chartArea.left,\n    right = _chart$chartArea.right;\n  var xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  var yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign: yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  var x = size.x,\n    width = size.width;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  var y = size.y,\n    height = size.height;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  var caretSize = options.caretSize,\n    caretPadding = options.caretPadding,\n    cornerRadius = options.cornerRadius;\n  var xAlign = alignment.xAlign,\n    yAlign = alignment.yAlign;\n  var paddingAndSize = caretSize + caretPadding;\n  var _toTRBLCorners = toTRBLCorners(cornerRadius),\n    topLeft = _toTRBLCorners.topLeft,\n    topRight = _toTRBLCorners.topRight,\n    bottomLeft = _toTRBLCorners.bottomLeft,\n    bottomRight = _toTRBLCorners.bottomRight;\n  var x = alignX(size, xAlign);\n  var y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  var padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip: tooltip,\n    tooltipItems: tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  var override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nvar defaultCallbacks = {\n  beforeTitle: noop,\n  title: function title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      var item = tooltipItems[0];\n      var labels = item.chart.data.labels;\n      var labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n  label: function label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    var label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    var value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor: function labelColor(tooltipItem) {\n    var meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    var options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor: function labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle: function labelPointStyle(tooltipItem) {\n    var meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    var options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  var result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nvar Tooltip = /*#__PURE__*/function (_Element8) {\n  _inherits(Tooltip, _Element8);\n  var _super18 = _createSuper(Tooltip);\n  function Tooltip(config) {\n    var _this31;\n    _classCallCheck(this, Tooltip);\n    _this31 = _super18.call(this);\n    _this31.opacity = 0;\n    _this31._active = [];\n    _this31._eventPosition = undefined;\n    _this31._size = undefined;\n    _this31._cachedAnimations = undefined;\n    _this31._tooltipItems = [];\n    _this31.$animations = undefined;\n    _this31.$context = undefined;\n    _this31.chart = config.chart;\n    _this31.options = config.options;\n    _this31.dataPoints = undefined;\n    _this31.title = undefined;\n    _this31.beforeBody = undefined;\n    _this31.body = undefined;\n    _this31.afterBody = undefined;\n    _this31.footer = undefined;\n    _this31.xAlign = undefined;\n    _this31.yAlign = undefined;\n    _this31.x = undefined;\n    _this31.y = undefined;\n    _this31.height = undefined;\n    _this31.width = undefined;\n    _this31.caretX = undefined;\n    _this31.caretY = undefined;\n    _this31.labelColors = undefined;\n    _this31.labelPointStyles = undefined;\n    _this31.labelTextColors = undefined;\n    return _this31;\n  }\n  _createClass(Tooltip, [{\n    key: \"initialize\",\n    value: function initialize(options) {\n      this.options = options;\n      this._cachedAnimations = undefined;\n      this.$context = undefined;\n    }\n  }, {\n    key: \"_resolveAnimations\",\n    value: function _resolveAnimations() {\n      var cached = this._cachedAnimations;\n      if (cached) {\n        return cached;\n      }\n      var chart = this.chart;\n      var options = this.options.setContext(this.getContext());\n      var opts = options.enabled && chart.options.animation && options.animations;\n      var animations = new Animations(this.chart, opts);\n      if (opts._cacheable) {\n        this._cachedAnimations = Object.freeze(animations);\n      }\n      return animations;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n  }, {\n    key: \"getTitle\",\n    value: function getTitle(context, options) {\n      var callbacks = options.callbacks;\n      var beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n      var title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n      var afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n      lines = pushOrConcat(lines, splitNewlines(title));\n      lines = pushOrConcat(lines, splitNewlines(afterTitle));\n      return lines;\n    }\n  }, {\n    key: \"getBeforeBody\",\n    value: function getBeforeBody(tooltipItems, options) {\n      return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n  }, {\n    key: \"getBody\",\n    value: function getBody(tooltipItems, options) {\n      var _this32 = this;\n      var callbacks = options.callbacks;\n      var bodyItems = [];\n      each(tooltipItems, function (context) {\n        var bodyItem = {\n          before: [],\n          lines: [],\n          after: []\n        };\n        var scoped = overrideCallbacks(callbacks, context);\n        pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', _this32, context)));\n        pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', _this32, context));\n        pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', _this32, context)));\n        bodyItems.push(bodyItem);\n      });\n      return bodyItems;\n    }\n  }, {\n    key: \"getAfterBody\",\n    value: function getAfterBody(tooltipItems, options) {\n      return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n  }, {\n    key: \"getFooter\",\n    value: function getFooter(tooltipItems, options) {\n      var callbacks = options.callbacks;\n      var beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n      var footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n      var afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n      lines = pushOrConcat(lines, splitNewlines(footer));\n      lines = pushOrConcat(lines, splitNewlines(afterFooter));\n      return lines;\n    }\n  }, {\n    key: \"_createItems\",\n    value: function _createItems(options) {\n      var _this33 = this;\n      var active = this._active;\n      var data = this.chart.data;\n      var labelColors = [];\n      var labelPointStyles = [];\n      var labelTextColors = [];\n      var tooltipItems = [];\n      var i, len;\n      for (i = 0, len = active.length; i < len; ++i) {\n        tooltipItems.push(createTooltipItem(this.chart, active[i]));\n      }\n      if (options.filter) {\n        tooltipItems = tooltipItems.filter(function (element, index, array) {\n          return options.filter(element, index, array, data);\n        });\n      }\n      if (options.itemSort) {\n        tooltipItems = tooltipItems.sort(function (a, b) {\n          return options.itemSort(a, b, data);\n        });\n      }\n      each(tooltipItems, function (context) {\n        var scoped = overrideCallbacks(options.callbacks, context);\n        labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', _this33, context));\n        labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', _this33, context));\n        labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', _this33, context));\n      });\n      this.labelColors = labelColors;\n      this.labelPointStyles = labelPointStyles;\n      this.labelTextColors = labelTextColors;\n      this.dataPoints = tooltipItems;\n      return tooltipItems;\n    }\n  }, {\n    key: \"update\",\n    value: function update(changed, replay) {\n      var options = this.options.setContext(this.getContext());\n      var active = this._active;\n      var properties;\n      var tooltipItems = [];\n      if (!active.length) {\n        if (this.opacity !== 0) {\n          properties = {\n            opacity: 0\n          };\n        }\n      } else {\n        var position = positioners[options.position].call(this, active, this._eventPosition);\n        tooltipItems = this._createItems(options);\n        this.title = this.getTitle(tooltipItems, options);\n        this.beforeBody = this.getBeforeBody(tooltipItems, options);\n        this.body = this.getBody(tooltipItems, options);\n        this.afterBody = this.getAfterBody(tooltipItems, options);\n        this.footer = this.getFooter(tooltipItems, options);\n        var size = this._size = getTooltipSize(this, options);\n        var positionAndSize = Object.assign({}, position, size);\n        var alignment = determineAlignment(this.chart, options, positionAndSize);\n        var backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        properties = {\n          opacity: 1,\n          x: backgroundPoint.x,\n          y: backgroundPoint.y,\n          width: size.width,\n          height: size.height,\n          caretX: position.x,\n          caretY: position.y\n        };\n      }\n      this._tooltipItems = tooltipItems;\n      this.$context = undefined;\n      if (properties) {\n        this._resolveAnimations().update(this, properties);\n      }\n      if (changed && options.external) {\n        options.external.call(this, {\n          chart: this.chart,\n          tooltip: this,\n          replay: replay\n        });\n      }\n    }\n  }, {\n    key: \"drawCaret\",\n    value: function drawCaret(tooltipPoint, ctx, size, options) {\n      var caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n      ctx.lineTo(caretPosition.x1, caretPosition.y1);\n      ctx.lineTo(caretPosition.x2, caretPosition.y2);\n      ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n  }, {\n    key: \"getCaretPosition\",\n    value: function getCaretPosition(tooltipPoint, size, options) {\n      var xAlign = this.xAlign,\n        yAlign = this.yAlign;\n      var caretSize = options.caretSize,\n        cornerRadius = options.cornerRadius;\n      var _toTRBLCorners2 = toTRBLCorners(cornerRadius),\n        topLeft = _toTRBLCorners2.topLeft,\n        topRight = _toTRBLCorners2.topRight,\n        bottomLeft = _toTRBLCorners2.bottomLeft,\n        bottomRight = _toTRBLCorners2.bottomRight;\n      var ptX = tooltipPoint.x,\n        ptY = tooltipPoint.y;\n      var width = size.width,\n        height = size.height;\n      var x1, x2, x3, y1, y2, y3;\n      if (yAlign === 'center') {\n        y2 = ptY + height / 2;\n        if (xAlign === 'left') {\n          x1 = ptX;\n          x2 = x1 - caretSize;\n          y1 = y2 + caretSize;\n          y3 = y2 - caretSize;\n        } else {\n          x1 = ptX + width;\n          x2 = x1 + caretSize;\n          y1 = y2 - caretSize;\n          y3 = y2 + caretSize;\n        }\n        x3 = x1;\n      } else {\n        if (xAlign === 'left') {\n          x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n        } else if (xAlign === 'right') {\n          x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n        } else {\n          x2 = this.caretX;\n        }\n        if (yAlign === 'top') {\n          y1 = ptY;\n          y2 = y1 - caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else {\n          y1 = ptY + height;\n          y2 = y1 + caretSize;\n          x1 = x2 + caretSize;\n          x3 = x2 - caretSize;\n        }\n        y3 = y1;\n      }\n      return {\n        x1: x1,\n        x2: x2,\n        x3: x3,\n        y1: y1,\n        y2: y2,\n        y3: y3\n      };\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle(pt, ctx, options) {\n      var title = this.title;\n      var length = title.length;\n      var titleFont, titleSpacing, i;\n      if (length) {\n        var rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        pt.x = getAlignedX(this, options.titleAlign, options);\n        ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n        ctx.textBaseline = 'middle';\n        titleFont = toFont(options.titleFont);\n        titleSpacing = options.titleSpacing;\n        ctx.fillStyle = options.titleColor;\n        ctx.font = titleFont.string;\n        for (i = 0; i < length; ++i) {\n          ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n          pt.y += titleFont.lineHeight + titleSpacing;\n          if (i + 1 === length) {\n            pt.y += options.titleMarginBottom - titleSpacing;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_drawColorBox\",\n    value: function _drawColorBox(ctx, pt, i, rtlHelper, options) {\n      var labelColors = this.labelColors[i];\n      var labelPointStyle = this.labelPointStyles[i];\n      var boxHeight = options.boxHeight,\n        boxWidth = options.boxWidth,\n        boxPadding = options.boxPadding;\n      var bodyFont = toFont(options.bodyFont);\n      var colorX = getAlignedX(this, 'left', options);\n      var rtlColorX = rtlHelper.x(colorX);\n      var yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n      var colorY = pt.y + yOffSet;\n      if (options.usePointStyle) {\n        var drawOptions = {\n          radius: Math.min(boxWidth, boxHeight) / 2,\n          pointStyle: labelPointStyle.pointStyle,\n          rotation: labelPointStyle.rotation,\n          borderWidth: 1\n        };\n        var centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n        var centerY = colorY + boxHeight / 2;\n        ctx.strokeStyle = options.multiKeyBackground;\n        ctx.fillStyle = options.multiKeyBackground;\n        drawPoint(ctx, drawOptions, centerX, centerY);\n        ctx.strokeStyle = labelColors.borderColor;\n        ctx.fillStyle = labelColors.backgroundColor;\n        drawPoint(ctx, drawOptions, centerX, centerY);\n      } else {\n        ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max.apply(Math, _toConsumableArray(Object.values(labelColors.borderWidth))) : labelColors.borderWidth || 1;\n        ctx.strokeStyle = labelColors.borderColor;\n        ctx.setLineDash(labelColors.borderDash || []);\n        ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n        var outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n        var innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n        var borderRadius = toTRBLCorners(labelColors.borderRadius);\n        if (Object.values(borderRadius).some(function (v) {\n          return v !== 0;\n        })) {\n          ctx.beginPath();\n          ctx.fillStyle = options.multiKeyBackground;\n          addRoundedRectPath(ctx, {\n            x: outerX,\n            y: colorY,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n          ctx.fill();\n          ctx.stroke();\n          ctx.fillStyle = labelColors.backgroundColor;\n          ctx.beginPath();\n          addRoundedRectPath(ctx, {\n            x: innerX,\n            y: colorY + 1,\n            w: boxWidth - 2,\n            h: boxHeight - 2,\n            radius: borderRadius\n          });\n          ctx.fill();\n        } else {\n          ctx.fillStyle = options.multiKeyBackground;\n          ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n          ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n          ctx.fillStyle = labelColors.backgroundColor;\n          ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n        }\n      }\n      ctx.fillStyle = this.labelTextColors[i];\n    }\n  }, {\n    key: \"drawBody\",\n    value: function drawBody(pt, ctx, options) {\n      var body = this.body;\n      var bodySpacing = options.bodySpacing,\n        bodyAlign = options.bodyAlign,\n        displayColors = options.displayColors,\n        boxHeight = options.boxHeight,\n        boxWidth = options.boxWidth,\n        boxPadding = options.boxPadding;\n      var bodyFont = toFont(options.bodyFont);\n      var bodyLineHeight = bodyFont.lineHeight;\n      var xLinePadding = 0;\n      var rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      var fillLineOfText = function fillLineOfText(line) {\n        ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n        pt.y += bodyLineHeight + bodySpacing;\n      };\n      var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n      var bodyItem, textColor, lines, i, j, ilen, jlen;\n      ctx.textAlign = bodyAlign;\n      ctx.textBaseline = 'middle';\n      ctx.font = bodyFont.string;\n      pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n      ctx.fillStyle = options.bodyColor;\n      each(this.beforeBody, fillLineOfText);\n      xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n      for (i = 0, ilen = body.length; i < ilen; ++i) {\n        bodyItem = body[i];\n        textColor = this.labelTextColors[i];\n        ctx.fillStyle = textColor;\n        each(bodyItem.before, fillLineOfText);\n        lines = bodyItem.lines;\n        if (displayColors && lines.length) {\n          this._drawColorBox(ctx, pt, i, rtlHelper, options);\n          bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n        }\n        for (j = 0, jlen = lines.length; j < jlen; ++j) {\n          fillLineOfText(lines[j]);\n          bodyLineHeight = bodyFont.lineHeight;\n        }\n        each(bodyItem.after, fillLineOfText);\n      }\n      xLinePadding = 0;\n      bodyLineHeight = bodyFont.lineHeight;\n      each(this.afterBody, fillLineOfText);\n      pt.y -= bodySpacing;\n    }\n  }, {\n    key: \"drawFooter\",\n    value: function drawFooter(pt, ctx, options) {\n      var footer = this.footer;\n      var length = footer.length;\n      var footerFont, i;\n      if (length) {\n        var rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        pt.x = getAlignedX(this, options.footerAlign, options);\n        pt.y += options.footerMarginTop;\n        ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n        ctx.textBaseline = 'middle';\n        footerFont = toFont(options.footerFont);\n        ctx.fillStyle = options.footerColor;\n        ctx.font = footerFont.string;\n        for (i = 0; i < length; ++i) {\n          ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n          pt.y += footerFont.lineHeight + options.footerSpacing;\n        }\n      }\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground(pt, ctx, tooltipSize, options) {\n      var xAlign = this.xAlign,\n        yAlign = this.yAlign;\n      var x = pt.x,\n        y = pt.y;\n      var width = tooltipSize.width,\n        height = tooltipSize.height;\n      var _toTRBLCorners3 = toTRBLCorners(options.cornerRadius),\n        topLeft = _toTRBLCorners3.topLeft,\n        topRight = _toTRBLCorners3.topRight,\n        bottomLeft = _toTRBLCorners3.bottomLeft,\n        bottomRight = _toTRBLCorners3.bottomRight;\n      ctx.fillStyle = options.backgroundColor;\n      ctx.strokeStyle = options.borderColor;\n      ctx.lineWidth = options.borderWidth;\n      ctx.beginPath();\n      ctx.moveTo(x + topLeft, y);\n      if (yAlign === 'top') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x + width - topRight, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n      if (yAlign === 'center' && xAlign === 'right') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x + width, y + height - bottomRight);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n      if (yAlign === 'bottom') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x + bottomLeft, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n      if (yAlign === 'center' && xAlign === 'left') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x, y + topLeft);\n      ctx.quadraticCurveTo(x, y, x + topLeft, y);\n      ctx.closePath();\n      ctx.fill();\n      if (options.borderWidth > 0) {\n        ctx.stroke();\n      }\n    }\n  }, {\n    key: \"_updateAnimationTarget\",\n    value: function _updateAnimationTarget(options) {\n      var chart = this.chart;\n      var anims = this.$animations;\n      var animX = anims && anims.x;\n      var animY = anims && anims.y;\n      if (animX || animY) {\n        var position = positioners[options.position].call(this, this._active, this._eventPosition);\n        if (!position) {\n          return;\n        }\n        var size = this._size = getTooltipSize(this, options);\n        var positionAndSize = Object.assign({}, position, this._size);\n        var alignment = determineAlignment(chart, options, positionAndSize);\n        var point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n        if (animX._to !== point.x || animY._to !== point.y) {\n          this.xAlign = alignment.xAlign;\n          this.yAlign = alignment.yAlign;\n          this.width = size.width;\n          this.height = size.height;\n          this.caretX = position.x;\n          this.caretY = position.y;\n          this._resolveAnimations().update(this, point);\n        }\n      }\n    }\n  }, {\n    key: \"_willRender\",\n    value: function _willRender() {\n      return !!this.opacity;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var options = this.options.setContext(this.getContext());\n      var opacity = this.opacity;\n      if (!opacity) {\n        return;\n      }\n      this._updateAnimationTarget(options);\n      var tooltipSize = {\n        width: this.width,\n        height: this.height\n      };\n      var pt = {\n        x: this.x,\n        y: this.y\n      };\n      opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n      var padding = toPadding(options.padding);\n      var hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n      if (options.enabled && hasTooltipContent) {\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        this.drawBackground(pt, ctx, tooltipSize, options);\n        overrideTextDirection(ctx, options.textDirection);\n        pt.y += padding.top;\n        this.drawTitle(pt, ctx, options);\n        this.drawBody(pt, ctx, options);\n        this.drawFooter(pt, ctx, options);\n        restoreTextDirection(ctx, options.textDirection);\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"getActiveElements\",\n    value: function getActiveElements() {\n      return this._active || [];\n    }\n  }, {\n    key: \"setActiveElements\",\n    value: function setActiveElements(activeElements, eventPosition) {\n      var _this34 = this;\n      var lastActive = this._active;\n      var active = activeElements.map(function (_ref11) {\n        var datasetIndex = _ref11.datasetIndex,\n          index = _ref11.index;\n        var meta = _this34.chart.getDatasetMeta(datasetIndex);\n        if (!meta) {\n          throw new Error('Cannot find a dataset at index ' + datasetIndex);\n        }\n        return {\n          datasetIndex: datasetIndex,\n          element: meta.data[index],\n          index: index\n        };\n      });\n      var changed = !_elementsEqual(lastActive, active);\n      var positionChanged = this._positionChanged(active, eventPosition);\n      if (changed || positionChanged) {\n        this._active = active;\n        this._eventPosition = eventPosition;\n        this._ignoreReplayEvents = true;\n        this.update(true);\n      }\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(e, replay) {\n      var inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (replay && this._ignoreReplayEvents) {\n        return false;\n      }\n      this._ignoreReplayEvents = false;\n      var options = this.options;\n      var lastActive = this._active || [];\n      var active = this._getActiveElements(e, lastActive, replay, inChartArea);\n      var positionChanged = this._positionChanged(active, e);\n      var changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n      if (changed) {\n        this._active = active;\n        if (options.enabled || options.external) {\n          this._eventPosition = {\n            x: e.x,\n            y: e.y\n          };\n          this.update(true, replay);\n        }\n      }\n      return changed;\n    }\n  }, {\n    key: \"_getActiveElements\",\n    value: function _getActiveElements(e, lastActive, replay, inChartArea) {\n      var options = this.options;\n      if (e.type === 'mouseout') {\n        return [];\n      }\n      if (!inChartArea) {\n        return lastActive;\n      }\n      var active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n      if (options.reverse) {\n        active.reverse();\n      }\n      return active;\n    }\n  }, {\n    key: \"_positionChanged\",\n    value: function _positionChanged(active, e) {\n      var caretX = this.caretX,\n        caretY = this.caretY,\n        options = this.options;\n      var position = positioners[options.position].call(this, active, e);\n      return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n  }]);\n  return Tooltip;\n}(Element);\n_defineProperty(Tooltip, \"positioners\", positioners);\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners: positioners,\n  afterInit: function afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart: chart,\n        options: options\n      });\n    }\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset: function reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw: function afterDraw(chart) {\n    var tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      var args = {\n        tooltip: tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', _objectSpread(_objectSpread({}, args), {}, {\n        cancelable: true\n      })) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent: function afterEvent(chart, args) {\n    if (chart.tooltip) {\n      var useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: function boxHeight(ctx, opts) {\n      return opts.bodyFont.size;\n    },\n    boxWidth: function boxWidth(ctx, opts) {\n      return opts.bodyFont.size;\n    },\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: function _scriptable(name) {\n      return name !== 'filter' && name !== 'itemSort' && name !== 'external';\n    },\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nvar addIfString = function addIfString(labels, raw, index, addedLabels) {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index: index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  var first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  var last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nvar validIndex = function validIndex(index, max) {\n  return index === null ? null : _limitValue(Math.round(index), 0, max);\n};\nfunction _getLabelForValue(value) {\n  var labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nvar CategoryScale = /*#__PURE__*/function (_Scale) {\n  _inherits(CategoryScale, _Scale);\n  var _super19 = _createSuper(CategoryScale);\n  function CategoryScale(cfg) {\n    var _this35;\n    _classCallCheck(this, CategoryScale);\n    _this35 = _super19.call(this, cfg);\n    _this35._startValue = undefined;\n    _this35._valueRange = 0;\n    _this35._addedLabels = [];\n    return _this35;\n  }\n  _createClass(CategoryScale, [{\n    key: \"init\",\n    value: function init(scaleOptions) {\n      var added = this._addedLabels;\n      if (added.length) {\n        var labels = this.getLabels();\n        var _iterator25 = _createForOfIteratorHelper(added),\n          _step25;\n        try {\n          for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n            var _step25$value = _step25.value,\n              _index3 = _step25$value.index,\n              label = _step25$value.label;\n            if (labels[_index3] === label) {\n              labels.splice(_index3, 1);\n            }\n          }\n        } catch (err) {\n          _iterator25.e(err);\n        } finally {\n          _iterator25.f();\n        }\n        this._addedLabels = [];\n      }\n      _get(_getPrototypeOf(CategoryScale.prototype), \"init\", this).call(this, scaleOptions);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(raw, index) {\n      if (isNullOrUndef(raw)) {\n        return null;\n      }\n      var labels = this.getLabels();\n      index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n      return validIndex(index, labels.length - 1);\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getUserBounds2 = this.getUserBounds(),\n        minDefined = _this$getUserBounds2.minDefined,\n        maxDefined = _this$getUserBounds2.maxDefined;\n      var _this$getMinMax = this.getMinMax(true),\n        min = _this$getMinMax.min,\n        max = _this$getMinMax.max;\n      if (this.options.bounds === 'ticks') {\n        if (!minDefined) {\n          min = 0;\n        }\n        if (!maxDefined) {\n          max = this.getLabels().length - 1;\n        }\n      }\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var min = this.min;\n      var max = this.max;\n      var offset = this.options.offset;\n      var ticks = [];\n      var labels = this.getLabels();\n      labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n      this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n      this._startValue = this.min - (offset ? 0.5 : 0);\n      for (var value = min; value <= max; value++) {\n        ticks.push({\n          value: value\n        });\n      }\n      return ticks;\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return _getLabelForValue.call(this, value);\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      _get(_getPrototypeOf(CategoryScale.prototype), \"configure\", this).call(this);\n      if (!this.isHorizontal()) {\n        this._reversePixels = !this._reversePixels;\n      }\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      if (typeof value !== 'number') {\n        value = this.parse(value);\n      }\n      return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n  }, {\n    key: \"getPixelForTick\",\n    value: function getPixelForTick(index) {\n      var ticks = this.ticks;\n      if (index < 0 || index > ticks.length - 1) {\n        return null;\n      }\n      return this.getPixelForValue(ticks[index].value);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n  }, {\n    key: \"getBasePixel\",\n    value: function getBasePixel() {\n      return this.bottom;\n    }\n  }]);\n  return CategoryScale;\n}(Scale);\n_defineProperty(CategoryScale, \"id\", 'category');\n_defineProperty(CategoryScale, \"defaults\", {\n  ticks: {\n    callback: _getLabelForValue\n  }\n});\nfunction generateTicks$1(generationOptions, dataRange) {\n  var ticks = [];\n  var MIN_SPACING = 1e-14;\n  var bounds = generationOptions.bounds,\n    step = generationOptions.step,\n    min = generationOptions.min,\n    max = generationOptions.max,\n    precision = generationOptions.precision,\n    count = generationOptions.count,\n    maxTicks = generationOptions.maxTicks,\n    maxDigits = generationOptions.maxDigits,\n    includeBounds = generationOptions.includeBounds;\n  var unit = step || 1;\n  var maxSpaces = maxTicks - 1;\n  var rmin = dataRange.min,\n    rmax = dataRange.max;\n  var minDefined = !isNullOrUndef(min);\n  var maxDefined = !isNullOrUndef(max);\n  var countDefined = !isNullOrUndef(count);\n  var minSpacing = (rmax - rmin) / (maxDigits + 1);\n  var spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  var factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  var decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  var j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    ticks.push({\n      value: Math.round((niceMin + j * spacing) * factor) / factor\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, _ref12) {\n  var horizontal = _ref12.horizontal,\n    minRotation = _ref12.minRotation;\n  var rad = toRadians(minRotation);\n  var ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  var length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nvar LinearScaleBase = /*#__PURE__*/function (_Scale2) {\n  _inherits(LinearScaleBase, _Scale2);\n  var _super20 = _createSuper(LinearScaleBase);\n  function LinearScaleBase(cfg) {\n    var _this36;\n    _classCallCheck(this, LinearScaleBase);\n    _this36 = _super20.call(this, cfg);\n    _this36.start = undefined;\n    _this36.end = undefined;\n    _this36._startValue = undefined;\n    _this36._endValue = undefined;\n    _this36._valueRange = 0;\n    return _this36;\n  }\n  _createClass(LinearScaleBase, [{\n    key: \"parse\",\n    value: function parse(raw, index) {\n      if (isNullOrUndef(raw)) {\n        return null;\n      }\n      if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n        return null;\n      }\n      return +raw;\n    }\n  }, {\n    key: \"handleTickRangeOptions\",\n    value: function handleTickRangeOptions() {\n      var beginAtZero = this.options.beginAtZero;\n      var _this$getUserBounds3 = this.getUserBounds(),\n        minDefined = _this$getUserBounds3.minDefined,\n        maxDefined = _this$getUserBounds3.maxDefined;\n      var min = this.min,\n        max = this.max;\n      var setMin = function setMin(v) {\n        return min = minDefined ? min : v;\n      };\n      var setMax = function setMax(v) {\n        return max = maxDefined ? max : v;\n      };\n      if (beginAtZero) {\n        var minSign = sign(min);\n        var maxSign = sign(max);\n        if (minSign < 0 && maxSign < 0) {\n          setMax(0);\n        } else if (minSign > 0 && maxSign > 0) {\n          setMin(0);\n        }\n      }\n      if (min === max) {\n        var offset = max === 0 ? 1 : Math.abs(max * 0.05);\n        setMax(max + offset);\n        if (!beginAtZero) {\n          setMin(min - offset);\n        }\n      }\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"getTickLimit\",\n    value: function getTickLimit() {\n      var tickOpts = this.options.ticks;\n      var maxTicksLimit = tickOpts.maxTicksLimit,\n        stepSize = tickOpts.stepSize;\n      var maxTicks;\n      if (stepSize) {\n        maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n        if (maxTicks > 1000) {\n          console.warn(\"scales.\".concat(this.id, \".ticks.stepSize: \").concat(stepSize, \" would result generating up to \").concat(maxTicks, \" ticks. Limiting to 1000.\"));\n          maxTicks = 1000;\n        }\n      } else {\n        maxTicks = this.computeTickLimit();\n        maxTicksLimit = maxTicksLimit || 11;\n      }\n      if (maxTicksLimit) {\n        maxTicks = Math.min(maxTicksLimit, maxTicks);\n      }\n      return maxTicks;\n    }\n  }, {\n    key: \"computeTickLimit\",\n    value: function computeTickLimit() {\n      return Number.POSITIVE_INFINITY;\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var opts = this.options;\n      var tickOpts = opts.ticks;\n      var maxTicks = this.getTickLimit();\n      maxTicks = Math.max(2, maxTicks);\n      var numericGeneratorOptions = {\n        maxTicks: maxTicks,\n        bounds: opts.bounds,\n        min: opts.min,\n        max: opts.max,\n        precision: tickOpts.precision,\n        step: tickOpts.stepSize,\n        count: tickOpts.count,\n        maxDigits: this._maxDigits(),\n        horizontal: this.isHorizontal(),\n        minRotation: tickOpts.minRotation || 0,\n        includeBounds: tickOpts.includeBounds !== false\n      };\n      var dataRange = this._range || this;\n      var ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n      if (opts.bounds === 'ticks') {\n        _setMinAndMaxByKey(ticks, this, 'value');\n      }\n      if (opts.reverse) {\n        ticks.reverse();\n        this.start = this.max;\n        this.end = this.min;\n      } else {\n        this.start = this.min;\n        this.end = this.max;\n      }\n      return ticks;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var ticks = this.ticks;\n      var start = this.min;\n      var end = this.max;\n      _get(_getPrototypeOf(LinearScaleBase.prototype), \"configure\", this).call(this);\n      if (this.options.offset && ticks.length) {\n        var offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n        start -= offset;\n        end += offset;\n      }\n      this._startValue = start;\n      this._endValue = end;\n      this._valueRange = end - start;\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n  }]);\n  return LinearScaleBase;\n}(Scale);\nvar LinearScale = /*#__PURE__*/function (_LinearScaleBase) {\n  _inherits(LinearScale, _LinearScaleBase);\n  var _super21 = _createSuper(LinearScale);\n  function LinearScale() {\n    _classCallCheck(this, LinearScale);\n    return _super21.apply(this, arguments);\n  }\n  _createClass(LinearScale, [{\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getMinMax2 = this.getMinMax(true),\n        min = _this$getMinMax2.min,\n        max = _this$getMinMax2.max;\n      this.min = isNumberFinite(min) ? min : 0;\n      this.max = isNumberFinite(max) ? max : 1;\n      this.handleTickRangeOptions();\n    }\n  }, {\n    key: \"computeTickLimit\",\n    value: function computeTickLimit() {\n      var horizontal = this.isHorizontal();\n      var length = horizontal ? this.width : this.height;\n      var minRotation = toRadians(this.options.ticks.minRotation);\n      var ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n      var tickFont = this._resolveTickFontOptions(0);\n      return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n  }]);\n  return LinearScale;\n}(LinearScaleBase);\n_defineProperty(LinearScale, \"id\", 'linear');\n_defineProperty(LinearScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n});\nvar log10Floor = function log10Floor(v) {\n  return Math.floor(log10(v));\n};\nvar changeExponent = function changeExponent(v, m) {\n  return Math.pow(10, log10Floor(v) + m);\n};\nfunction isMajor(tickVal) {\n  var remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  var rangeStep = Math.pow(10, rangeExp);\n  var start = Math.floor(min / rangeStep);\n  var end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  var range = max - min;\n  var rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, _ref13) {\n  var min = _ref13.min,\n    max = _ref13.max;\n  min = finiteOrDefault(generationOptions.min, min);\n  var ticks = [];\n  var minExp = log10Floor(min);\n  var exp = startExp(min, max);\n  var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  var stepSize = Math.pow(10, exp);\n  var base = minExp > exp ? Math.pow(10, minExp) : 0;\n  var start = Math.round((min - base) * precision) / precision;\n  var offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  var significand = Math.floor((start - offset) / Math.pow(10, exp));\n  var value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value: value,\n      major: isMajor(value),\n      significand: significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  var lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand: significand\n  });\n  return ticks;\n}\nvar LogarithmicScale = /*#__PURE__*/function (_Scale3) {\n  _inherits(LogarithmicScale, _Scale3);\n  var _super22 = _createSuper(LogarithmicScale);\n  function LogarithmicScale(cfg) {\n    var _this37;\n    _classCallCheck(this, LogarithmicScale);\n    _this37 = _super22.call(this, cfg);\n    _this37.start = undefined;\n    _this37.end = undefined;\n    _this37._startValue = undefined;\n    _this37._valueRange = 0;\n    return _this37;\n  }\n  _createClass(LogarithmicScale, [{\n    key: \"parse\",\n    value: function parse(raw, index) {\n      var value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n      if (value === 0) {\n        this._zero = true;\n        return undefined;\n      }\n      return isNumberFinite(value) && value > 0 ? value : null;\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getMinMax3 = this.getMinMax(true),\n        min = _this$getMinMax3.min,\n        max = _this$getMinMax3.max;\n      this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n      this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n      if (this.options.beginAtZero) {\n        this._zero = true;\n      }\n      if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n        this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n      }\n      this.handleTickRangeOptions();\n    }\n  }, {\n    key: \"handleTickRangeOptions\",\n    value: function handleTickRangeOptions() {\n      var _this$getUserBounds4 = this.getUserBounds(),\n        minDefined = _this$getUserBounds4.minDefined,\n        maxDefined = _this$getUserBounds4.maxDefined;\n      var min = this.min;\n      var max = this.max;\n      var setMin = function setMin(v) {\n        return min = minDefined ? min : v;\n      };\n      var setMax = function setMax(v) {\n        return max = maxDefined ? max : v;\n      };\n      if (min === max) {\n        if (min <= 0) {\n          setMin(1);\n          setMax(10);\n        } else {\n          setMin(changeExponent(min, -1));\n          setMax(changeExponent(max, +1));\n        }\n      }\n      if (min <= 0) {\n        setMin(changeExponent(max, -1));\n      }\n      if (max <= 0) {\n        setMax(changeExponent(min, +1));\n      }\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var opts = this.options;\n      var generationOptions = {\n        min: this._userMin,\n        max: this._userMax\n      };\n      var ticks = generateTicks(generationOptions, this);\n      if (opts.bounds === 'ticks') {\n        _setMinAndMaxByKey(ticks, this, 'value');\n      }\n      if (opts.reverse) {\n        ticks.reverse();\n        this.start = this.max;\n        this.end = this.min;\n      } else {\n        this.start = this.min;\n        this.end = this.max;\n      }\n      return ticks;\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var start = this.min;\n      _get(_getPrototypeOf(LogarithmicScale.prototype), \"configure\", this).call(this);\n      this._startValue = log10(start);\n      this._valueRange = log10(this.max) - log10(start);\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      if (value === undefined || value === 0) {\n        value = this.min;\n      }\n      if (value === null || isNaN(value)) {\n        return NaN;\n      }\n      return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var decimal = this.getDecimalForPixel(pixel);\n      return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n  }]);\n  return LogarithmicScale;\n}(Scale);\n_defineProperty(LogarithmicScale, \"id\", 'logarithmic');\n_defineProperty(LogarithmicScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n});\nfunction getTickBackdropHeight(opts) {\n  var tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    var padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  var orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  var limits = Object.assign({}, orig);\n  var labelSizes = [];\n  var padding = [];\n  var valueCount = scale._pointLabels.length;\n  var pointLabelOpts = scale.options.pointLabels;\n  var additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (var i = 0; i < valueCount; i++) {\n    var opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    var pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    var plFont = toFont(opts.font);\n    var textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    var angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    var angle = Math.round(toDegrees(angleRadians));\n    var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  var sin = Math.abs(Math.sin(angle));\n  var cos = Math.abs(Math.cos(angle));\n  var x = 0;\n  var y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  var items = [];\n  var valueCount = scale._pointLabels.length;\n  var opts = scale.options;\n  var extra = getTickBackdropHeight(opts) / 2;\n  var outerDistance = scale.drawingArea;\n  var additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n  for (var i = 0; i < valueCount; i++) {\n    var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    var angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    var size = labelSizes[i];\n    var y = yForAngle(pointLabelPosition.y, size.h, angle);\n    var textAlign = getTextAlignForAngle(angle);\n    var left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    items.push({\n      x: pointLabelPosition.x,\n      y: y,\n      textAlign: textAlign,\n      left: left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n  var ctx = scale.ctx,\n    pointLabels = scale.options.pointLabels;\n  for (var i = labelCount - 1; i >= 0; i--) {\n    var optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    var plFont = toFont(optsAtIndex.font);\n    var _scale$_pointLabelIte = scale._pointLabelItems[i],\n      x = _scale$_pointLabelIte.x,\n      y = _scale$_pointLabelIte.y,\n      textAlign = _scale$_pointLabelIte.textAlign,\n      left = _scale$_pointLabelIte.left,\n      top = _scale$_pointLabelIte.top,\n      right = _scale$_pointLabelIte.right,\n      bottom = _scale$_pointLabelIte.bottom;\n    var _optsAtIndex = optsAtIndex,\n      backdropColor = _optsAtIndex.backdropColor;\n    if (!isNullOrUndef(backdropColor)) {\n      var borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      var padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n      var backdropLeft = left - padding.left;\n      var backdropTop = top - padding.top;\n      var backdropWidth = right - left + padding.width;\n      var backdropHeight = bottom - top + padding.height;\n      if (Object.values(borderRadius).some(function (v) {\n        return v !== 0;\n      })) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  var ctx = scale.ctx;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    var pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (var i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  var ctx = scale.ctx;\n  var circular = gridLineOpts.circular;\n  var color = gridLineOpts.color,\n    lineWidth = gridLineOpts.lineWidth;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label: label,\n    index: index,\n    type: 'pointLabel'\n  });\n}\nvar RadialLinearScale = /*#__PURE__*/function (_LinearScaleBase2) {\n  _inherits(RadialLinearScale, _LinearScaleBase2);\n  var _super23 = _createSuper(RadialLinearScale);\n  function RadialLinearScale(cfg) {\n    var _this38;\n    _classCallCheck(this, RadialLinearScale);\n    _this38 = _super23.call(this, cfg);\n    _this38.xCenter = undefined;\n    _this38.yCenter = undefined;\n    _this38.drawingArea = undefined;\n    _this38._pointLabels = [];\n    _this38._pointLabelItems = [];\n    return _this38;\n  }\n  _createClass(RadialLinearScale, [{\n    key: \"setDimensions\",\n    value: function setDimensions() {\n      var padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n      var w = this.width = this.maxWidth - padding.width;\n      var h = this.height = this.maxHeight - padding.height;\n      this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n      this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n      this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getMinMax4 = this.getMinMax(false),\n        min = _this$getMinMax4.min,\n        max = _this$getMinMax4.max;\n      this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n      this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n      this.handleTickRangeOptions();\n    }\n  }, {\n    key: \"computeTickLimit\",\n    value: function computeTickLimit() {\n      return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n  }, {\n    key: \"generateTickLabels\",\n    value: function generateTickLabels(ticks) {\n      var _this39 = this;\n      LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n      this._pointLabels = this.getLabels().map(function (value, index) {\n        var label = callback(_this39.options.pointLabels.callback, [value, index], _this39);\n        return label || label === 0 ? label : '';\n      }).filter(function (v, i) {\n        return _this39.chart.getDataVisibility(i);\n      });\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var opts = this.options;\n      if (opts.display && opts.pointLabels.display) {\n        fitWithPointLabels(this);\n      } else {\n        this.setCenterPoint(0, 0, 0, 0);\n      }\n    }\n  }, {\n    key: \"setCenterPoint\",\n    value: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n      this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n      this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n      this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n  }, {\n    key: \"getIndexAngle\",\n    value: function getIndexAngle(index) {\n      var angleMultiplier = TAU / (this._pointLabels.length || 1);\n      var startAngle = this.options.startAngle || 0;\n      return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n  }, {\n    key: \"getDistanceFromCenterForValue\",\n    value: function getDistanceFromCenterForValue(value) {\n      if (isNullOrUndef(value)) {\n        return NaN;\n      }\n      var scalingFactor = this.drawingArea / (this.max - this.min);\n      if (this.options.reverse) {\n        return (this.max - value) * scalingFactor;\n      }\n      return (value - this.min) * scalingFactor;\n    }\n  }, {\n    key: \"getValueForDistanceFromCenter\",\n    value: function getValueForDistanceFromCenter(distance) {\n      if (isNullOrUndef(distance)) {\n        return NaN;\n      }\n      var scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n      return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n  }, {\n    key: \"getPointLabelContext\",\n    value: function getPointLabelContext(index) {\n      var pointLabels = this._pointLabels || [];\n      if (index >= 0 && index < pointLabels.length) {\n        var pointLabel = pointLabels[index];\n        return createPointLabelContext(this.getContext(), index, pointLabel);\n      }\n    }\n  }, {\n    key: \"getPointPosition\",\n    value: function getPointPosition(index, distanceFromCenter) {\n      var additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n      return {\n        x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n        y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n        angle: angle\n      };\n    }\n  }, {\n    key: \"getPointPositionForValue\",\n    value: function getPointPositionForValue(index, value) {\n      return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n  }, {\n    key: \"getBasePosition\",\n    value: function getBasePosition(index) {\n      return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n  }, {\n    key: \"getPointLabelPosition\",\n    value: function getPointLabelPosition(index) {\n      var _this$_pointLabelItem = this._pointLabelItems[index],\n        left = _this$_pointLabelItem.left,\n        top = _this$_pointLabelItem.top,\n        right = _this$_pointLabelItem.right,\n        bottom = _this$_pointLabelItem.bottom;\n      return {\n        left: left,\n        top: top,\n        right: right,\n        bottom: bottom\n      };\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground() {\n      var _this$options16 = this.options,\n        backgroundColor = _this$options16.backgroundColor,\n        circular = _this$options16.grid.circular;\n      if (backgroundColor) {\n        var ctx = this.ctx;\n        ctx.save();\n        ctx.beginPath();\n        pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n        ctx.closePath();\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"drawGrid\",\n    value: function drawGrid() {\n      var _this40 = this;\n      var ctx = this.ctx;\n      var opts = this.options;\n      var angleLines = opts.angleLines,\n        grid = opts.grid,\n        border = opts.border;\n      var labelCount = this._pointLabels.length;\n      var i, offset, position;\n      if (opts.pointLabels.display) {\n        drawPointLabels(this, labelCount);\n      }\n      if (grid.display) {\n        this.ticks.forEach(function (tick, index) {\n          if (index !== 0) {\n            offset = _this40.getDistanceFromCenterForValue(tick.value);\n            var context = _this40.getContext(index);\n            var optsAtIndex = grid.setContext(context);\n            var optsAtIndexBorder = border.setContext(context);\n            drawRadiusLine(_this40, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n          }\n        });\n      }\n      if (angleLines.display) {\n        ctx.save();\n        for (i = labelCount - 1; i >= 0; i--) {\n          var optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n          var color = optsAtIndex.color,\n            lineWidth = optsAtIndex.lineWidth;\n          if (!lineWidth || !color) {\n            continue;\n          }\n          ctx.lineWidth = lineWidth;\n          ctx.strokeStyle = color;\n          ctx.setLineDash(optsAtIndex.borderDash);\n          ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n          offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n          position = this.getPointPosition(i, offset);\n          ctx.beginPath();\n          ctx.moveTo(this.xCenter, this.yCenter);\n          ctx.lineTo(position.x, position.y);\n          ctx.stroke();\n        }\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"drawBorder\",\n    value: function drawBorder() {}\n  }, {\n    key: \"drawLabels\",\n    value: function drawLabels() {\n      var _this41 = this;\n      var ctx = this.ctx;\n      var opts = this.options;\n      var tickOpts = opts.ticks;\n      if (!tickOpts.display) {\n        return;\n      }\n      var startAngle = this.getIndexAngle(0);\n      var offset, width;\n      ctx.save();\n      ctx.translate(this.xCenter, this.yCenter);\n      ctx.rotate(startAngle);\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      this.ticks.forEach(function (tick, index) {\n        if (index === 0 && !opts.reverse) {\n          return;\n        }\n        var optsAtIndex = tickOpts.setContext(_this41.getContext(index));\n        var tickFont = toFont(optsAtIndex.font);\n        offset = _this41.getDistanceFromCenterForValue(_this41.ticks[index].value);\n        if (optsAtIndex.showLabelBackdrop) {\n          ctx.font = tickFont.string;\n          width = ctx.measureText(tick.label).width;\n          ctx.fillStyle = optsAtIndex.backdropColor;\n          var padding = toPadding(optsAtIndex.backdropPadding);\n          ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n        }\n        renderText(ctx, tick.label, 0, -offset, tickFont, {\n          color: optsAtIndex.color\n        });\n      });\n      ctx.restore();\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle() {}\n  }]);\n  return RadialLinearScale;\n}(LinearScaleBase);\n_defineProperty(RadialLinearScale, \"id\", 'radialLinear');\n_defineProperty(RadialLinearScale, \"defaults\", {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback: function callback(label) {\n      return label;\n    },\n    padding: 5,\n    centerPointLabels: false\n  }\n});\n_defineProperty(RadialLinearScale, \"defaultRoutes\", {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n});\n_defineProperty(RadialLinearScale, \"descriptors\", {\n  angleLines: {\n    _fallback: 'grid'\n  }\n});\nvar INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nvar UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction _parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  var adapter = scale._adapter;\n  var _scale$_parseOpts = scale._parseOpts,\n    parser = _scale$_parseOpts.parser,\n    round = _scale$_parseOpts.round,\n    isoWeekday = _scale$_parseOpts.isoWeekday;\n  var value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  var ilen = UNITS.length;\n  for (var i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    var interval = INTERVALS[UNITS[i]];\n    var factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (var i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    var unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    var _lookup2 = _lookup(timestamps, time),\n      lo = _lookup2.lo,\n      hi = _lookup2.hi;\n    var timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  var adapter = scale._adapter;\n  var first = +adapter.startOf(ticks[0].value, majorUnit);\n  var last = ticks[ticks.length - 1].value;\n  var major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  var ticks = [];\n  var map = {};\n  var ilen = values.length;\n  var i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value: value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nvar TimeScale = /*#__PURE__*/function (_Scale4) {\n  _inherits(TimeScale, _Scale4);\n  var _super24 = _createSuper(TimeScale);\n  function TimeScale(props) {\n    var _this42;\n    _classCallCheck(this, TimeScale);\n    _this42 = _super24.call(this, props);\n    _this42._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    _this42._unit = 'day';\n    _this42._majorUnit = undefined;\n    _this42._offsets = {};\n    _this42._normalized = false;\n    _this42._parseOpts = undefined;\n    return _this42;\n  }\n  _createClass(TimeScale, [{\n    key: \"init\",\n    value: function init(scaleOpts) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var time = scaleOpts.time || (scaleOpts.time = {});\n      var adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n      adapter.init(opts);\n      mergeIf(time.displayFormats, adapter.formats());\n      this._parseOpts = {\n        parser: time.parser,\n        round: time.round,\n        isoWeekday: time.isoWeekday\n      };\n      _get(_getPrototypeOf(TimeScale.prototype), \"init\", this).call(this, scaleOpts);\n      this._normalized = opts.normalized;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(raw, index) {\n      if (raw === undefined) {\n        return null;\n      }\n      return _parse(this, raw);\n    }\n  }, {\n    key: \"beforeLayout\",\n    value: function beforeLayout() {\n      _get(_getPrototypeOf(TimeScale.prototype), \"beforeLayout\", this).call(this);\n      this._cache = {\n        data: [],\n        labels: [],\n        all: []\n      };\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var options = this.options;\n      var adapter = this._adapter;\n      var unit = options.time.unit || 'day';\n      var _this$getUserBounds5 = this.getUserBounds(),\n        min = _this$getUserBounds5.min,\n        max = _this$getUserBounds5.max,\n        minDefined = _this$getUserBounds5.minDefined,\n        maxDefined = _this$getUserBounds5.maxDefined;\n      function _applyBounds(bounds) {\n        if (!minDefined && !isNaN(bounds.min)) {\n          min = Math.min(min, bounds.min);\n        }\n        if (!maxDefined && !isNaN(bounds.max)) {\n          max = Math.max(max, bounds.max);\n        }\n      }\n      if (!minDefined || !maxDefined) {\n        _applyBounds(this._getLabelBounds());\n        if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n          _applyBounds(this.getMinMax(false));\n        }\n      }\n      min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n      max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n      this.min = Math.min(min, max - 1);\n      this.max = Math.max(min + 1, max);\n    }\n  }, {\n    key: \"_getLabelBounds\",\n    value: function _getLabelBounds() {\n      var arr = this.getLabelTimestamps();\n      var min = Number.POSITIVE_INFINITY;\n      var max = Number.NEGATIVE_INFINITY;\n      if (arr.length) {\n        min = arr[0];\n        max = arr[arr.length - 1];\n      }\n      return {\n        min: min,\n        max: max\n      };\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var options = this.options;\n      var timeOpts = options.time;\n      var tickOpts = options.ticks;\n      var timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n      if (options.bounds === 'ticks' && timestamps.length) {\n        this.min = this._userMin || timestamps[0];\n        this.max = this._userMax || timestamps[timestamps.length - 1];\n      }\n      var min = this.min;\n      var max = this.max;\n      var ticks = _filterBetween(timestamps, min, max);\n      this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n      this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n      this.initOffsets(timestamps);\n      if (options.reverse) {\n        ticks.reverse();\n      }\n      return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n  }, {\n    key: \"afterAutoSkip\",\n    value: function afterAutoSkip() {\n      if (this.options.offsetAfterAutoskip) {\n        this.initOffsets(this.ticks.map(function (tick) {\n          return +tick.value;\n        }));\n      }\n    }\n  }, {\n    key: \"initOffsets\",\n    value: function initOffsets() {\n      var timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var start = 0;\n      var end = 0;\n      var first, last;\n      if (this.options.offset && timestamps.length) {\n        first = this.getDecimalForValue(timestamps[0]);\n        if (timestamps.length === 1) {\n          start = 1 - first;\n        } else {\n          start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n        }\n        last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n        if (timestamps.length === 1) {\n          end = last;\n        } else {\n          end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n        }\n      }\n      var limit = timestamps.length < 3 ? 0.5 : 0.25;\n      start = _limitValue(start, 0, limit);\n      end = _limitValue(end, 0, limit);\n      this._offsets = {\n        start: start,\n        end: end,\n        factor: 1 / (start + 1 + end)\n      };\n    }\n  }, {\n    key: \"_generate\",\n    value: function _generate() {\n      var adapter = this._adapter;\n      var min = this.min;\n      var max = this.max;\n      var options = this.options;\n      var timeOpts = options.time;\n      var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n      var stepSize = valueOrDefault(options.ticks.stepSize, 1);\n      var weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n      var hasWeekday = isNumber(weekday) || weekday === true;\n      var ticks = {};\n      var first = min;\n      var time, count;\n      if (hasWeekday) {\n        first = +adapter.startOf(first, 'isoWeek', weekday);\n      }\n      first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n      if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n        throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n      }\n      var timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n      for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n        addTick(ticks, time, timestamps);\n      }\n      if (time === max || options.bounds === 'ticks' || count === 1) {\n        addTick(ticks, time, timestamps);\n      }\n      return Object.keys(ticks).sort(function (a, b) {\n        return a - b;\n      }).map(function (x) {\n        return +x;\n      });\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      var adapter = this._adapter;\n      var timeOpts = this.options.time;\n      if (timeOpts.tooltipFormat) {\n        return adapter.format(value, timeOpts.tooltipFormat);\n      }\n      return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n  }, {\n    key: \"_tickFormatFunction\",\n    value: function _tickFormatFunction(time, index, ticks, format) {\n      var options = this.options;\n      var formatter = options.ticks.callback;\n      if (formatter) {\n        return callback(formatter, [time, index, ticks], this);\n      }\n      var formats = options.time.displayFormats;\n      var unit = this._unit;\n      var majorUnit = this._majorUnit;\n      var minorFormat = unit && formats[unit];\n      var majorFormat = majorUnit && formats[majorUnit];\n      var tick = ticks[index];\n      var major = majorUnit && majorFormat && tick && tick.major;\n      return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n  }, {\n    key: \"generateTickLabels\",\n    value: function generateTickLabels(ticks) {\n      var i, ilen, tick;\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        tick = ticks[i];\n        tick.label = this._tickFormatFunction(tick.value, i, ticks);\n      }\n    }\n  }, {\n    key: \"getDecimalForValue\",\n    value: function getDecimalForValue(value) {\n      return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      var offsets = this._offsets;\n      var pos = this.getDecimalForValue(value);\n      return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var offsets = this._offsets;\n      var pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n      return this.min + pos * (this.max - this.min);\n    }\n  }, {\n    key: \"_getLabelSize\",\n    value: function _getLabelSize(label) {\n      var ticksOpts = this.options.ticks;\n      var tickLabelWidth = this.ctx.measureText(label).width;\n      var angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n      var cosRotation = Math.cos(angle);\n      var sinRotation = Math.sin(angle);\n      var tickFontSize = this._resolveTickFontOptions(0).size;\n      return {\n        w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n        h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n      };\n    }\n  }, {\n    key: \"_getLabelCapacity\",\n    value: function _getLabelCapacity(exampleTime) {\n      var timeOpts = this.options.time;\n      var displayFormats = timeOpts.displayFormats;\n      var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n      var exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n      var size = this._getLabelSize(exampleLabel);\n      var capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n      return capacity > 0 ? capacity : 1;\n    }\n  }, {\n    key: \"getDataTimestamps\",\n    value: function getDataTimestamps() {\n      var timestamps = this._cache.data || [];\n      var i, ilen;\n      if (timestamps.length) {\n        return timestamps;\n      }\n      var metas = this.getMatchingVisibleMetas();\n      if (this._normalized && metas.length) {\n        return this._cache.data = metas[0].controller.getAllParsedValues(this);\n      }\n      for (i = 0, ilen = metas.length; i < ilen; ++i) {\n        timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n      }\n      return this._cache.data = this.normalize(timestamps);\n    }\n  }, {\n    key: \"getLabelTimestamps\",\n    value: function getLabelTimestamps() {\n      var timestamps = this._cache.labels || [];\n      var i, ilen;\n      if (timestamps.length) {\n        return timestamps;\n      }\n      var labels = this.getLabels();\n      for (i = 0, ilen = labels.length; i < ilen; ++i) {\n        timestamps.push(_parse(this, labels[i]));\n      }\n      return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(values) {\n      return _arrayUnique(values.sort(sorter));\n    }\n  }]);\n  return TimeScale;\n}(Scale);\n_defineProperty(TimeScale, \"id\", 'time');\n_defineProperty(TimeScale, \"defaults\", {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    callback: false,\n    major: {\n      enabled: false\n    }\n  }\n});\nfunction interpolate(table, val, reverse) {\n  var lo = 0;\n  var hi = table.length - 1;\n  var prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      var _lookupByKey2 = _lookupByKey(table, 'pos', val);\n      lo = _lookupByKey2.lo;\n      hi = _lookupByKey2.hi;\n    }\n    var _table$lo = table[lo];\n    prevSource = _table$lo.pos;\n    prevTarget = _table$lo.time;\n    var _table$hi = table[hi];\n    nextSource = _table$hi.pos;\n    nextTarget = _table$hi.time;\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      var _lookupByKey3 = _lookupByKey(table, 'time', val);\n      lo = _lookupByKey3.lo;\n      hi = _lookupByKey3.hi;\n    }\n    var _table$lo2 = table[lo];\n    prevSource = _table$lo2.time;\n    prevTarget = _table$lo2.pos;\n    var _table$hi2 = table[hi];\n    nextSource = _table$hi2.time;\n    nextTarget = _table$hi2.pos;\n  }\n  var span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nvar TimeSeriesScale = /*#__PURE__*/function (_TimeScale) {\n  _inherits(TimeSeriesScale, _TimeScale);\n  var _super25 = _createSuper(TimeSeriesScale);\n  function TimeSeriesScale(props) {\n    var _this43;\n    _classCallCheck(this, TimeSeriesScale);\n    _this43 = _super25.call(this, props);\n    _this43._table = [];\n    _this43._minPos = undefined;\n    _this43._tableRange = undefined;\n    return _this43;\n  }\n  _createClass(TimeSeriesScale, [{\n    key: \"initOffsets\",\n    value: function initOffsets() {\n      var timestamps = this._getTimestampsForTable();\n      var table = this._table = this.buildLookupTable(timestamps);\n      this._minPos = interpolate(table, this.min);\n      this._tableRange = interpolate(table, this.max) - this._minPos;\n      _get(_getPrototypeOf(TimeSeriesScale.prototype), \"initOffsets\", this).call(this, timestamps);\n    }\n  }, {\n    key: \"buildLookupTable\",\n    value: function buildLookupTable(timestamps) {\n      var min = this.min,\n        max = this.max;\n      var items = [];\n      var table = [];\n      var i, ilen, prev, curr, next;\n      for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n        curr = timestamps[i];\n        if (curr >= min && curr <= max) {\n          items.push(curr);\n        }\n      }\n      if (items.length < 2) {\n        return [{\n          time: min,\n          pos: 0\n        }, {\n          time: max,\n          pos: 1\n        }];\n      }\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        next = items[i + 1];\n        prev = items[i - 1];\n        curr = items[i];\n        if (Math.round((next + prev) / 2) !== curr) {\n          table.push({\n            time: curr,\n            pos: i / (ilen - 1)\n          });\n        }\n      }\n      return table;\n    }\n  }, {\n    key: \"_getTimestampsForTable\",\n    value: function _getTimestampsForTable() {\n      var timestamps = this._cache.all || [];\n      if (timestamps.length) {\n        return timestamps;\n      }\n      var data = this.getDataTimestamps();\n      var label = this.getLabelTimestamps();\n      if (data.length && label.length) {\n        timestamps = this.normalize(data.concat(label));\n      } else {\n        timestamps = data.length ? data : label;\n      }\n      timestamps = this._cache.all = timestamps;\n      return timestamps;\n    }\n  }, {\n    key: \"getDecimalForValue\",\n    value: function getDecimalForValue(value) {\n      return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var offsets = this._offsets;\n      var decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n      return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n  }]);\n  return TimeSeriesScale;\n}(TimeScale);\n_defineProperty(TimeSeriesScale, \"id\", 'timeseries');\n_defineProperty(TimeSeriesScale, \"defaults\", TimeScale.defaults);\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nvar registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"mappings":"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","names":["Animator","constructor","_classCallCheck","_request","_charts","Map","_running","_lastDate","undefined","_createClass","key","value","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_this","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_this2","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","size","assign","animator","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","isFinite","sign","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","_step","_iterator","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","_step2","_iterator2","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","_this$_parsing$xAxisK","xAxisKey","_this$_parsing$yAxisK","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","_this3","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","_step3","arg1","arg2","_iterator3","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","_defineProperty","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","_this$_parsing2$xAxis","_this$_parsing2$yAxis","iAxisKey","vAxisKey","obj","_get","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","grouped","skipNull","val","isNaN","_step4","indexOf","_iterator4","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","numbers","_index_","offset","grid","_value_","beginAtZero","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","_this4","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","spacing","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","animateRotate","calculateCircumference","animationOpts","centerX","centerY","animateScale","arc","metaData","formatNumber","locale","borderAlign","borderWidth","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","_scriptable","_indexable","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","onClick","e","legendItem","toggleDataVisibility","LineController","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","showLine","segment","animated","spanGaps","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","_this5","_parseObjectDataRadialScale","bind","_updateRadius","_this6","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","_this7","angleLines","display","circular","pointLabels","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","registry","getElement","interaction","abstract","Error","DateAdapterBase","init","formats","format","diff","startOf","endOf","members","prototype","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","_step5","wrap","includes","_stack","placed","_iterator5","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","_step6","_iterator6","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","_step7","contains","_iterator7","createAttachObserver","observer","MutationObserver","entries","trigger","_step8","addedNodes","removedNodes","_iterator8","observe","document","childList","subtree","createDetachObserver","_step9","_iterator9","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","tooltipPosition","hasValue","final","ret","_this8","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_this9","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","_this$options5","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","_this$options6$ticks","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","ticksLength","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_this$options9$ticks","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","_step10","renderTextOptions","renderText","_iterator10","unclipArea","drawTitle","tz","gz","bz","_this10","axisID","_maxDigits","fontSize","TypedRegistry","scope","override","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","overrides","unregister","itemDefaults","merge","defaultRoutes","routeDefaults","descriptors","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","_toConsumableArray","arg","reg","_this11","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","_step11","descriptor","plugin","callCallback","cancelable","_iterator11","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","_step12","pluginOpts","_iterator12","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","getResolver","resolver","subPrefixes","needContext","isFunction","subResolver","_attachContext","_step13","_iterator13","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","_step14","_iterator14","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getDatasetArea","Chart","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","_this12","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","_this13","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","_this14","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","_this15","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","_this16","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","_step15","_iterator15","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_this18","_this19","_remove","detached","_this20","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_this22","_handleEvent","_getActiveElements","_isClickEvent","onHover","invalidatePlugins","version","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","_this23","chartX","chartY","rAdjust","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","_params$end","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","_ref5$move","fastPathSegment","_ref6$move","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","_step16","_iterator16","usePath2D","LineElement","_this24","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","_step17","_iterator17","capBezierPoints","hitRadius","PointElement","_this25","mouseX","mouseY","inXRange","inYRange","hoverRadius","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","_this26","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","forceOverride","_args","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","configurable","enumerable","d","tpoints","_step18","_findSegmentEnd","_getBounds","targetSegments","_step19","tgt","subBounds","fillSources","_boundSegment","_step20","fillSource","_getEdge","_iterator20","_iterator19","_iterator18","_normalizeAngle","_pointsFromSegments","boundary","_ref7$x","_ref7$y","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","_ref9$above","above","_ref9$below","doFill","clipVertical","clipY","lineLoop","_step21","_iterator21","_step22","src","_src$style","notShape","clipBounds","interpolatedLineTo","targetLoop","_iterator22","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_this27","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","_step23","hitbox","leftForLtr","_iterator23","_step24","_iterator24","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","_this29","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","startsWith","Title","_this30","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","_this31","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","_this32","getAfterBody","getFooter","_createItems","itemSort","_this33","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","_this34","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_this35","_startValue","_valueRange","_addedLabels","added","_step25","_iterator25","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","rad","LinearScaleBase","_this36","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","_this37","_zero","logarithmic","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","extra","outerDistance","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","drawPointLabels","backdropLeft","backdropTop","backdropWidth","backdropHeight","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","_this38","_this39","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","_this40","rotate","_this41","animate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","_parseOpts","parser","isoWeekday","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","_this42","_unit","_majorUnit","_offsets","_normalized","adapters","displayFormats","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_this43","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sources":["C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\core\\core.animator.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\core\\core.animation.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\core\\core.animations.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\core\\core.datasetController.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\controllers\\controller.bar.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\controllers\\controller.bubble.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\controllers\\controller.doughnut.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\controllers\\controller.line.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\controllers\\controller.polarArea.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\controllers\\controller.pie.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\controllers\\controller.radar.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\controllers\\controller.scatter.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\core\\core.adapters.ts","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\core\\core.interaction.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\core\\core.layouts.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\platform\\platform.base.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\platform\\platform.basic.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\platform\\platform.dom.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\platform\\index.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\core\\core.element.ts","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\core\\core.scale.autoskip.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\core\\core.scale.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\core\\core.typedRegistry.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\core\\core.registry.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\core\\core.plugins.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\core\\core.config.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\core\\core.controller.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\elements\\element.arc.ts","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\elements\\element.line.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\elements\\element.point.ts","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\elements\\element.bar.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\plugins\\plugin.colors.ts","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\plugins\\plugin.decimation.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.segment.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.helper.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.options.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.stack.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\simpleArc.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.drawing.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\index.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\plugins\\plugin.legend.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\plugins\\plugin.title.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\plugins\\plugin.subtitle.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\plugins\\plugin.tooltip.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\scales\\scale.category.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\scales\\scale.linearbase.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\scales\\scale.linear.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\scales\\scale.logarithmic.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\scales\\scale.radialLinear.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\scales\\scale.time.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\scales\\scale.timeseries.js","C:\\Users\\Prajwal\\Desktop\\crypto-dashboard-dec\\node_modules\\chart.js\\src\\index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (an thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal meta data accordingly.\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outr radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing',\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outr radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../../types/basic.js';\nimport type {ChartOptions} from '../../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../../types/basic.js';\nimport type {Point} from '../../types/geometric.js';\nimport type {Animation} from '../../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = this.ticks.length;\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; ++i) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n\n  id = scaleOptions.axis\n    || axisFromPosition(scaleOptions.position)\n    || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n\n  if (id) {\n    return id;\n  }\n\n  throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getDatasetArea(meta) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the envent inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference',\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      options: {elements},\n      data: {datasets}\n    } = chart.config;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || elements && containsColorsDefinitions(elements))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {value: data});\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : (labelColors.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n\n    items.push({\n      // Text position\n      x: pointLabelPosition.x,\n      y,\n\n      // Text rendering data\n      textAlign,\n\n      // Bounding box\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\n    const {backdropColor} = optsAtIndex;\n\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if its not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @private\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guestimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}